<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/07/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>JSX实现todoList案例</title>
    <url>/2022/12/31/JSX%E5%AE%9E%E7%8E%B0todoList%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<p>在vue2中使用JSX实现todoList案例，通过这个案例，可以了解template的v-if、v-for、v-on、v-model、为组件添加样式、传递自定义事件及数据，在JSX中如何实现。</p>
<p>注意：JSX是在render函数写的，由于使用了render函数，template就不用写了，因为template和render同时存在，会以template为准。</p>
<h3 id="拆分组件"><a href="#拆分组件" class="headerlink" title="拆分组件"></a>拆分组件</h3><p>Header：添加todo</p>
<p>List：展示全部数据的区域</p>
<p>Item：展示每条todo信息、修改和删除操作</p>
<p>Footer：统计已完成的todo、清除已完成</p>
<p><strong>目录结构如下：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─ src</span><br><span class="line">│  ├─ App.vue</span><br><span class="line">│  ├─ components</span><br><span class="line">│  │  ├─ Footer.vue</span><br><span class="line">│  │  ├─ Header.vue</span><br><span class="line">│  │  ├─ Item.vue</span><br><span class="line">│  │  ├─ List.vue</span><br></pre></td></tr></table></figure>

<p>页面效果如下:</p>
<p><img src="/images/todoList_JSX.png" alt="todoList"></p>
<h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p>将数据放在App.vue下</p>
<p>因为header为增加数据，List也要获取数据，对数据进行删改查操作，Footer也要用数据进行统计、删除，App作为它们的父组件，父子通信比非父子通信更简单、快捷</p>
<h3 id="完成添加todo"><a href="#完成添加todo" class="headerlink" title="完成添加todo"></a>完成添加todo</h3><p>涉及两个组件App和Header</p>
<p>在Header组件中添加todo，将todo数据整理好，携带数据并通知App（父组件）添加数据，进行父子通信，用到<strong>自定义事件</strong>。</p>
<p>JSX:</p>
<ol>
<li><p>自定义事件在JSX中的写法是这样的：vOn:getToDo&#x3D;{this.getToDo}，vOn表示v-on，getToDo表示自定义事件名，在<code>&#123;&#125;</code>里写JS代码</p>
</li>
<li><p>v-model需要写成：vModel&#x3D;{this.task}，驼峰式写法</p>
</li>
<li><p>绑定的事件需要添加修饰符如keyup.enter，需要写成vOn:keyup_enter&#x3D;{this.submit}</p>
</li>
</ol>
<p>App.vue组件代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Header.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Header</span> <span class="attr">class</span>=<span class="string">&quot;distance&quot;</span> <span class="attr">vOn:getToDo</span>=<span class="string">&#123;this.getToDo&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">val</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">      <span class="comment">//数据保存在list中</span></span><br><span class="line">      <span class="attr">todoList</span>: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;<span class="comment">//只展示与Header有关的方法</span></span><br><span class="line">    <span class="comment">//添加todo</span></span><br><span class="line">    <span class="title function_">getToDo</span>(<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">todoList</span>.<span class="title function_">push</span>(data);</span><br><span class="line">    &#125;,    </span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Header.vue代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.renderInput()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">task</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">renderInput</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> inputAttrs = &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="attr">placeholder</span>: <span class="string">&quot;请输入您的任务，按回车键确认&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;<span class="attr">...</span>&#123; <span class="attr">attrs:</span> <span class="attr">inputAttrs</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">vModel</span>=<span class="string">&#123;this.task&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">vOn:keyup_enter</span>=<span class="string">&#123;this.submit&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">submit</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//通知App组件添加todo</span></span><br><span class="line">            <span class="comment">//整理数据，为每个todo添加唯一id</span></span><br><span class="line">            <span class="comment">//Item组件进行删除操作,vue的虚拟Dom会复用相同的组件,会导致虚拟DOM不能正确追踪每一个Item组件（每个todo）,确保每个todo项(每一个Item组件)唯一，</span></span><br><span class="line">            <span class="comment">//需要在List组件进行v-for遍历todoList生成Item组件时，为每个Item绑定唯一值:key=id</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;getToDo&quot;</span>, &#123; <span class="attr">task</span>: <span class="variable language_">this</span>.<span class="property">task</span>, <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">id</span>++, <span class="attr">checked</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">task</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="完成todoList展示、选中、修改、删除"><a href="#完成todoList展示、选中、修改、删除" class="headerlink" title="完成todoList展示、选中、修改、删除"></a>完成todoList展示、选中、修改、删除</h3><p>涉及三个组件：App、List、Item</p>
<p>其中删除、修改在Item组件中，需要到App组件去操作数据，而Item和App是爷孙关系，可以使用**$attr和$listeners**进行爷孙通信，v-on&#x3D;”$listeners”可以让子组件继承所有我们依赖的组件的事件。</p>
<p><strong style="color:orange">在点击修改按钮，显示输入框时，单纯使用v-show或v-if并不能使显示的输入框自动聚焦，所以我使用自定义指令和v-if组合实现显示输入框自动聚焦。</strong></p>
<p><strong style="color:orange">之所以不使用自定义+v-show，是因为使用自定义完成input框聚焦时，使用的inserted钩子只在节点插入时生效，v-show的效果相当于display为none或block，并不像v-if那样实现对节点的增删。</strong></p>
<p>JSX：</p>
<ol>
<li>在JSX中组件需要传递多个事件，可以使用<code>on=&#123;&#123;事件1,事件2...&#125;&#125;</code></li>
<li>父组件传递数据给子组件：todoList&#x3D;{this.todoList}</li>
<li>v-on&#x3D;”$listeners”，需要写成：on&#x3D;{this.$listeners}</li>
<li>v-show和自定义指令v-focus，需要写成驼峰式写法：vShow、vFocus</li>
<li>添加多个样式：class&#x3D;{[cls,’btn’]}，其中cls为变量传入，并且可以写JS表达式（如三元运算符）</li>
</ol>
<p>App（爷）组件代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Header.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Header</span> <span class="attr">class</span>=<span class="string">&quot;distance&quot;</span> <span class="attr">vOn:getToDo</span>=<span class="string">&#123;this.getToDo&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">List</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">class</span>=<span class="string">&quot;distance&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">todoList</span>=<span class="string">&#123;this.todoList&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">on</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">checkedTodo:</span> <span class="attr">this.checkedTodo</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">delToDo:</span> <span class="attr">this.delToDo</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">updateTodo:</span> <span class="attr">this.updateTodo</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">val</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">      <span class="comment">//数据保存在list中</span></span><br><span class="line">      <span class="attr">todoList</span>: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;<span class="comment">//展示与Item有关的方法</span></span><br><span class="line">    <span class="comment">//修改item的checked值</span></span><br><span class="line">    <span class="title function_">checkedTodo</span>(<span class="params">id</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">todoList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//将当前的todoItem的checked值修改</span></span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">id</span> == id) &#123;</span><br><span class="line">          item.<span class="property">checked</span> = !item.<span class="property">checked</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//删除某个todo</span></span><br><span class="line">    <span class="title function_">delToDo</span>(<span class="params">id</span>) &#123;</span><br><span class="line">      <span class="comment">//利用filter将id不符合的数据返回即可</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">todoList</span> = <span class="variable language_">this</span>.<span class="property">todoList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> != id);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//更新某个todo</span></span><br><span class="line">    <span class="title function_">updateTodo</span>(<span class="params">task, id</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">todoList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">id</span> == id) &#123;</span><br><span class="line">          item.<span class="property">task</span> = task;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>List（父）组件代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Item</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Item.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;todoList&quot;</span>],</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.todoList.map((todoItem) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          return (</span></span><br><span class="line"><span class="language-xml">              //Item组件进行删除操作,vue的虚拟Dom会复用相同的组件,会导致虚拟DOM不能正确追踪每一个Item组件（每个todo）,确保每个todo项(每一个Item组件)唯一，</span></span><br><span class="line"><span class="language-xml">            //需要在List组件进行v-for遍历todoList生成Item组件时，为每个Item绑定唯一值:key=id</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Item</span> <span class="attr">todoItem</span>=<span class="string">&#123;todoItem&#125;</span> <span class="attr">on</span>=<span class="string">&#123;this.$listeners&#125;</span> <span class="attr">key</span>=<span class="string">&#123;todoItem.id&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          );</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Item（孙）组件代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">props</span>:[<span class="string">&#x27;todoItem&#x27;</span>],</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">vOn:mouseenter</span>=<span class="string">&#123;this.showBtn&#125;</span> <span class="attr">vOn:mouseleave</span>=<span class="string">&#123;this.closeBtn&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;this.renderCheckBox()&#125; </span></span><br><span class="line"><span class="language-xml">                &#123;this.renderModifyInput()&#125;</span></span><br><span class="line"><span class="language-xml">                &#123;this.renderText()&#125;</span></span><br><span class="line"><span class="language-xml">                &#123;this.renderBtn(&#x27;btn-info&#x27;,this.showInput,&#x27;修改&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">                &#123;this.renderBtn(&#x27;btn-danger&#x27;,this.delItem,&#x27;删除&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">isShowBtn</span>:<span class="literal">false</span>,    <span class="comment">//控制修改、删除按钮显示与隐藏</span></span><br><span class="line">            <span class="attr">text</span>: <span class="variable language_">this</span>.<span class="property">todoItem</span>.<span class="property">task</span>,   <span class="comment">//修改task的文本</span></span><br><span class="line">            <span class="attr">isshowInput</span>:<span class="literal">false</span>   <span class="comment">//控制修改输入框显示与隐藏</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="comment">//渲染修改和删除按钮</span></span><br><span class="line">        <span class="title function_">renderBtn</span>(<span class="params">cls,method,type</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&#123;[cls,</span>&#x27;<span class="attr">btn</span>&#x27;]&#125; <span class="attr">vShow</span>=<span class="string">&#123;this.isShowBtn&#125;</span> <span class="attr">vOn:click</span>=<span class="string">&#123;method&#125;</span>&gt;</span>&#123;type&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//渲染todo的文本</span></span><br><span class="line">        <span class="title function_">renderText</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">vShow</span>=<span class="string">&#123;!this.isshowInput&#125;</span>&gt;</span>&#123;this.todoItem.task&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//渲染修改框</span></span><br><span class="line">        <span class="title function_">renderModifyInput</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">isshowInput</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">vModel</span>=<span class="string">&#123;this.text&#125;</span> <span class="attr">vFocus</span> <span class="attr">vOn:blur</span>=<span class="string">&#123;this.handleBlur&#125;</span> /&gt;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//渲染勾选框</span></span><br><span class="line">        <span class="title function_">renderCheckBox</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;this.todoItem.checked&#125;</span> <span class="attr">vOn:click</span>=<span class="string">&#123;this.handleSelected&#125;</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//展示修改、删除按钮</span></span><br><span class="line">        <span class="title function_">showBtn</span>(<span class="params"></span>)&#123;  </span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isShowBtn</span> = <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//隐藏修改、删除按钮</span></span><br><span class="line">        <span class="title function_">closeBtn</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isShowBtn</span> = <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//checked改变通知爷组件修改checked的值</span></span><br><span class="line">        <span class="title function_">handleSelected</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//通知App组件（爷组件），谁被勾选或取消</span></span><br><span class="line">            <span class="variable language_">this</span>.$emit(<span class="string">&#x27;checkedTodo&#x27;</span>,<span class="variable language_">this</span>.<span class="property">todoItem</span>.<span class="property">id</span>) </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//删除item</span></span><br><span class="line">        <span class="title function_">delItem</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//通知App组件（爷组件），谁被勾选或取消    </span></span><br><span class="line">            <span class="variable language_">this</span>.$emit(<span class="string">&#x27;delToDo&#x27;</span>,<span class="variable language_">this</span>.<span class="property">todoItem</span>.<span class="property">id</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//显示修改输入框</span></span><br><span class="line">        <span class="title function_">showInput</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isshowInput</span> = <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//失去焦点后，完成修改</span></span><br><span class="line">        <span class="title function_">handleBlur</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//隐藏修改框</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isshowInput</span> = <span class="literal">false</span></span><br><span class="line">            <span class="comment">//判断taks是否改变，task改变才通知爷组件修改数据</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">text</span>!=<span class="variable language_">this</span>.<span class="property">todoItem</span>.<span class="property">task</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">submit</span>(<span class="variable language_">this</span>.<span class="property">text</span>,<span class="variable language_">this</span>.<span class="property">todoItem</span>.<span class="property">id</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//完成修改</span></span><br><span class="line">        <span class="title function_">submit</span>(<span class="params">text,id</span>)&#123;</span><br><span class="line">            <span class="comment">//通知App组件（爷组件），更新todo数据</span></span><br><span class="line">            <span class="variable language_">this</span>.$emit(<span class="string">&#x27;updateTodo&#x27;</span>,text,id)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">directives</span>:&#123;</span><br><span class="line">        <span class="comment">//自定义v-foucs，当input显示自动聚焦</span></span><br><span class="line">         <span class="attr">focus</span>:&#123;</span><br><span class="line">             <span class="title function_">inserted</span>(<span class="params">el</span>)&#123;</span><br><span class="line">                el.<span class="title function_">focus</span>()</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="统计todoList和清除已完成的todo"><a href="#统计todoList和清除已完成的todo" class="headerlink" title="统计todoList和清除已完成的todo"></a>统计todoList和清除已完成的todo</h3><p>涉及两个组件：App和Footer组件</p>
<p>footer在清除已完成的todo和全选或取消全选时，需要通知App去修改数据，父子通信使用<strong>自定义事件</strong></p>
<p>App组件代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Header.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&quot;@/components/List.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Footer</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Footer.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Header</span> <span class="attr">class</span>=<span class="string">&quot;distance&quot;</span> <span class="attr">vOn:getToDo</span>=<span class="string">&#123;this.getToDo&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">List</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">class</span>=<span class="string">&quot;distance&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">todoList</span>=<span class="string">&#123;this.todoList&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">on</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">checkedTodo:</span> <span class="attr">this.checkedTodo</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">delToDo:</span> <span class="attr">this.delToDo</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">updateTodo:</span> <span class="attr">this.updateTodo</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Footer</span> <span class="attr">class</span>=<span class="string">&quot;distance&quot;</span> <span class="attr">vOn:checkedAll</span>=<span class="string">&#123;this.checkedAll&#125;</span> <span class="attr">vOn:delChecked</span>=<span class="string">&#123;this.delChecked&#125;</span> <span class="attr">todoList</span>=<span class="string">&#123;this.todoList&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">val</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">      <span class="comment">//数据保存在list中</span></span><br><span class="line">      <span class="attr">todoList</span>: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;<span class="comment">//只展示与Footer有关的方法</span></span><br><span class="line">    <span class="comment">//全部选中或取消选中</span></span><br><span class="line">    <span class="title function_">checkedAll</span>(<span class="params">flag</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">cancel</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">todoList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">          item.<span class="property">checked</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//取消全选</span></span><br><span class="line">    <span class="title function_">cancel</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">todoList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        item.<span class="property">checked</span> = <span class="literal">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//清除已完成的todo</span></span><br><span class="line">    <span class="title function_">delChecked</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">todoList</span> = <span class="variable language_">this</span>.<span class="property">todoList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item.<span class="property">checked</span> == <span class="literal">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Footer组件代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;todoList&quot;</span>],</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.renderCheckBox()&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;this.renderSpan()&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;this.renderBtn()&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">//渲染清除按钮</span></span><br><span class="line">    <span class="title function_">renderBtn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">disabled</span>=<span class="string">&#123;this.Done</span> == <span class="string">0&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">vOn:click</span>=<span class="string">&#123;this.handleDelChecked&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          清除已完成按钮</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//渲染统计信息文本</span></span><br><span class="line">    <span class="title function_">renderSpan</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          已完成 &#123;this.Done&#125;/ 全部&#123;this.total&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//渲染全选框</span></span><br><span class="line">    <span class="title function_">renderCheckBox</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> //<span class="attr">如果每一个todo都勾选</span>，<span class="attr">那么也应该全选</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">checked</span>=<span class="string">&#123;this.Done</span> == <span class="string">this.todoList.length</span> &amp;&amp; <span class="attr">this.todoList.length</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">vOn:click</span>=<span class="string">&#123;this.handleCheckedAll&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">handleCheckedAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// console.log()</span></span><br><span class="line">      <span class="comment">//如果Done=总数,则表明取消全选,反之全选</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;checkedAll&quot;</span>, <span class="variable language_">this</span>.<span class="property">Done</span> === <span class="variable language_">this</span>.<span class="property">todoList</span>.<span class="property">length</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//删除已完成（即删除勾选的）</span></span><br><span class="line">    <span class="title function_">handleDelChecked</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//通知App(父组件)清除已完成的todo</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;delChecked&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//计算总数</span></span><br><span class="line">    <span class="title function_">total</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">todoList</span>.<span class="property">length</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//计算有多少已完成</span></span><br><span class="line">    <span class="title class_">Done</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">todoList</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> prev + (curr.<span class="property">checked</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">      &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>JSX</tag>
      </tags>
  </entry>
  <entry>
    <title>token的使用</title>
    <url>/2022/11/19/tp6%E5%AE%9E%E7%8E%B0JWT/</url>
    <content><![CDATA[<h3 id="tp6实现JWT"><a href="#tp6实现JWT" class="headerlink" title="tp6实现JWT"></a>tp6实现JWT</h3><p>composer安装JWT</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer require firebase/php-jwt</span><br></pre></td></tr></table></figure>

<p>引入并使用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入token工具</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Firebase</span>\<span class="title">JWT</span>\<span class="title">JWT</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Firebase</span>\<span class="title">JWT</span>\<span class="title">Key</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$key</span> = <span class="string">&#x27;example_key&#x27;</span>;   <span class="comment">//这里填写你自己设置的密钥</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//加密并返回token</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generate</span>(<span class="params"><span class="variable">$userId</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$payload</span> = [</span><br><span class="line">            <span class="string">&#x27;iss&#x27;</span> =&gt; <span class="string">&#x27;http://example.org&#x27;</span>,  <span class="comment">//jwt签发方，这个地方可以自定义</span></span><br><span class="line">            <span class="string">&#x27;aud&#x27;</span> =&gt; <span class="string">&#x27;http://example.com&#x27;</span>,  <span class="comment">//jwt接收方，这个地方可以自定义</span></span><br><span class="line">            <span class="string">&#x27;exp&#x27;</span> =&gt; <span class="title function_ invoke__">time</span>()+<span class="number">3600</span>*<span class="number">2</span>,         <span class="comment">//jwt的过期时间，过期时间必须大于签发时间</span></span><br><span class="line">            <span class="string">&#x27;iat&#x27;</span> =&gt; <span class="title function_ invoke__">time</span>(),            <span class="comment">//jwt的签发时间</span></span><br><span class="line">            <span class="string">&#x27;nbf&#x27;</span> =&gt; <span class="title function_ invoke__">time</span>(),             <span class="comment">//定义在什么时间之前，某个时间点后才能访问</span></span><br><span class="line">            <span class="string">&#x27;data&#x27;</span> =&gt; [</span><br><span class="line">                <span class="string">&#x27;userId&#x27;</span> =&gt; <span class="variable">$userId</span></span><br><span class="line">            ]</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$token</span> = JWT::<span class="title function_ invoke__">encode</span>(<span class="variable">$payload</span>, <span class="variable">$this</span>-&gt;key, <span class="string">&#x27;HS256&#x27;</span>);        <span class="comment">//encode加密</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$token</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解密</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params"><span class="variable">$token</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$decoded</span> = JWT::<span class="title function_ invoke__">decode</span>(<span class="variable">$token</span>, <span class="keyword">new</span> <span class="title class_">Key</span>(<span class="variable">$this</span>-&gt;key, <span class="string">&#x27;HS256&#x27;</span>));   <span class="comment">//decode解密</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果用户的token解密后的一些数据(比如账号id)和前端登录保存在cookie里的账户id是吻合的，那么就说明是本人</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$decoded</span>-&gt;data-&gt;userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authToken</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$createToken</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">generate</span>(<span class="string">&#x27;zhangs&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$createToken</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$token</span> = <span class="title class_">Request</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">parse</span>(<span class="variable">$token</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h3><p>tp6解决跨域，在middleware.php中配置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跨域请求支持</span></span><br><span class="line">    \think\middleware<span class="title class_">\AllowCrossDomain</span>::<span class="variable language_">class</span>,</span><br></pre></td></tr></table></figure>

<h3 id="首次请求生成token和设置token"><a href="#首次请求生成token和设置token" class="headerlink" title="首次请求生成token和设置token"></a>首次请求生成token和设置token</h3><p>前端代码</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">userAccount</span>: <span class="number">91222</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;swp&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里需要判断token是否存在，存在就从存储中获取token</span></span><br><span class="line"><span class="keyword">let</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://www.sunwp.com/sunwp_forum/test/test&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">body</span>:data,</span><br><span class="line">    <span class="attr">headers</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="comment">//设置请求头</span></span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">`<span class="subst">$&#123;token&#125;</span>`</span>,    <span class="comment">//在ts中直接赋值会报错，使用模板字符串</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取的数据&#x27;</span>,data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//处理从服务器返回的数据，设置token</span></span><br><span class="line">    <span class="keyword">let</span> token = res.<span class="property">token</span></span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>,token)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;已将token存放到local storage中&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error&#x27;</span>,error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>后端代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取前端发过来的数据</span></span><br><span class="line">   <span class="variable">$userAccount</span> = <span class="title class_">Request</span>::<span class="title function_ invoke__">param</span>(<span class="string">&#x27;userAccount&#x27;</span>);</span><br><span class="line">   <span class="variable">$password</span> = <span class="title class_">Request</span>::<span class="title function_ invoke__">param</span>(<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">   <span class="comment">//初始化token</span></span><br><span class="line">   <span class="variable">$token</span> = <span class="literal">null</span>;</span><br><span class="line">   <span class="comment">//验证账号和密码是否正确</span></span><br><span class="line">   <span class="keyword">if</span>(<span class="variable">$userAccount</span> == <span class="string">&#x27;91222&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$status</span> = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span>(<span class="variable">$password</span> == <span class="string">&#x27;swp&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable">$status</span> = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//成功后进行生成token</span></span><br><span class="line">            <span class="variable">$token</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">generate</span>(<span class="variable">$userAccount</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$status</span> = <span class="number">0</span>;</span><br><span class="line">   &#125;       </span><br><span class="line">   </span><br><span class="line">    <span class="variable">$data</span> = [<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;返回的信息&#x27;</span>,<span class="string">&#x27;status&#x27;</span>=&gt;<span class="variable">$status</span>,<span class="string">&#x27;token&#x27;</span>=&gt;<span class="variable">$token</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">json</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="非首次请求设置请求头和获取请求头"><a href="#非首次请求设置请求头和获取请求头" class="headerlink" title="非首次请求设置请求头和获取请求头"></a>非首次请求设置请求头和获取请求头</h3><p>前端</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://www.sunwp.com/sunwp_forum/test/test2&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">headers</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">`<span class="subst">$&#123;token&#125;</span>`</span>,    <span class="comment">//在ts中直接赋值会报错，使用模板字符串</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>tp6</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$header</span> = <span class="title class_">Request</span>::<span class="title function_ invoke__">header</span>(<span class="string">&#x27;Authorization&#x27;</span>);</span><br><span class="line">        <span class="comment">//将token解码，得到用户信息</span></span><br><span class="line">        <span class="variable">$param</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">parse</span>(<span class="variable">$header</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$data</span> = [<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;用户信息&#x27;</span>,<span class="string">&#x27;data&#x27;</span>=&gt;<span class="variable">$param</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">json</span>(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>tp6</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>ts+webpack环境构建</title>
    <url>/2022/11/24/ts-webpack%E7%8E%AF%E5%A2%83%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="npm包初始化和安装typescript"><a href="#npm包初始化和安装typescript" class="headerlink" title="npm包初始化和安装typescript"></a>npm包初始化和安装typescript</h3><p>将ts_demo文件夹初始化为一个npm包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<p>全局安装typescript</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i typescript -g</span><br></pre></td></tr></table></figure>

<p>如果出现以下错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\xxx\AppData\Roaming\npm\cnpm.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅</span><br></pre></td></tr></table></figure>

<p>用管理员身份运行power shell，执行以下操作，根据提示输入A回车即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure>

<p>ts初始化：<code>tsc --init</code> 会生成tsconfig.json文件</p>
<p>新建文件夹src，在src下新建index.ts</p>
<h3 id="配置构建工具webpack"><a href="#配置构建工具webpack" class="headerlink" title="配置构建工具webpack"></a>配置构建工具webpack</h3><p>安装webpack相关依赖(在ts_demo目录下安装)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i webpack webpack-cli webpack-dev-server -D</span><br></pre></td></tr></table></figure>

<p>创建build目录（存放所有配置文件）</p>
<table>
<thead>
<tr>
<th>webpack.config.js</th>
<th>是所有文件的入口</th>
</tr>
</thead>
<tbody><tr>
<td>webpack.bash.config.js</td>
<td>公共环境的配置</td>
</tr>
<tr>
<td>webpack.dev.config.js</td>
<td>开发环境的配置</td>
</tr>
<tr>
<td>webpack.pro.config.js</td>
<td>生产环境的配置</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//base.config.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;app.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [ <span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span> ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.tsx?$/i</span>,</span><br><span class="line">                <span class="attr">use</span>: [&#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;ts-loader&#x27;</span></span><br><span class="line">                &#125;],</span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./src/tpl/index.html&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> &#123;merge&#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.base.config&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> devConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.dev.config&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> proConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.pro.config&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">env,argv</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> config = argv.<span class="property">mode</span> === <span class="string">&#x27;development&#x27;</span> ? devConfig : proConfig;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>(baseConfig,config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dev.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&#x27;source-map&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//pro.config.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>安装ts-loader(在ts_demo目录下安装)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i ts-loader typescript -D</span><br></pre></td></tr></table></figure>

<p>安装模板生成文件(在ts_demo目录下安装)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure>

<p>安装清除和合并依赖(在ts_demo目录下安装)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i clean-webpack-plugin -D</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i webpack-merge -D</span><br></pre></td></tr></table></figure>

<p>在src下新建tpl文件夹，在tpl里新建index.html</p>
<hr>
<p>配置ts_demo下的package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ts_demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src/index.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server --mode=development --config ./build/webpack.config.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --mode=production --config ./build/webpack.config.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;clean-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;html-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.5.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ts-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^9.4.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.9.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.75.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-dev-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.11.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-merge&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.8.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最终</p>
<p>使用：<code>npm run start</code>来启动</p>
<p>使用：<code>npm run build</code>来打包</p>
<h3 id="目录结构如下"><a href="#目录结构如下" class="headerlink" title="目录结构如下"></a>目录结构如下</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ts_demo</span><br><span class="line">├─ build</span><br><span class="line">│  ├─ webpack.base.config.js</span><br><span class="line">│  ├─ webpack.config.js</span><br><span class="line">│  ├─ webpack.dev.config.js</span><br><span class="line">│  └─ webpack.pro.config.js</span><br><span class="line">├─ dist</span><br><span class="line">│  ├─ app.js</span><br><span class="line">│  └─ index.html</span><br><span class="line">├─ package.json</span><br><span class="line">├─ src</span><br><span class="line">│  ├─ index.ts</span><br><span class="line">│  ├─ package.json</span><br><span class="line">│  └─ tpl</span><br><span class="line">│     └─ index.html</span><br><span class="line">├─ test.txt</span><br><span class="line">└─ tsconfig.json</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>typescript</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo发文</title>
    <url>/2022/08/29/hexo%E5%8F%91%E6%96%87/</url>
    <content><![CDATA[<p>1、 新建一篇文章</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在hexo博客目录下，进入Git Bash命令窗口中，输入以下命令：</span><br><span class="line">hexo new &quot;在这里&quot;</span><br><span class="line">在博客目录下的/source/_posts/ 文件夹下，可以看到已经生成了标题为(在这里.md)的博客文件</span><br></pre></td></tr></table></figure>
<p>2、给文章添加分类和标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在（在这里.md）文件中设置tags和categories属性:</span><br><span class="line">title: 在这里</span><br><span class="line">date: 2018-08-02 11:41:10</span><br><span class="line">tags:</span><br><span class="line">- 博客           //多个标签可以这样添加</span><br><span class="line">- hexo</span><br><span class="line">categories: web前端</span><br></pre></td></tr></table></figure>
<p>3、发布到Github上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<h3 id="上传时报错"><a href="#上传时报错" class="headerlink" title="上传时报错"></a>上传时报错</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (C:\blog\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:315:20)</span><br><span class="line">      at ChildProcess.cp.emit (C:\blog\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解决：在命令行输入以下内容后，重新上传</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo发表文章</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs开启服务器</title>
    <url>/2022/08/29/nodejs%E5%BC%80%E5%90%AF%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h3 id="1-新建文件夹demo"><a href="#1-新建文件夹demo" class="headerlink" title="1.新建文件夹demo"></a>1.新建文件夹demo</h3><p>在该目录下执行以下命令:<br>npm init<br>npm i express<br>创建server.js（服务器主文件）</p>
<h3 id="2-向sever-js文件写入内容"><a href="#2-向sever-js文件写入内容" class="headerlink" title="2.向sever.js文件写入内容"></a>2.向sever.js文件写入内容</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/person&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">5005</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在demo目录下执行：node server</span></span><br><span class="line"><span class="comment">//在浏览器访问即可</span></span><br></pre></td></tr></table></figure>
<h3 id="3-作为vue项目的后台"><a href="#3-作为vue项目的后台" class="headerlink" title="3.作为vue项目的后台"></a>3.作为vue项目的后台</h3><p>在demo文件夹下创建static文件夹<br>把打包好的vue项目（css、js、index.html等）放到static文件夹下<br>向sever.js文件写入内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="property">static__dirname</span>+<span class="string">&#x27;/static&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.get(&#x27;/person&#x27;,(req,res)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     res.send(&#123;</span></span><br><span class="line"><span class="comment">//         name:&#x27;tom&#x27;,</span></span><br><span class="line"><span class="comment">//         age:18</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">5005</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在demo目录下执行：node server</span></span><br><span class="line"><span class="comment">//在浏览器访问即可:localhost/index</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nodejs服务器</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>你所不知道的this</title>
    <url>/2022/10/29/%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84this/</url>
    <content><![CDATA[<h1 id="你所不知道的this"><a href="#你所不知道的this" class="headerlink" title="你所不知道的this"></a>你所不知道的this</h1><p>this指向从以下四种情况分析</p>
<ol>
<li><p>默认绑定：this指向window，是基础绑定</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局作用域下</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>()<span class="comment">//此时的this指向window</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(test,<span class="number">1000</span>)</span><br><span class="line"><span class="comment">//伪代码如下</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setTimeout</span>(<span class="params">fn,<span class="number">1000</span></span>)&#123;</span><br><span class="line">    <span class="title function_">fn</span>()	<span class="comment">//此时的fn就是test，this指向也为this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>引用绑定：当函数被对象的某个属性引用时，this指向该对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局作用域下</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">walk</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhangs&#x27;</span>,</span><br><span class="line">    <span class="attr">move</span>:walk</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">move</span>()	<span class="comment">//this指向person</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>显式绑定：当函数后面有call，apply，bind时，this指向他们所指定的上下文对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局作用域下</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">walk</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhangs&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">walk.<span class="title function_">call</span>(person)	<span class="comment">//this指向person</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//bind为硬绑定,支持参数柯里化（例：test函数预设了两个参数a、b,可以在bind绑定时，传一个值进去，该值就是a的值）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">walk</span>(<span class="params">name,job</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> str = name+<span class="string">&#x27; is working on &#x27;</span>+job+<span class="string">&#x27; and salary is &#x27;</span>+<span class="variable language_">this</span>.<span class="property">salary</span>+<span class="string">&#x27; monthly!&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str)    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhangs&#x27;</span>,</span><br><span class="line">    <span class="attr">job</span>:<span class="string">&#x27;front end&#x27;</span>,</span><br><span class="line">    <span class="attr">salary</span>:<span class="string">&#x27;30k&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newWalk = walk.<span class="title function_">bind</span>(p,p.<span class="property">name</span>)</span><br><span class="line"><span class="title function_">newWalk</span>(p.<span class="property">job</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>new绑定</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> bak = <span class="keyword">new</span> <span class="title function_">foo</span>(<span class="number">2</span>);	<span class="comment">//使用new来调用foo()时，会构造一个新对象并把它绑定到foo()调用中的this上</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bak.<span class="property">a</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>脱离脚手架使用vue+elementUI</title>
    <url>/2022/12/17/vue-eleUI/</url>
    <content><![CDATA[<p>替换主题色</p>
<p>使用element官方提供的<a href="%5Belementui.github.io%5D(https://elementui.github.io/theme-chalk-preview)">在线主题生成工具</a>，将下载的压缩包解压缩并在页面中引入index.css</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--将解压缩得到的全部样式放到eleui目录下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/eleui/index.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用表单验证并阻止默认提交"><a href="#使用表单验证并阻止默认提交" class="headerlink" title="使用表单验证并阻止默认提交"></a>使用表单验证并阻止默认提交</h3><p>场景如下：</p>
<p>我想让登录表单的账号和密码进行验证操作，验证通过再进行表单提交。</p>
<p><strong>因为el-form为一个封装好的组件，在el-form中使用@submit只能监听封装好的组件事件，要想在组件中监听表单提交原生事件需要加上.native才行(如：@submit.native)</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>论坛后台-登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost/print01.php&quot;</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">submit.native</span>=<span class="string">&quot;checkForm(&#x27;form&#x27;,$event)&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;账号:&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.account&quot;</span> <span class="attr">name</span>=<span class="string">&quot;account&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;密码:&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;passwd&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.passwd&quot;</span> <span class="attr">name</span>=<span class="string">&quot;passwd&quot;</span> <span class="attr">show-password</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">native-type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>立即登录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">form</span>: &#123;</span><br><span class="line">                    <span class="attr">account</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="attr">passwd</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">rules</span>: &#123;</span><br><span class="line">                    <span class="attr">account</span>: [</span><br><span class="line">                        &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;账号不能为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span><br><span class="line">                        &#123; <span class="attr">min</span>: <span class="number">3</span>, <span class="attr">max</span>: <span class="number">13</span>, <span class="attr">message</span>: <span class="string">&#x27;长度在3到13个字符&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">                    ],</span><br><span class="line">                    <span class="attr">passwd</span>: [</span><br><span class="line">                        &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;密码不能为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">methods</span>: &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="title function_">checkForm</span>(<span class="params">formName, e</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$refs</span>[formName].<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">                        <span class="title function_">alert</span>(<span class="string">&#x27;submit!&#x27;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;prevent submit!!&#x27;</span>);</span><br><span class="line">                        e.<span class="title function_">preventDefault</span>()</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="显示上传的图片-使用base64"><a href="#显示上传的图片-使用base64" class="headerlink" title="显示上传的图片(使用base64)"></a>显示上传的图片(使用base64)</h3><p>场景如下：</p>
<p>在上传图片的时候，可以看到上传的图片。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;file&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;showImg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-image</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px; height: 100px&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;imgUrl&quot;</span> <span class="attr">fit</span>=<span class="string">&quot;fit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;error&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-slot&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-picture-outline&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-image</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">imgUrl</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">showImg</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//这里之所以使用ref去获取图片，是因为我使用event不能获取到files</span></span><br><span class="line">                <span class="keyword">let</span> fileData = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">file</span>.<span class="property">files</span>[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">let</span> type = fileData.<span class="property">type</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">isImg</span>(type))&#123;</span><br><span class="line">                    <span class="keyword">let</span> flag = <span class="variable language_">this</span>.<span class="title function_">calcImgSize</span>(fileData.<span class="property">size</span>);</span><br><span class="line">                    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="title function_">base64</span>(fileData)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="title function_">alert</span>(<span class="string">&#x27;图片大小不能超过2M&#x27;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//判断是否为图片</span></span><br><span class="line">            <span class="title function_">isImg</span>(<span class="params">type</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> pattern = <span class="regexp">/^image/</span>;</span><br><span class="line">                <span class="keyword">if</span>(!pattern.<span class="title function_">test</span>(type))&#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&#x27;图片格式不对&#x27;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//计算图片大小，不能超过2M</span></span><br><span class="line">            <span class="title function_">calcImgSize</span>(<span class="params">size</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> num = size/<span class="number">1024</span>/<span class="number">1024</span>;</span><br><span class="line">                <span class="comment">// console.log(num)</span></span><br><span class="line">                <span class="keyword">if</span>(num&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//将图片转码</span></span><br><span class="line">            <span class="title function_">base64</span>(<span class="params">fileData</span>)&#123;</span><br><span class="line">                <span class="keyword">const</span> that = <span class="variable language_">this</span></span><br><span class="line">                <span class="keyword">let</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">                reader.<span class="title function_">readAsDataURL</span>(fileData);</span><br><span class="line">                reader.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">                <span class="comment">// console.log(e);</span></span><br><span class="line">                <span class="comment">// console.log(this.result);</span></span><br><span class="line">                that.<span class="property">imgUrl</span> = <span class="variable language_">this</span>.<span class="property">result</span></span><br><span class="line">                <span class="comment">// image.setAttribute(&quot;src&quot;,this.result)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义表单验证规则"><a href="#自定义表单验证规则" class="headerlink" title="自定义表单验证规则"></a>自定义表单验证规则</h3><p>场景如下：</p>
<p>在修改密码时，需要输入旧密码，新密码，再次确认新密码，新旧密码不能一样，验证通过才提交</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">status-icon</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">class</span>=<span class="string">&quot;demo-ruleForm&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost/print01.php&quot;</span></span></span><br><span class="line"><span class="tag">                        @<span class="attr">submit.native</span>=<span class="string">&quot;checkForm(&#x27;ruleForm&#x27;,$event)&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;旧密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;oldPass&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.oldPass&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">show-password</span> <span class="attr">name</span>=<span class="string">&quot;oldPass&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;新密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;pass&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.pass&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">show-password</span> <span class="attr">name</span>=<span class="string">&quot;newPass&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;确认新密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;checkPass&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.checkPass&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">name</span>=<span class="string">&quot;checkPass&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                            </span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">native-type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>确认修改<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;resetForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="comment">//自定义校验规则</span></span><br><span class="line">             <span class="keyword">var</span> <span class="title function_">validateOldPass</span> = (<span class="params">rule,value,callback</span>) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(value === <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">                    <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;旧密码不能为空!&#x27;</span>))</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="title function_">callback</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> <span class="title function_">validatePass</span> = (<span class="params">rule, value, callback</span>) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (value === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                    <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请输入新密码&#x27;</span>));</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(value === <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">oldPass</span>)&#123;</span><br><span class="line">                    <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;新旧密码不能一样!&#x27;</span>))</span><br><span class="line">                &#125;</span><br><span class="line">                 <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">checkPass</span> !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">ruleForm</span>.<span class="title function_">validateField</span>(<span class="string">&#x27;checkPass&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="title function_">callback</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">var</span> <span class="title function_">validatePass2</span> = (<span class="params">rule, value, callback</span>) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (value === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                    <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请再次输入新密码&#x27;</span>));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value !== <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">pass</span>) &#123;</span><br><span class="line">                    <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;两次输入密码不一致!&#x27;</span>));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">callback</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">                <span class="keyword">return</span> &#123; </span><br><span class="line">                    <span class="attr">ruleForm</span>: &#123;</span><br><span class="line">                        <span class="attr">oldPass</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                        <span class="attr">pass</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                        <span class="attr">checkPass</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">rules</span>: &#123;</span><br><span class="line">                        <span class="attr">oldPass</span>: [</span><br><span class="line">                            &#123; <span class="attr">validator</span>: validateOldPass, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        <span class="attr">pass</span>: [</span><br><span class="line">                            &#123; <span class="attr">validator</span>: validatePass, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        <span class="attr">checkPass</span>: [</span><br><span class="line">                            &#123; <span class="attr">validator</span>: validatePass2, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">                        ],</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">checkForm</span>(<span class="params">formName,e</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$refs</span>[formName].<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&#x27;submit!&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error submit!!&#x27;</span>);</span><br><span class="line">                    e.<span class="title function_">preventDefault</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">            <span class="title function_">resetForm</span>(<span class="params">formName</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$refs</span>[formName].<span class="title function_">resetFields</span>();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>elementui</tag>
      </tags>
  </entry>
  <entry>
    <title>pinia</title>
    <url>/2022/10/08/pinia/</url>
    <content><![CDATA[<h1 id="在vue3-ts的环境下使用pinia"><a href="#在vue3-ts的环境下使用pinia" class="headerlink" title="在vue3+ts的环境下使用pinia"></a>在vue3+ts的环境下使用pinia</h1><ol>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save pinia</span><br></pre></td></tr></table></figure>
</li>
<li><p>在mian.ts中</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createPinia&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在src下创建index.ts 和 types.ts(<strong style="color:orange">types.ts是我们用来约束对应模块的状态</strong>)</p>
</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; indexType &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span><br><span class="line"><span class="comment">//main是storeId,保证唯一</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useIndexStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;index&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">state</span>:():<span class="function"><span class="params">indexType</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">count</span>:<span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="title function_">doubleCount</span>():<span class="built_in">number</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span>*<span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">updateCount</span>(<span class="params">val:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">count</span> = val</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//types.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> indexType = &#123;</span><br><span class="line">    <span class="attr">count</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>组件内调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Count组件&lt;/h2&gt;</span><br><span class="line">        &lt;h4&gt;count:&#123;&#123;count&#125;&#125;&lt;/h4&gt;</span><br><span class="line">        &lt;h4&gt;doubleCount:&#123;&#123;doubleCount&#125;&#125;&lt;/h4&gt;</span><br><span class="line">        &lt;button @click=&quot;countChange&quot;&gt;更新pinia-&gt;count&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineComponent,computed &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123;useIndexStore&#125; from &#x27;../stores&#x27;</span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">    name:&#x27;Count&#x27;,</span><br><span class="line">    setup () &#123;</span><br><span class="line">        const indexStore = useIndexStore()</span><br><span class="line">        let doubleCount = computed(()=&gt;indexStore.doubleCount)</span><br><span class="line"></span><br><span class="line">        let count = computed(&#123;</span><br><span class="line">            get():number&#123;</span><br><span class="line">                return  indexStore.count</span><br><span class="line">            &#125;,</span><br><span class="line">            set(val:number):void&#123;</span><br><span class="line">                indexStore.updateCount(val)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        const countChange = ():void=&gt;&#123;</span><br><span class="line">            console.log(Math.random())</span><br><span class="line">            count.value = Math.floor(Math.random()*10)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return &#123;</span><br><span class="line">            count,</span><br><span class="line">            doubleCount,</span><br><span class="line">            countChange</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将store的数据变成响应式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入响应式</span></span><br><span class="line"><span class="keyword">import</span> &#123;storeToRefs&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">const</span> indexStore = <span class="title function_">useIndexStore</span>()</span><br><span class="line"><span class="keyword">const</span> &#123;count&#125; = <span class="title function_">storeToRefs</span>(indexStore)</span><br></pre></td></tr></table></figure>
</li>
<li><p>将数据重置为store最初的状态</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">indexStore.$reset()</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改多个数据</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">indexStore.$pacth()</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="详细的pinia教程"><a href="#详细的pinia教程" class="headerlink" title="详细的pinia教程"></a>详细的pinia教程</h3><p><a href="https://zhuanlan.zhihu.com/p/533233367">https://zhuanlan.zhihu.com/p/533233367</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>生成器和异步</title>
    <url>/2022/10/29/%E7%94%9F%E6%88%90%E5%99%A8%E5%92%8C%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<p>将异步代码变成同步（阻塞），例：你想向后台发送请求，只有当数据返回时才打印</p>
<ol>
<li>发送ajax请求的方法</li>
<li>需要一个方法，发送请求后判断数据是否成功返回，继续往下执行</li>
<li>需要一个方法，等待数据返回，执行打印操作</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="string">&#x27;https://sunweipeng123.github.io/posts.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ajax方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myAjax</span>(<span class="params">url, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>))</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">callback</span>(<span class="string">&#x27;请求失败&#x27;</span>, <span class="literal">null</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="title function_">myAjax</span>(url, <span class="keyword">function</span> (<span class="params">err, text</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            it.<span class="keyword">throw</span>(err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            it.<span class="title function_">next</span>(text)	<span class="comment">//成功拿到数据后，启动生成器继续往下执行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> *<span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> text = <span class="keyword">yield</span> <span class="title function_">foo</span>(path)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(text)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> it = <span class="title function_">main</span>();</span><br><span class="line">it.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure>

<h3 id="生成器-promise"><a href="#生成器-promise" class="headerlink" title="生成器+promise"></a>生成器+promise</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="string">&#x27;https://sunweipeng123.github.io/posts.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ajax方法</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">myAjax</span>(<span class="params">url, callback</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                        <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>))</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">callback</span>(<span class="string">&#x27;请求失败&#x27;</span>, <span class="literal">null</span>)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">            xhr.<span class="title function_">send</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">url</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">                <span class="title function_">myAjax</span>(url, <span class="keyword">function</span> (<span class="params">err, text</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(err)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(text)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span>* <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> text = <span class="keyword">yield</span> <span class="title function_">foo</span>(path)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(text)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">warn</span>(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> it = <span class="title function_">main</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//等待promise决议</span></span><br><span class="line">        <span class="keyword">let</span> p = it.<span class="title function_">next</span>().<span class="property">value</span></span><br><span class="line">        p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">text</span>)&#123;</span><br><span class="line">            it.<span class="title function_">next</span>(text)</span><br><span class="line">        &#125;,<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">            it.<span class="keyword">throw</span>(err)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>对一道循环计数题进行解剖</title>
    <url>/2022/11/25/%E5%AF%B9%E4%B8%80%E9%81%93%E5%BE%AA%E7%8E%AF%E8%AE%A1%E6%95%B0%E9%A2%98%E8%BF%9B%E8%A1%8C%E8%A7%A3%E5%89%96/</url>
    <content><![CDATA[<p>题如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//想要效果：在for循环内，使用setTimeout延迟两秒后，依次打印i的值：0，1，2，3，4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码最终的执行结果：延迟2秒后，在控制台中打印了五个5，这并不是我们预期想要的结果</p>
<h3 id="这是为什么呢？进行分析："><a href="#这是为什么呢？进行分析：" class="headerlink" title="这是为什么呢？进行分析："></a>这是为什么呢？进行分析：</h3><ol>
<li><p>这里的var声明不具备块级作用域，变量i被声明为全局变量</p>
</li>
<li><p>这段代码包含了同步代码和异步代码，为什么会产生异步，异步又如何执行</p>
<p><strong style="color:green">首先JS是在单线程的环境下工作的，为了避免某一段JavaScript代码长时间运行，阻塞后面代码执行，导致其他任务无法执行（例如：浏览器无响应、假死），JavaScript将任务的执行模式分成两种：同步和异步</strong></p>
<ul>
<li><blockquote>
<p>同步模式：在主线程（执行栈）排队等待的任务，只能等待前一个完成才会执行完毕后才会执行下一个任务</p>
</blockquote>
</li>
<li><blockquote>
<p>异步模式：不进入主线程而进入”消息队列“的任务（异步任务），会在”消息队列”中排队等待，当主线程中的任务运行完了，才会从”消息队列“取出异步任务放到主线程执行，执行完主线程，又再从”消息队列“取出任务执行，如此反复（这就是常说的eventloop）</p>
</blockquote>
</li>
</ul>
<h5 id="那又怎样才算异步任务，如何区分呢？"><a href="#那又怎样才算异步任务，如何区分呢？" class="headerlink" title="那又怎样才算异步任务，如何区分呢？"></a>那又怎样才算异步任务，如何区分呢？</h5></li>
</ol>
<p>常见的异步任务有：Ajax请求、setTimeout、Promise.then等 （异步任务又细分为宏任务和微任务，这里就不细说了）</p>
<h3 id="那题中的代码执行顺序就可以这样解释："><a href="#那题中的代码执行顺序就可以这样解释：" class="headerlink" title="那题中的代码执行顺序就可以这样解释："></a>那题中的代码执行顺序就可以这样解释：</h3><p>开始进入for循环</p>
<p>在执行for内部时，setTimeout会被认为是异步任务，不会立即执行，而是推到消息队列排队等待，等待主线程的代码（同步代码）执行完后，再从消息队列出列，放到主线程去执行</p>
<p>主线程的代码：执行for循环这一块，当变量i不满足条件跳出循环时，也就是同步代码执行完毕的时候，此时的变量i的值为5</p>
<p>主线程代码执行完后开始执行异步的代码：setTimeout内的箭头函数</p>
<p>在执行箭头函数时，由于它内部并没有声明i变量，就会沿作用域链找，最终在全局作用域下，找到了变量i（i的值已经变为5了），每一次打印变量i时，都是在打印全局作用域下的i，也就是说它们共享同一个i，所以就打印了五个5</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h5 id="一：使用闭包"><a href="#一：使用闭包" class="headerlink" title="一：使用闭包"></a>一：使用闭包</h5><blockquote>
<p>闭包：由函数及声明该函数的词法环境组成，该环境包含了闭包函数创建时作用域内所有的局部变量，闭包维持了对它的词法环境的引用，简而言之，闭包能让我们从内部函数访问到外部函数的作用域</p>
</blockquote>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeFunc</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;zhangs&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">displayName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> displayName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myFunc = <span class="title function_">makeFunc</span>()</span><br><span class="line"><span class="title function_">myFunc</span>()</span><br><span class="line"><span class="comment">//执行结果：控制台打印了“zhangs”</span></span><br></pre></td></tr></table></figure>

<p>makeFunc函数内有一个局部变量name和声明了一个displayName函数，并且makeFunc函数执行时，会返回displayName函数</p>
<p>myFunc就是在makeFunc执行后，接收了它的返回值，一个对displayName函数实例的引用</p>
<p>myFunc方法执行就是在执行displayName方法，那为什么console.log(name)，会输出zhangs呢？</p>
<p>进行分析：<br>按道理来说，makeFunc函数执行完后，它的局部变量name会被销毁才对，然而代码却按照预期执行。<br>原因就在于JavaScript中的函数会形成闭包，displayName就是一个闭包函数，displayName维持了对它的词法环境（变量name就存在其中）的引用，就算makeFunc执行完毕，它的局部变量name也不会被销毁，因为name被displayName引用了。</p>
<p>回到开头的循环计数题，我们就可以用闭包实现我们想要的效果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    </span><br><span class="line">    (<span class="keyword">function</span>(<span class="params">j</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(j)</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">    &#125;)(i)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="二：利用块级作用域（let）"><a href="#二：利用块级作用域（let）" class="headerlink" title="二：利用块级作用域（let）"></a>二：利用块级作用域（let）</h5><p>ES6新增的let具有块级作用域，也可以用它进行循环计数</p>
<blockquote>
<p>值得注意的是：const也具有块级作用域，但它不能用来计数（原因：const i &#x3D; 0，i的值不允许再改变，i相当于常量）</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;	<span class="comment">//此时用let声明的i不会成为全局变量，在外部无法访问到i</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="总结：一道循环计算题涉及了以下知识："><a href="#总结：一道循环计算题涉及了以下知识：" class="headerlink" title="总结：一道循环计算题涉及了以下知识："></a>总结：一道循环计算题涉及了以下知识：</h3><ol>
<li>var、let和const的区别</li>
<li>同步模式、异步模式及异步代码如何执行</li>
<li>闭包</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器实现array和对象遍历</title>
    <url>/2022/10/29/%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h3 id="迭代数组"><a href="#迭代数组" class="headerlink" title="迭代数组"></a>迭代数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代数组</span></span><br><span class="line">        <span class="keyword">var</span> something = (<span class="keyword">function</span>(<span class="params">array</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> arr = array		<span class="comment">//数组</span></span><br><span class="line">            <span class="keyword">var</span> nextVal;	<span class="comment">//遍历的下个值</span></span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;		<span class="comment">//用作数组索引</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">                <span class="attr">next</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> done = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">if</span>(i &lt; arr.<span class="property">length</span>)&#123;</span><br><span class="line">                        nextVal = array[i];</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        done = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                        </span><br><span class="line">                    </span><br><span class="line">                    i++</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>:done, <span class="attr">value</span>:nextVal&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)([<span class="number">10</span>,<span class="number">50</span>,<span class="number">99</span>,-<span class="number">1</span>])	<span class="comment">//传入数组</span></span><br><span class="line">		<span class="comment">//进行迭代</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">of</span> something)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(j)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="迭代对象"><a href="#迭代对象" class="headerlink" title="迭代对象"></a>迭代对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代对象</span></span><br><span class="line">        <span class="keyword">var</span> person = &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;zhangs&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">            <span class="attr">sex</span>:<span class="string">&#x27;male&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> another = (<span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> obj = obj;	<span class="comment">//对象</span></span><br><span class="line">            <span class="keyword">var</span> nextVal;	<span class="comment">//遍历的下一个值</span></span><br><span class="line">            <span class="keyword">var</span> propertyList = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);	<span class="comment">//获取所有键，并以数组形式返回</span></span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;	<span class="comment">//数组见的索引</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> <span class="variable language_">this</span>&#125;,</span><br><span class="line">                <span class="attr">next</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> done = <span class="literal">false</span></span><br><span class="line">                    <span class="keyword">if</span>(i &lt; propertyList.<span class="property">length</span>)&#123;</span><br><span class="line">                        <span class="comment">//每对键值都是一个对象</span></span><br><span class="line">                        nextVal = &#123;&#125;</span><br><span class="line">                        <span class="keyword">var</span> proName = propertyList[i]</span><br><span class="line">                        nextVal[proName] = obj[propertyList[i]]</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        done = <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    i++</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>:done,<span class="attr">value</span>:nextVal&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)(person)	<span class="comment">//传入对象</span></span><br><span class="line">   		<span class="comment">//进行迭代</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">of</span> another)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(j)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">of</span> another)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(j)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>对象关联和行为委托</title>
    <url>/2022/10/29/%E5%AF%B9%E8%B1%A1%E5%85%B3%E8%81%94%E5%92%8C%E8%A1%8C%E4%B8%BA%E5%A7%94%E6%89%98/</url>
    <content><![CDATA[<h1 id="对象关联和行为委托"><a href="#对象关联和行为委托" class="headerlink" title="对象关联和行为委托"></a>对象关联和行为委托</h1><h4 id="创建关联"><a href="#创建关联" class="headerlink" title="创建关联"></a>创建关联</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123;</span><br><span class="line">    <span class="attr">something</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Tell me something good...&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="title class_">Object</span>.<span class="title function_">create</span>(foo);	<span class="comment">//Object.create(..)会创建一个新对象（bar）并把它关联到我们指定的对象（foo）</span></span><br><span class="line">bar.<span class="title function_">something</span>()		<span class="comment">//当something不存在bar，会把ta委托给foo</span></span><br></pre></td></tr></table></figure>

<h4 id="利用prototype进行委托"><a href="#利用prototype进行委托" class="headerlink" title="利用prototype进行委托"></a>利用prototype进行委托</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用[[Prototype]]把b1委托给Bar并把Bar委托给Foo，实现了三个对象之间的关联。</span></span><br><span class="line"><span class="title class_">Foo</span> = &#123;</span><br><span class="line">            <span class="attr">init</span>:<span class="keyword">function</span>(<span class="params">who</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">me</span> = who;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">identify</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;I am &quot;</span> + <span class="variable language_">this</span>.<span class="property">me</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Bar</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Foo</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Bar</span>.<span class="property">speak</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;Hello,&quot;</span>+ <span class="variable language_">this</span>.<span class="title function_">identify</span>()+<span class="string">&quot;.&quot;</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> b1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Bar</span>);</span><br><span class="line">        b1.<span class="title function_">init</span>(<span class="string">&quot;b1&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> b2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Bar</span>);</span><br><span class="line">        b2.<span class="title function_">init</span>(<span class="string">&quot;b2&quot;</span>)</span><br><span class="line"></span><br><span class="line">        b1.<span class="title function_">speak</span>();</span><br><span class="line">        b2.<span class="title function_">speak</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>生成器generator</title>
    <url>/2022/10/29/%E7%94%9F%E6%88%90%E5%99%A8generator/</url>
    <content><![CDATA[<h3 id="生成器执行例子"><a href="#生成器执行例子" class="headerlink" title="生成器执行例子"></a>生成器执行例子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造生成器函数</span></span><br><span class="line">		<span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> ＊<span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">            a++;</span><br><span class="line">            <span class="keyword">yield</span>;</span><br><span class="line">            b = b ＊ a;</span><br><span class="line">            a = (<span class="keyword">yield</span> b) + <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> ＊<span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">            b--;</span><br><span class="line">            <span class="keyword">yield</span>;</span><br><span class="line">            a = (<span class="keyword">yield</span> <span class="number">8</span>) + b;</span><br><span class="line">            b = a ＊ (<span class="keyword">yield</span> <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构建辅助函数，用于控制迭代器</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">step</span>(<span class="params">gen</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> it = <span class="title function_">gen</span>();		<span class="comment">//相当于初始化，函数还没有执行</span></span><br><span class="line">            <span class="keyword">var</span> last;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">              <span class="comment">// 不管yield出来的是什么，下一次都把它原样传回去！</span></span><br><span class="line">              last = it.<span class="title function_">next</span>( last ).<span class="property">value</span>;	<span class="comment">//启动函数</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//交替执行</span></span><br><span class="line">        <span class="keyword">var</span> s1 = <span class="title function_">step</span>( foo );</span><br><span class="line">        <span class="keyword">var</span> s2 = <span class="title function_">step</span>( bar );</span><br><span class="line"></span><br><span class="line">        <span class="title function_">s2</span>();       <span class="comment">// b--;</span></span><br><span class="line">        <span class="title function_">s2</span>();       <span class="comment">// yield 8</span></span><br><span class="line">        <span class="title function_">s1</span>();       <span class="comment">// a++;</span></span><br><span class="line">        <span class="title function_">s2</span>();       <span class="comment">// a = 8 + b;</span></span><br><span class="line">                  <span class="comment">// yield 2</span></span><br><span class="line">        <span class="title function_">s1</span>();       <span class="comment">// b = b ＊ a;</span></span><br><span class="line">                  <span class="comment">// yield b</span></span><br><span class="line">        <span class="title function_">s1</span>();       <span class="comment">// a = b + 3;</span></span><br><span class="line">        <span class="title function_">s2</span>();       <span class="comment">// b = a ＊ 2;</span></span><br></pre></td></tr></table></figure>

<p>以上代码执行推导</p>
<p>**var s1 &#x3D; step( foo )**：s1为一个函数，it为生成器函数foo()</p>
<p>**var s2 &#x3D; step( bar )**：s2为一个函数，it为生成器函数bar()</p>
<p>第一次**s2()**：bar函数启动，执行b–，b的值为1后停止执行，此时的yield返回undefined，last为undefined</p>
<p>第二次**s2()**：bar函数继续往下执行，遇到yield 8 停止 ，yield返回8 ，last为8</p>
<p>第一次**s1()**：foo函数启动，a的值为2后停止执行，此时的yield返回undefined，last为undefined</p>
<p>第三次执行**s2()**：(yield 8)被传进来last替代，a为9，b &#x3D; 9 * （yield 2）后停止执行，此时yield返回2，last为2</p>
<p>第二次**s1()**：b &#x3D; 9，a&#x3D;(yield b)后停止执行，此时yield将b返回，所以last为9</p>
<p>第三次**s1()**：(yield b)被传进来的last替代，所以a &#x3D; 12</p>
<p>第四次**s2()*<em>：(yield 2)被传进来的last替代，所以b&#x3D;9</em>2，b&#x3D;18</p>
<h3 id="迭代器接口"><a href="#迭代器接口" class="headerlink" title="迭代器接口"></a>迭代器接口</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> something = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> nextVal;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">//for...of循环需要</span></span><br><span class="line">        [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> <span class="variable language_">this</span>&#125;,</span><br><span class="line">        <span class="comment">//标准迭代器接口方法</span></span><br><span class="line">        <span class="attr">next</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nextVal===<span class="literal">undefined</span>)&#123;</span><br><span class="line">                nextVal=<span class="number">1</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                nextVal = (<span class="number">3</span> * nextVal)+<span class="number">6</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">false</span>,<span class="attr">value</span>:nextVal&#125;	<span class="comment">//done表示迭代状态，value为迭代值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行迭代</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> v <span class="keyword">of</span> something) &#123;	<span class="comment">//for..of循环期望something是iterable，于是它寻找并调用它的									  //Symbol.iterator函数。</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>( v );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不要死循环！</span></span><br><span class="line">            <span class="keyword">if</span> (v &gt; <span class="number">500</span>) &#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1 9 33105 321969</span></span><br></pre></td></tr></table></figure>

<h3 id="通过生成器实现上面的例子"><a href="#通过生成器实现上面的例子" class="headerlink" title="通过生成器实现上面的例子"></a>通过生成器实现上面的例子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">        <span class="keyword">function</span> ＊<span class="title function_">something</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> nextVal;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (nextVal === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                  nextVal = <span class="number">1</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span> &#123;</span><br><span class="line">                  nextVal = (<span class="number">3</span> ＊ nextVal) + <span class="number">6</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">yield</span> nextVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for...of循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> v <span class="keyword">of</span> <span class="title function_">something</span>()) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>( v );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不要死循环！</span></span><br><span class="line">            <span class="keyword">if</span> (v &gt; <span class="number">500</span>) &#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>问题：在实现迭代器接口时，for…of是这样使用：<strong>for (var v of something)<strong>，用生成器实现时却是这样：</strong>for (var v of something())</strong></p>
<h3 id="生成器实现数组遍历"><a href="#生成器实现数组遍历" class="headerlink" title="生成器实现数组遍历"></a>生成器实现数组遍历</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">10</span>,<span class="number">99</span>,<span class="number">50</span>,-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> *<span class="title function_">arrGen</span>(<span class="params">array</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> arr = array;</span><br><span class="line">            <span class="keyword">var</span> nextVal;</span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;arr.<span class="property">length</span>)&#123;</span><br><span class="line">                    nextVal = arr[i]</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;end&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">                i++</span><br><span class="line">                <span class="keyword">yield</span> nextVal;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">arrGen</span>(array))&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="生成器实现对象遍历"><a href="#生成器实现对象遍历" class="headerlink" title="生成器实现对象遍历"></a>生成器实现对象遍历</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象遍历</span></span><br><span class="line">        <span class="keyword">var</span> person = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;zhangs&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span>* <span class="title function_">objGen</span>(<span class="params">person</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> obj = person;</span><br><span class="line">            <span class="keyword">var</span> nextVal;</span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">var</span> propertyList = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; propertyList.<span class="property">length</span>) &#123;</span><br><span class="line">                    <span class="comment">//每对键值都是一个对象</span></span><br><span class="line">                    nextVal = &#123;&#125;</span><br><span class="line">                    <span class="keyword">var</span> proName = propertyList[i]</span><br><span class="line">                    nextVal[proName] = obj[propertyList[i]]</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;end&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">yield</span> nextVal</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">objGen</span>(person))&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>slot的使用</title>
    <url>/2022/12/04/vue-slot/</url>
    <content><![CDATA[<h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><p>假设子组件<code>&lt;son&gt;</code>组件的模版如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>w尾部<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>利用slot特性，我们可以在一个父组件<code>&lt;father&gt;</code>中向<code>&lt;son&gt;</code>提供内容，如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">son</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">            n内容区</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里也可以省略template和v-slot(vue会默认把h1放到默认插槽里面)--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--只要出现多个插槽，请始终为所有的插槽使用完整的基于 &lt;template&gt; 的语法：--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>假设子组件<code>&lt;son&gt;</code>组件的模版如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在父组件<code>&lt;father&gt;</code>可使用v-slot分别向插槽放置对应的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">son</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><blockquote>
<p>使用作用域插槽可让插槽内容能够访问子组件中才有的数据</p>
<p>能够用于父子通信</p>
</blockquote>
<h5 id="假设我想从父组件-lt-father-gt-访问子组件-lt-son-gt-的username属性，可以这样做"><a href="#假设我想从父组件-lt-father-gt-访问子组件-lt-son-gt-的username属性，可以这样做" class="headerlink" title="假设我想从父组件&lt;father&gt;访问子组件&lt;son&gt;的username属性，可以这样做"></a>假设我想从父组件<code>&lt;father&gt;</code>访问子组件<code>&lt;son&gt;</code>的username属性，可以这样做</h5><p>在子组件<code>&lt;son&gt;</code>内部的slot元素上动态绑定一个username属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">slot</span> <span class="attr">:user</span>=<span class="string">&quot;user&quot;</span>&gt;</span>		<span class="comment">&lt;!-- user为自己在data中定义的数据--&gt;</span></span><br><span class="line">        	&#123;&#123; user.username &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在父组件<code>&lt;father&gt;</code>中，可以通过v-slot来访问user数据：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">    	&#123;&#123; slotProps.user.username &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 按照我的理解，其中的slotProps就相当于是一个包含user对象的参数对象--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这样解构赋值的方式来传入具体的插槽prop，如下: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;&#123; user &#125;&quot;</span>&gt;</span></span><br><span class="line">    	&#123;&#123; user.username &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="如果插槽传递的数据为引用类型-如：对象-，父组件还可以对它进行修改，父元素也可以往插槽内的元素绑定事件-在父元素中触发-，代码如下："><a href="#如果插槽传递的数据为引用类型-如：对象-，父组件还可以对它进行修改，父元素也可以往插槽内的元素绑定事件-在父元素中触发-，代码如下：" class="headerlink" title="如果插槽传递的数据为引用类型(如：对象)，父组件还可以对它进行修改，父元素也可以往插槽内的元素绑定事件(在父元素中触发)，代码如下："></a>如果插槽传递的数据为引用类型(如：对象)，父组件还可以对它进行修改，父元素也可以往插槽内的元素绑定事件(在父元素中触发)，代码如下：</h5><p>子组件<code>&lt;son&gt;</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">        &lt;slot :user=&quot;userInfo&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            userInfo:&#123;username:&#x27;zhangs&#x27;,userage:18&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>父组件<code>&lt;father&gt;</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;son&gt;</span><br><span class="line">    	&lt;template v-slot:default=&quot;&#123; user &#125;&quot;&gt;</span><br><span class="line">                  </span><br><span class="line">            &lt;button @click=&quot;getDataFromSon(user)&quot;&gt;&lt;/button&gt;</span><br><span class="line">          </span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/son&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        getDataFromSon(obj)&#123;</span><br><span class="line">          //可以修改子组件的引用类型数据，但只限于该子组件，对其他组件没有影响</span><br><span class="line">          this.$set(obj,&#x27;username&#x27;,&#x27;lisi&#x27;)	//使用this.$set修改为响应式</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><p>在vue中，v-slot和v-on、v-bind类似，v-slot也有简写，用#代替v-slot。例如：v-slot:header简写成 # header</p>
<p><strong style="color:orange">值得注意：当你使用template和v-slot声明某个插槽后，就不能再重复声明了，以下情况就会报错</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;date&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;date&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="怎样使用slot"><a href="#怎样使用slot" class="headerlink" title="怎样使用slot"></a>怎样使用slot</h3><p>假设我要制作的一个回复框组件，作者的回复框和其他人的回复框有些内容或功能不一样（如下图：第一个个为作者回复框，第二个为其他人的回复框），像这种情况就可以使用插槽</p>
<p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-46815145-4025-4297-9365-6737b841ffe5/95f83e18-2a57-4b85-a5bb-bebcffffbf93.png" alt="tupian1"></p>
<p>子组件UseSlot代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topic-post&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;avatar-box&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://shadow.elemecdn.com/app/element/hamburger.9cf7b091-55e9-11e9-a976-7f4d0b07eef6.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topic-body&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;userInfo.username&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  </span><br><span class="line">                  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>	<span class="comment">&lt;!-- 默认插槽显示所有人共有的内容或功能 --&gt;</span></span><br><span class="line">                  </span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">p</span>&gt;</span>请教一下大家，有谁知道像vue官方文档，或者elementUI在线文档是怎么做出来的吗<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              </span><br><span class="line">              <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>	<span class="comment">&lt;!-- 具名插槽只显示作者的内容或功能 --&gt;</span></span><br><span class="line">              </span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>父组件App.vue代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 制作回复框组件，作者的回复框和别人的回复框不一样(使用slot) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">UseSlot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;date&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:author</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-menu&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">button</span> &gt;</span>回复<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;actions&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">button</span>&gt;</span>点赞<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">button</span>&gt;</span>分享<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">UseSlot</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">UseSlot</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>⬇<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">UseSlot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
