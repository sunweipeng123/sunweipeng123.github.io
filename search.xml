<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JSX实现todoList案例</title>
    <url>/2022/12/31/JSX%E5%AE%9E%E7%8E%B0todoList%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<p>在vue2中使用JSX实现todoList案例，通过这个案例，可以了解template的v-if、v-for、v-on、v-model、为组件添加样式、传递自定义事件及数据，在JSX中如何实现。</p>
<p>注意：JSX是在render函数写的，由于使用了render函数，template就不用写了，因为template和render同时存在，会以template为准。</p>
<h3 id="拆分组件"><a href="#拆分组件" class="headerlink" title="拆分组件"></a>拆分组件</h3><p>Header：添加todo</p>
<p>List：展示全部数据的区域</p>
<p>Item：展示每条todo信息、修改和删除操作</p>
<p>Footer：统计已完成的todo、清除已完成</p>
<p><strong>目录结构如下：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─ src</span><br><span class="line">│  ├─ App.vue</span><br><span class="line">│  ├─ components</span><br><span class="line">│  │  ├─ Footer.vue</span><br><span class="line">│  │  ├─ Header.vue</span><br><span class="line">│  │  ├─ Item.vue</span><br><span class="line">│  │  ├─ List.vue</span><br></pre></td></tr></table></figure>

<p>页面效果如下:</p>
<p><img src="/images/todoList_JSX.png" alt="todoList"></p>
<h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p>将数据放在App.vue下</p>
<p>因为header为增加数据，List也要获取数据，对数据进行删改查操作，Footer也要用数据进行统计、删除，App作为它们的父组件，父子通信比非父子通信更简单、快捷</p>
<h3 id="完成添加todo"><a href="#完成添加todo" class="headerlink" title="完成添加todo"></a>完成添加todo</h3><p>涉及两个组件App和Header</p>
<p>在Header组件中添加todo，将todo数据整理好，携带数据并通知App（父组件）添加数据，进行父子通信，用到<strong>自定义事件</strong>。</p>
<p>JSX:</p>
<ol>
<li><p>自定义事件在JSX中的写法是这样的：vOn:getToDo&#x3D;{this.getToDo}，vOn表示v-on，getToDo表示自定义事件名，在<code>&#123;&#125;</code>里写JS代码</p>
</li>
<li><p>v-model需要写成：vModel&#x3D;{this.task}，驼峰式写法</p>
</li>
<li><p>绑定的事件需要添加修饰符如keyup.enter，需要写成vOn:keyup_enter&#x3D;{this.submit}</p>
</li>
</ol>
<p>App.vue组件代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Header.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Header</span> <span class="attr">class</span>=<span class="string">&quot;distance&quot;</span> <span class="attr">vOn:getToDo</span>=<span class="string">&#123;this.getToDo&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">val</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">      <span class="comment">//数据保存在list中</span></span><br><span class="line">      <span class="attr">todoList</span>: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;<span class="comment">//只展示与Header有关的方法</span></span><br><span class="line">    <span class="comment">//添加todo</span></span><br><span class="line">    <span class="title function_">getToDo</span>(<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">todoList</span>.<span class="title function_">push</span>(data);</span><br><span class="line">    &#125;,    </span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Header.vue代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.renderInput()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">task</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">renderInput</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> inputAttrs = &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="attr">placeholder</span>: <span class="string">&quot;请输入您的任务，按回车键确认&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;<span class="attr">...</span>&#123; <span class="attr">attrs:</span> <span class="attr">inputAttrs</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">vModel</span>=<span class="string">&#123;this.task&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">vOn:keyup_enter</span>=<span class="string">&#123;this.submit&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">submit</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//通知App组件添加todo</span></span><br><span class="line">            <span class="comment">//整理数据，为每个todo添加唯一id</span></span><br><span class="line">            <span class="comment">//Item组件进行删除操作,vue的虚拟Dom会复用相同的组件,会导致虚拟DOM不能正确追踪每一个Item组件（每个todo）,确保每个todo项(每一个Item组件)唯一，</span></span><br><span class="line">            <span class="comment">//需要在List组件进行v-for遍历todoList生成Item组件时，为每个Item绑定唯一值:key=id</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;getToDo&quot;</span>, &#123; <span class="attr">task</span>: <span class="variable language_">this</span>.<span class="property">task</span>, <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">id</span>++, <span class="attr">checked</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">task</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="完成todoList展示、选中、修改、删除"><a href="#完成todoList展示、选中、修改、删除" class="headerlink" title="完成todoList展示、选中、修改、删除"></a>完成todoList展示、选中、修改、删除</h3><p>涉及三个组件：App、List、Item</p>
<p>其中删除、修改在Item组件中，需要到App组件去操作数据，而Item和App是爷孙关系，可以使用**$attr和$listeners**进行爷孙通信，v-on&#x3D;”$listeners”可以让子组件继承所有我们依赖的组件的事件。</p>
<p><strong style="color:orange">在点击修改按钮，显示输入框时，单纯使用v-show或v-if并不能使显示的输入框自动聚焦，所以我使用自定义指令和v-if组合实现显示输入框自动聚焦。</strong></p>
<p><strong style="color:orange">之所以不使用自定义+v-show，是因为使用自定义完成input框聚焦时，使用的inserted钩子只在节点插入时生效，v-show的效果相当于display为none或block，并不像v-if那样实现对节点的增删。</strong></p>
<p>JSX：</p>
<ol>
<li>在JSX中组件需要传递多个事件，可以使用<code>on=&#123;&#123;事件1,事件2...&#125;&#125;</code></li>
<li>父组件传递数据给子组件：todoList&#x3D;{this.todoList}</li>
<li>v-on&#x3D;”$listeners”，需要写成：on&#x3D;{this.$listeners}</li>
<li>v-show和自定义指令v-focus，需要写成驼峰式写法：vShow、vFocus</li>
<li>添加多个样式：class&#x3D;{[cls,’btn’]}，其中cls为变量传入，并且可以写JS表达式（如三元运算符）</li>
</ol>
<p>App（爷）组件代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Header.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Header</span> <span class="attr">class</span>=<span class="string">&quot;distance&quot;</span> <span class="attr">vOn:getToDo</span>=<span class="string">&#123;this.getToDo&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">List</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">class</span>=<span class="string">&quot;distance&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">todoList</span>=<span class="string">&#123;this.todoList&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">on</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">checkedTodo:</span> <span class="attr">this.checkedTodo</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">delToDo:</span> <span class="attr">this.delToDo</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">updateTodo:</span> <span class="attr">this.updateTodo</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">val</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">      <span class="comment">//数据保存在list中</span></span><br><span class="line">      <span class="attr">todoList</span>: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;<span class="comment">//展示与Item有关的方法</span></span><br><span class="line">    <span class="comment">//修改item的checked值</span></span><br><span class="line">    <span class="title function_">checkedTodo</span>(<span class="params">id</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">todoList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//将当前的todoItem的checked值修改</span></span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">id</span> == id) &#123;</span><br><span class="line">          item.<span class="property">checked</span> = !item.<span class="property">checked</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//删除某个todo</span></span><br><span class="line">    <span class="title function_">delToDo</span>(<span class="params">id</span>) &#123;</span><br><span class="line">      <span class="comment">//利用filter将id不符合的数据返回即可</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">todoList</span> = <span class="variable language_">this</span>.<span class="property">todoList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> != id);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//更新某个todo</span></span><br><span class="line">    <span class="title function_">updateTodo</span>(<span class="params">task, id</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">todoList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">id</span> == id) &#123;</span><br><span class="line">          item.<span class="property">task</span> = task;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>List（父）组件代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Item</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Item.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;todoList&quot;</span>],</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.todoList.map((todoItem) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          return (</span></span><br><span class="line"><span class="language-xml">              //Item组件进行删除操作,vue的虚拟Dom会复用相同的组件,会导致虚拟DOM不能正确追踪每一个Item组件（每个todo）,确保每个todo项(每一个Item组件)唯一，</span></span><br><span class="line"><span class="language-xml">            //需要在List组件进行v-for遍历todoList生成Item组件时，为每个Item绑定唯一值:key=id</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Item</span> <span class="attr">todoItem</span>=<span class="string">&#123;todoItem&#125;</span> <span class="attr">on</span>=<span class="string">&#123;this.$listeners&#125;</span> <span class="attr">key</span>=<span class="string">&#123;todoItem.id&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          );</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Item（孙）组件代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">props</span>:[<span class="string">&#x27;todoItem&#x27;</span>],</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">vOn:mouseenter</span>=<span class="string">&#123;this.showBtn&#125;</span> <span class="attr">vOn:mouseleave</span>=<span class="string">&#123;this.closeBtn&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;this.renderCheckBox()&#125; </span></span><br><span class="line"><span class="language-xml">                &#123;this.renderModifyInput()&#125;</span></span><br><span class="line"><span class="language-xml">                &#123;this.renderText()&#125;</span></span><br><span class="line"><span class="language-xml">                &#123;this.renderBtn(&#x27;btn-info&#x27;,this.showInput,&#x27;修改&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">                &#123;this.renderBtn(&#x27;btn-danger&#x27;,this.delItem,&#x27;删除&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">isShowBtn</span>:<span class="literal">false</span>,    <span class="comment">//控制修改、删除按钮显示与隐藏</span></span><br><span class="line">            <span class="attr">text</span>: <span class="variable language_">this</span>.<span class="property">todoItem</span>.<span class="property">task</span>,   <span class="comment">//修改task的文本</span></span><br><span class="line">            <span class="attr">isshowInput</span>:<span class="literal">false</span>   <span class="comment">//控制修改输入框显示与隐藏</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="comment">//渲染修改和删除按钮</span></span><br><span class="line">        <span class="title function_">renderBtn</span>(<span class="params">cls,method,type</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&#123;[cls,</span>&#x27;<span class="attr">btn</span>&#x27;]&#125; <span class="attr">vShow</span>=<span class="string">&#123;this.isShowBtn&#125;</span> <span class="attr">vOn:click</span>=<span class="string">&#123;method&#125;</span>&gt;</span>&#123;type&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//渲染todo的文本</span></span><br><span class="line">        <span class="title function_">renderText</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">vShow</span>=<span class="string">&#123;!this.isshowInput&#125;</span>&gt;</span>&#123;this.todoItem.task&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//渲染修改框</span></span><br><span class="line">        <span class="title function_">renderModifyInput</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">isshowInput</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">vModel</span>=<span class="string">&#123;this.text&#125;</span> <span class="attr">vFocus</span> <span class="attr">vOn:blur</span>=<span class="string">&#123;this.handleBlur&#125;</span> /&gt;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//渲染勾选框</span></span><br><span class="line">        <span class="title function_">renderCheckBox</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;this.todoItem.checked&#125;</span> <span class="attr">vOn:click</span>=<span class="string">&#123;this.handleSelected&#125;</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//展示修改、删除按钮</span></span><br><span class="line">        <span class="title function_">showBtn</span>(<span class="params"></span>)&#123;  </span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isShowBtn</span> = <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//隐藏修改、删除按钮</span></span><br><span class="line">        <span class="title function_">closeBtn</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isShowBtn</span> = <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//checked改变通知爷组件修改checked的值</span></span><br><span class="line">        <span class="title function_">handleSelected</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//通知App组件（爷组件），谁被勾选或取消</span></span><br><span class="line">            <span class="variable language_">this</span>.$emit(<span class="string">&#x27;checkedTodo&#x27;</span>,<span class="variable language_">this</span>.<span class="property">todoItem</span>.<span class="property">id</span>) </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//删除item</span></span><br><span class="line">        <span class="title function_">delItem</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//通知App组件（爷组件），谁被勾选或取消    </span></span><br><span class="line">            <span class="variable language_">this</span>.$emit(<span class="string">&#x27;delToDo&#x27;</span>,<span class="variable language_">this</span>.<span class="property">todoItem</span>.<span class="property">id</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//显示修改输入框</span></span><br><span class="line">        <span class="title function_">showInput</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isshowInput</span> = <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//失去焦点后，完成修改</span></span><br><span class="line">        <span class="title function_">handleBlur</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//隐藏修改框</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isshowInput</span> = <span class="literal">false</span></span><br><span class="line">            <span class="comment">//判断taks是否改变，task改变才通知爷组件修改数据</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">text</span>!=<span class="variable language_">this</span>.<span class="property">todoItem</span>.<span class="property">task</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">submit</span>(<span class="variable language_">this</span>.<span class="property">text</span>,<span class="variable language_">this</span>.<span class="property">todoItem</span>.<span class="property">id</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//完成修改</span></span><br><span class="line">        <span class="title function_">submit</span>(<span class="params">text,id</span>)&#123;</span><br><span class="line">            <span class="comment">//通知App组件（爷组件），更新todo数据</span></span><br><span class="line">            <span class="variable language_">this</span>.$emit(<span class="string">&#x27;updateTodo&#x27;</span>,text,id)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">directives</span>:&#123;</span><br><span class="line">        <span class="comment">//自定义v-foucs，当input显示自动聚焦</span></span><br><span class="line">         <span class="attr">focus</span>:&#123;</span><br><span class="line">             <span class="title function_">inserted</span>(<span class="params">el</span>)&#123;</span><br><span class="line">                el.<span class="title function_">focus</span>()</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="统计todoList和清除已完成的todo"><a href="#统计todoList和清除已完成的todo" class="headerlink" title="统计todoList和清除已完成的todo"></a>统计todoList和清除已完成的todo</h3><p>涉及两个组件：App和Footer组件</p>
<p>footer在清除已完成的todo和全选或取消全选时，需要通知App去修改数据，父子通信使用<strong>自定义事件</strong></p>
<p>App组件代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Header.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&quot;@/components/List.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Footer</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Footer.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Header</span> <span class="attr">class</span>=<span class="string">&quot;distance&quot;</span> <span class="attr">vOn:getToDo</span>=<span class="string">&#123;this.getToDo&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">List</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">class</span>=<span class="string">&quot;distance&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">todoList</span>=<span class="string">&#123;this.todoList&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">on</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">checkedTodo:</span> <span class="attr">this.checkedTodo</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">delToDo:</span> <span class="attr">this.delToDo</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">updateTodo:</span> <span class="attr">this.updateTodo</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Footer</span> <span class="attr">class</span>=<span class="string">&quot;distance&quot;</span> <span class="attr">vOn:checkedAll</span>=<span class="string">&#123;this.checkedAll&#125;</span> <span class="attr">vOn:delChecked</span>=<span class="string">&#123;this.delChecked&#125;</span> <span class="attr">todoList</span>=<span class="string">&#123;this.todoList&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">val</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">      <span class="comment">//数据保存在list中</span></span><br><span class="line">      <span class="attr">todoList</span>: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;<span class="comment">//只展示与Footer有关的方法</span></span><br><span class="line">    <span class="comment">//全部选中或取消选中</span></span><br><span class="line">    <span class="title function_">checkedAll</span>(<span class="params">flag</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">cancel</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">todoList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">          item.<span class="property">checked</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//取消全选</span></span><br><span class="line">    <span class="title function_">cancel</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">todoList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        item.<span class="property">checked</span> = <span class="literal">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//清除已完成的todo</span></span><br><span class="line">    <span class="title function_">delChecked</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">todoList</span> = <span class="variable language_">this</span>.<span class="property">todoList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item.<span class="property">checked</span> == <span class="literal">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Footer组件代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;todoList&quot;</span>],</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.renderCheckBox()&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;this.renderSpan()&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;this.renderBtn()&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">//渲染清除按钮</span></span><br><span class="line">    <span class="title function_">renderBtn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">disabled</span>=<span class="string">&#123;this.Done</span> == <span class="string">0&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">vOn:click</span>=<span class="string">&#123;this.handleDelChecked&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          清除已完成按钮</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//渲染统计信息文本</span></span><br><span class="line">    <span class="title function_">renderSpan</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          已完成 &#123;this.Done&#125;/ 全部&#123;this.total&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//渲染全选框</span></span><br><span class="line">    <span class="title function_">renderCheckBox</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> //<span class="attr">如果每一个todo都勾选</span>，<span class="attr">那么也应该全选</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">checked</span>=<span class="string">&#123;this.Done</span> == <span class="string">this.todoList.length</span> &amp;&amp; <span class="attr">this.todoList.length</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">vOn:click</span>=<span class="string">&#123;this.handleCheckedAll&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">handleCheckedAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// console.log()</span></span><br><span class="line">      <span class="comment">//如果Done=总数,则表明取消全选,反之全选</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;checkedAll&quot;</span>, <span class="variable language_">this</span>.<span class="property">Done</span> === <span class="variable language_">this</span>.<span class="property">todoList</span>.<span class="property">length</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//删除已完成（即删除勾选的）</span></span><br><span class="line">    <span class="title function_">handleDelChecked</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//通知App(父组件)清除已完成的todo</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;delChecked&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//计算总数</span></span><br><span class="line">    <span class="title function_">total</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">todoList</span>.<span class="property">length</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//计算有多少已完成</span></span><br><span class="line">    <span class="title class_">Done</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">todoList</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> prev + (curr.<span class="property">checked</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">      &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>JSX</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/07/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo发文</title>
    <url>/2022/08/29/hexo%E5%8F%91%E6%96%87/</url>
    <content><![CDATA[<p>1、 新建一篇文章</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在hexo博客目录下，进入Git Bash命令窗口中，输入以下命令：</span><br><span class="line">hexo new &quot;在这里&quot;</span><br><span class="line">在博客目录下的/source/_posts/ 文件夹下，可以看到已经生成了标题为(在这里.md)的博客文件</span><br></pre></td></tr></table></figure>
<p>2、给文章添加分类和标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在（在这里.md）文件中设置tags和categories属性:</span><br><span class="line">title: 在这里</span><br><span class="line">date: 2018-08-02 11:41:10</span><br><span class="line">tags:</span><br><span class="line">- 博客           //多个标签可以这样添加</span><br><span class="line">- hexo</span><br><span class="line">categories: web前端</span><br></pre></td></tr></table></figure>
<p>3、发布到Github上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<h3 id="上传时报错"><a href="#上传时报错" class="headerlink" title="上传时报错"></a>上传时报错</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (C:\blog\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:315:20)</span><br><span class="line">      at ChildProcess.cp.emit (C:\blog\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解决：在命令行输入以下内容后，重新上传</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo发表文章</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs开启服务器</title>
    <url>/2022/08/29/nodejs%E5%BC%80%E5%90%AF%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h3 id="1-新建文件夹demo"><a href="#1-新建文件夹demo" class="headerlink" title="1.新建文件夹demo"></a>1.新建文件夹demo</h3><p>在该目录下执行以下命令:<br>npm init<br>npm i express<br>创建server.js（服务器主文件）</p>
<h3 id="2-向sever-js文件写入内容"><a href="#2-向sever-js文件写入内容" class="headerlink" title="2.向sever.js文件写入内容"></a>2.向sever.js文件写入内容</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/person&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">5005</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在demo目录下执行：node server</span></span><br><span class="line"><span class="comment">//在浏览器访问即可</span></span><br></pre></td></tr></table></figure>
<h3 id="3-作为vue项目的后台"><a href="#3-作为vue项目的后台" class="headerlink" title="3.作为vue项目的后台"></a>3.作为vue项目的后台</h3><p>在demo文件夹下创建static文件夹<br>把打包好的vue项目（css、js、index.html等）放到static文件夹下<br>向sever.js文件写入内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="property">static__dirname</span>+<span class="string">&#x27;/static&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.get(&#x27;/person&#x27;,(req,res)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     res.send(&#123;</span></span><br><span class="line"><span class="comment">//         name:&#x27;tom&#x27;,</span></span><br><span class="line"><span class="comment">//         age:18</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">5005</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在demo目录下执行：node server</span></span><br><span class="line"><span class="comment">//在浏览器访问即可:localhost/index</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nodejs服务器</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>pinia</title>
    <url>/2022/10/08/pinia/</url>
    <content><![CDATA[<h1 id="在vue3-ts的环境下使用pinia"><a href="#在vue3-ts的环境下使用pinia" class="headerlink" title="在vue3+ts的环境下使用pinia"></a>在vue3+ts的环境下使用pinia</h1><ol>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save pinia</span><br></pre></td></tr></table></figure>
</li>
<li><p>在mian.ts中</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createPinia&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在src下创建index.ts 和 types.ts(<strong style="color:orange">types.ts是我们用来约束对应模块的状态</strong>)</p>
</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; indexType &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span><br><span class="line"><span class="comment">//main是storeId,保证唯一</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useIndexStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;index&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">state</span>:():<span class="function"><span class="params">indexType</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">count</span>:<span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="title function_">doubleCount</span>():<span class="built_in">number</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span>*<span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">updateCount</span>(<span class="params">val:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">count</span> = val</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//types.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> indexType = &#123;</span><br><span class="line">    <span class="attr">count</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>组件内调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Count组件&lt;/h2&gt;</span><br><span class="line">        &lt;h4&gt;count:&#123;&#123;count&#125;&#125;&lt;/h4&gt;</span><br><span class="line">        &lt;h4&gt;doubleCount:&#123;&#123;doubleCount&#125;&#125;&lt;/h4&gt;</span><br><span class="line">        &lt;button @click=&quot;countChange&quot;&gt;更新pinia-&gt;count&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineComponent,computed &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123;useIndexStore&#125; from &#x27;../stores&#x27;</span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">    name:&#x27;Count&#x27;,</span><br><span class="line">    setup () &#123;</span><br><span class="line">        const indexStore = useIndexStore()</span><br><span class="line">        let doubleCount = computed(()=&gt;indexStore.doubleCount)</span><br><span class="line"></span><br><span class="line">        let count = computed(&#123;</span><br><span class="line">            get():number&#123;</span><br><span class="line">                return  indexStore.count</span><br><span class="line">            &#125;,</span><br><span class="line">            set(val:number):void&#123;</span><br><span class="line">                indexStore.updateCount(val)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        const countChange = ():void=&gt;&#123;</span><br><span class="line">            console.log(Math.random())</span><br><span class="line">            count.value = Math.floor(Math.random()*10)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return &#123;</span><br><span class="line">            count,</span><br><span class="line">            doubleCount,</span><br><span class="line">            countChange</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将store的数据变成响应式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入响应式</span></span><br><span class="line"><span class="keyword">import</span> &#123;storeToRefs&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">const</span> indexStore = <span class="title function_">useIndexStore</span>()</span><br><span class="line"><span class="keyword">const</span> &#123;count&#125; = <span class="title function_">storeToRefs</span>(indexStore)</span><br></pre></td></tr></table></figure>
</li>
<li><p>将数据重置为store最初的状态</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">indexStore.$reset()</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改多个数据</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">indexStore.$pacth()</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="详细的pinia教程"><a href="#详细的pinia教程" class="headerlink" title="详细的pinia教程"></a>详细的pinia教程</h3><p><a href="https://zhuanlan.zhihu.com/p/533233367">https://zhuanlan.zhihu.com/p/533233367</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>token的使用</title>
    <url>/2022/11/19/tp6%E5%AE%9E%E7%8E%B0JWT/</url>
    <content><![CDATA[<h3 id="tp6实现JWT"><a href="#tp6实现JWT" class="headerlink" title="tp6实现JWT"></a>tp6实现JWT</h3><p>composer安装JWT</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer require firebase/php-jwt</span><br></pre></td></tr></table></figure>

<p>引入并使用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入token工具</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Firebase</span>\<span class="title">JWT</span>\<span class="title">JWT</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Firebase</span>\<span class="title">JWT</span>\<span class="title">Key</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$key</span> = <span class="string">&#x27;example_key&#x27;</span>;   <span class="comment">//这里填写你自己设置的密钥</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//加密并返回token</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generate</span>(<span class="params"><span class="variable">$userId</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$payload</span> = [</span><br><span class="line">            <span class="string">&#x27;iss&#x27;</span> =&gt; <span class="string">&#x27;http://example.org&#x27;</span>,  <span class="comment">//jwt签发方，这个地方可以自定义</span></span><br><span class="line">            <span class="string">&#x27;aud&#x27;</span> =&gt; <span class="string">&#x27;http://example.com&#x27;</span>,  <span class="comment">//jwt接收方，这个地方可以自定义</span></span><br><span class="line">            <span class="string">&#x27;exp&#x27;</span> =&gt; <span class="title function_ invoke__">time</span>()+<span class="number">3600</span>*<span class="number">2</span>,         <span class="comment">//jwt的过期时间，过期时间必须大于签发时间</span></span><br><span class="line">            <span class="string">&#x27;iat&#x27;</span> =&gt; <span class="title function_ invoke__">time</span>(),            <span class="comment">//jwt的签发时间</span></span><br><span class="line">            <span class="string">&#x27;nbf&#x27;</span> =&gt; <span class="title function_ invoke__">time</span>(),             <span class="comment">//定义在什么时间之前，某个时间点后才能访问</span></span><br><span class="line">            <span class="string">&#x27;data&#x27;</span> =&gt; [</span><br><span class="line">                <span class="string">&#x27;userId&#x27;</span> =&gt; <span class="variable">$userId</span></span><br><span class="line">            ]</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$token</span> = JWT::<span class="title function_ invoke__">encode</span>(<span class="variable">$payload</span>, <span class="variable">$this</span>-&gt;key, <span class="string">&#x27;HS256&#x27;</span>);        <span class="comment">//encode加密</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$token</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解密</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params"><span class="variable">$token</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$decoded</span> = JWT::<span class="title function_ invoke__">decode</span>(<span class="variable">$token</span>, <span class="keyword">new</span> <span class="title class_">Key</span>(<span class="variable">$this</span>-&gt;key, <span class="string">&#x27;HS256&#x27;</span>));   <span class="comment">//decode解密</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果用户的token解密后的一些数据(比如账号id)和前端登录保存在cookie里的账户id是吻合的，那么就说明是本人</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$decoded</span>-&gt;data-&gt;userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authToken</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$createToken</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">generate</span>(<span class="string">&#x27;zhangs&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$createToken</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$token</span> = <span class="title class_">Request</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">parse</span>(<span class="variable">$token</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h3><p>tp6解决跨域，在middleware.php中配置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跨域请求支持</span></span><br><span class="line">    \think\middleware<span class="title class_">\AllowCrossDomain</span>::<span class="variable language_">class</span>,</span><br></pre></td></tr></table></figure>

<h3 id="首次请求生成token和设置token"><a href="#首次请求生成token和设置token" class="headerlink" title="首次请求生成token和设置token"></a>首次请求生成token和设置token</h3><p>前端代码</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">userAccount</span>: <span class="number">91222</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;swp&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里需要判断token是否存在，存在就从存储中获取token</span></span><br><span class="line"><span class="keyword">let</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://www.sunwp.com/sunwp_forum/test/test&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">body</span>:data,</span><br><span class="line">    <span class="attr">headers</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="comment">//设置请求头</span></span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">`<span class="subst">$&#123;token&#125;</span>`</span>,    <span class="comment">//在ts中直接赋值会报错，使用模板字符串</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取的数据&#x27;</span>,data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//处理从服务器返回的数据，设置token</span></span><br><span class="line">    <span class="keyword">let</span> token = res.<span class="property">token</span></span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>,token)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;已将token存放到local storage中&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error&#x27;</span>,error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>后端代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取前端发过来的数据</span></span><br><span class="line">   <span class="variable">$userAccount</span> = <span class="title class_">Request</span>::<span class="title function_ invoke__">param</span>(<span class="string">&#x27;userAccount&#x27;</span>);</span><br><span class="line">   <span class="variable">$password</span> = <span class="title class_">Request</span>::<span class="title function_ invoke__">param</span>(<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">   <span class="comment">//初始化token</span></span><br><span class="line">   <span class="variable">$token</span> = <span class="literal">null</span>;</span><br><span class="line">   <span class="comment">//验证账号和密码是否正确</span></span><br><span class="line">   <span class="keyword">if</span>(<span class="variable">$userAccount</span> == <span class="string">&#x27;91222&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$status</span> = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span>(<span class="variable">$password</span> == <span class="string">&#x27;swp&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable">$status</span> = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//成功后进行生成token</span></span><br><span class="line">            <span class="variable">$token</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">generate</span>(<span class="variable">$userAccount</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$status</span> = <span class="number">0</span>;</span><br><span class="line">   &#125;       </span><br><span class="line">   </span><br><span class="line">    <span class="variable">$data</span> = [<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;返回的信息&#x27;</span>,<span class="string">&#x27;status&#x27;</span>=&gt;<span class="variable">$status</span>,<span class="string">&#x27;token&#x27;</span>=&gt;<span class="variable">$token</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">json</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="非首次请求设置请求头和获取请求头"><a href="#非首次请求设置请求头和获取请求头" class="headerlink" title="非首次请求设置请求头和获取请求头"></a>非首次请求设置请求头和获取请求头</h3><p>前端</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://www.sunwp.com/sunwp_forum/test/test2&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">headers</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">`<span class="subst">$&#123;token&#125;</span>`</span>,    <span class="comment">//在ts中直接赋值会报错，使用模板字符串</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>tp6</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$header</span> = <span class="title class_">Request</span>::<span class="title function_ invoke__">header</span>(<span class="string">&#x27;Authorization&#x27;</span>);</span><br><span class="line">        <span class="comment">//将token解码，得到用户信息</span></span><br><span class="line">        <span class="variable">$param</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">parse</span>(<span class="variable">$header</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$data</span> = [<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;用户信息&#x27;</span>,<span class="string">&#x27;data&#x27;</span>=&gt;<span class="variable">$param</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">json</span>(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>tp6</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>ts+webpack环境构建</title>
    <url>/2022/11/24/ts-webpack%E7%8E%AF%E5%A2%83%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="npm包初始化和安装typescript"><a href="#npm包初始化和安装typescript" class="headerlink" title="npm包初始化和安装typescript"></a>npm包初始化和安装typescript</h3><p>将ts_demo文件夹初始化为一个npm包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<p>全局安装typescript</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i typescript -g</span><br></pre></td></tr></table></figure>

<p>如果出现以下错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\xxx\AppData\Roaming\npm\cnpm.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅</span><br></pre></td></tr></table></figure>

<p>用管理员身份运行power shell，执行以下操作，根据提示输入A回车即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure>

<p>ts初始化：<code>tsc --init</code> 会生成tsconfig.json文件</p>
<p>新建文件夹src，在src下新建index.ts</p>
<h3 id="配置构建工具webpack"><a href="#配置构建工具webpack" class="headerlink" title="配置构建工具webpack"></a>配置构建工具webpack</h3><p>安装webpack相关依赖(在ts_demo目录下安装)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i webpack webpack-cli webpack-dev-server -D</span><br></pre></td></tr></table></figure>

<p>创建build目录（存放所有配置文件）</p>
<table>
<thead>
<tr>
<th>webpack.config.js</th>
<th>是所有文件的入口</th>
</tr>
</thead>
<tbody><tr>
<td>webpack.bash.config.js</td>
<td>公共环境的配置</td>
</tr>
<tr>
<td>webpack.dev.config.js</td>
<td>开发环境的配置</td>
</tr>
<tr>
<td>webpack.pro.config.js</td>
<td>生产环境的配置</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//base.config.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;app.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [ <span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span> ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.tsx?$/i</span>,</span><br><span class="line">                <span class="attr">use</span>: [&#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;ts-loader&#x27;</span></span><br><span class="line">                &#125;],</span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./src/tpl/index.html&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> &#123;merge&#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.base.config&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> devConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.dev.config&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> proConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.pro.config&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">env,argv</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> config = argv.<span class="property">mode</span> === <span class="string">&#x27;development&#x27;</span> ? devConfig : proConfig;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>(baseConfig,config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dev.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&#x27;source-map&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//pro.config.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>安装ts-loader(在ts_demo目录下安装)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i ts-loader typescript -D</span><br></pre></td></tr></table></figure>

<p>安装模板生成文件(在ts_demo目录下安装)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure>

<p>安装清除和合并依赖(在ts_demo目录下安装)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i clean-webpack-plugin -D</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i webpack-merge -D</span><br></pre></td></tr></table></figure>

<p>在src下新建tpl文件夹，在tpl里新建index.html</p>
<hr>
<p>配置ts_demo下的package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ts_demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src/index.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server --mode=development --config ./build/webpack.config.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --mode=production --config ./build/webpack.config.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;clean-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;html-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.5.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ts-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^9.4.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.9.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.75.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-dev-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.11.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-merge&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.8.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最终</p>
<p>使用：<code>npm run start</code>来启动</p>
<p>使用：<code>npm run build</code>来打包</p>
<h3 id="目录结构如下"><a href="#目录结构如下" class="headerlink" title="目录结构如下"></a>目录结构如下</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ts_demo</span><br><span class="line">├─ build</span><br><span class="line">│  ├─ webpack.base.config.js</span><br><span class="line">│  ├─ webpack.config.js</span><br><span class="line">│  ├─ webpack.dev.config.js</span><br><span class="line">│  └─ webpack.pro.config.js</span><br><span class="line">├─ dist</span><br><span class="line">│  ├─ app.js</span><br><span class="line">│  └─ index.html</span><br><span class="line">├─ package.json</span><br><span class="line">├─ src</span><br><span class="line">│  ├─ index.ts</span><br><span class="line">│  ├─ package.json</span><br><span class="line">│  └─ tpl</span><br><span class="line">│     └─ index.html</span><br><span class="line">├─ test.txt</span><br><span class="line">└─ tsconfig.json</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>typescript</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>想要提高开发效率,先把VScode快捷键用好</title>
    <url>/2023/03/05/vscode%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>整理了一些使用VScode的小技巧：快捷键、配置代码片段</p>
<h3 id="快捷键-window"><a href="#快捷键-window" class="headerlink" title="快捷键(window)"></a>快捷键(window)</h3><ul>
<li>Ctrl+N：新建文件</li>
<li>Ctrl+Shift+N：打开一个新的VScode编辑器</li>
<li>Ctrl+O：打开文件</li>
<li>Ctrl+W：关闭当前文件</li>
<li>Ctrl+\：拆分文件到侧边显示</li>
<li>Ctrl+Tab：在工作区切换文件窗口</li>
<li>Ctrl+B：显示&#x2F;隐藏侧边栏</li>
<li>Ctrl+&#96;：显示&#x2F;隐藏Terminal</li>
<li>Ctrl+F：当前文件中查找</li>
<li>Ctrl+H：当前文件查找替换</li>
<li>Ctrl+Shift+F：全局查找</li>
<li>Ctrl+D：选中下一个匹配项</li>
<li>Ctrl+L：选中当前行</li>
</ul>
<h3 id="配置代码片段"><a href="#配置代码片段" class="headerlink" title="配置代码片段"></a>配置代码片段</h3><p>效果</p>
<p><img src="/images/codeConfig.gif" alt="配置代码"></p>
<p>首先需要打开VScode-&gt;右上角的“文件“-&gt;首选项-&gt;配置用户代码片段</p>
<p>在点击”配置用户代码“后，VScode会提示你输入，比如说我经常使用vue开发，那就可以这样干:</p>
<p>输入<code>vue</code>选中后，会生成vue.json，这个json文件通常用于快速构建一个文件结构，比如一个vue3的模板(上述效果图就是配置vue.json)</p>
<p>然后输入<code>javascript</code>就会生成javascript.json，这个是可以在script标签内生成js代码</p>
<p>最后输入<code>vue-html</code>，就会生成html代码，在template标签中生成html代码，像常用的el-form就可以配置，不需要再跑到官网进行复制</p>
<p><img src="/images/configFile.png" alt="代码文件"></p>
<p>具体的代码配置如下：</p>
<p>vue.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;vue3模板&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//快捷输入的时候显示的提示</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue&quot;</span><span class="punctuation">,</span> <span class="comment">//输入的前缀，就是输入这个会有提示</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue3模板&quot;</span><span class="punctuation">,</span> <span class="comment">//描述</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">//这个是一个字符串数组，就是会输出的内容，如果内容含有 双引号，需要转义，比如最下面的lang=\&quot;scss\&quot;</span></span><br><span class="line">			<span class="string">&quot;&lt;template&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  &lt;div&gt;&lt;/div&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&lt;/template&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&lt;script setup&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&lt;/script&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&lt;style lang=\&quot;scss\&quot; scoped&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&lt;/style&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>javascript.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;import基本配置&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;import&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;import基本配置&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;import &#123;ref,reactive,inject&#125; from &#x27;vue&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;import &#123;useRouter,useRoute&#125; from &#x27;vue-router&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;const global = inject(&#x27;global&#x27;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;const router = useRouter()&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;const route = useRoute()&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">]</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;dialog弹窗配置&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dialogConfig&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;弹窗config配置&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;const dialogConfig = reactive(&#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  show: false,&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  title: \&quot;标题\&quot;,&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  buttons: [&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;   &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;    type: \&quot;danger\&quot;,&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;    text: \&quot;确定\&quot;,&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;    click: (e) =&gt; &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;      submitForm();&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;    &#125;,&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  &#125;,&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot; ],&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&#125;);&quot;</span></span><br><span class="line">		<span class="punctuation">]</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;formData配置&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;form&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;快速实现添加form配置&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;const formData = ref(&#123;&#125;);&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;const formDataRef = ref();&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;const rules = &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  title: [&#123; required: true, message: \&quot;请输入内容\&quot; &#125;],&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&#125;;&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">]</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;watch使用&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;watch&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;快速实现watch&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;watch(() =&gt; (newVal, oldVal) =&gt; &#123;&#125;, &#123; immediate: true, deep: true &#125;);&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">]</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>vue-html.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;el-form模板&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;el-form&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;创建el-form&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;&lt;el-form&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  :model=\&quot;formData\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  :rules=\&quot;rules\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  ref=\&quot;formDataRef\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  label-width=\&quot;80px\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  @submit.prevent&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&lt;!--input输入--&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  &lt;el-form-item label=\&quot;\&quot; prop=\&quot;\&quot; &gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;    &lt;el-input clearable placeholder=\&quot;提示信息\&quot; v-model.trim=\&quot;formData.\&quot;&gt;&lt;/el-input&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  &lt;/el-form-item&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&lt;!--textarea输入--&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  &lt;el-form-item label=\&quot;\&quot; prop=\&quot;\&quot;&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;    &lt;el-input&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;      clearable&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;      placeholder=\&quot;提示信息\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;      type=\&quot;textarea\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;      :rows=\&quot;5\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;      :maxlength=\&quot;150\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;      resize=\&quot;none\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;      show-word-limit&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;      v-model.trim=\&quot;formData.\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  &gt;&lt;/el-input&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  &lt;/el-form-item&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&lt;!-- 单选 --&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  &lt;el-form-item label=\&quot;\&quot; prop=\&quot;\&quot; &gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;    &lt;el-radio-group v-model=\&quot;formData.\&quot;&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;      &lt;el-radio :label=\&quot;值1\&quot;&gt;显示信息&lt;/el-radio&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;      &lt;el-radio :label=\&quot;值2\&quot;&gt;显示信息&lt;/el-radio&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;    &lt;/el-radio-group&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  &lt;/el-form-item&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&lt;!-- 下拉框 --&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  &lt;el-form-item label=\&quot;\&quot; prop=\&quot;\&quot; &gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;    &lt;el-select clearable  placeholder=\&quot;提示信息\&quot; v-model=\&quot;formData.\&quot; ,&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;      &lt;el-option :value=\&quot;值1\&quot; label=\&quot;显示信息\&quot;&gt;&lt;/el-option&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;      &lt;el-option :value=\&quot;值2\&quot; label=\&quot;显示信息\&quot;&gt;&lt;/el-option&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;    &lt;/el-select&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  &lt;/el-form-item&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&lt;/el-form&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">]</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;el-input模板&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;el-input&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;创建el-input&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;&lt;!--input输入--&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  &lt;el-form-item label=\&quot;\&quot; prop=\&quot;\&quot; &gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;    &lt;el-input clearable placeholder=\&quot;提示信息\&quot; v-model=\&quot;formData.\&quot;&gt;&lt;/el-input&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  &lt;/el-form-item&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">]</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;el-card模板&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;el-card&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;创建el-card&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;&lt;el-card class=\&quot;box-card\&quot;&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  &lt;div slot=\&quot;header\&quot; class=\&quot;clearfix\&quot;&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;    &lt;span&gt;卡片名称&lt;/span&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;    &lt;el-button style=\&quot;float: right; padding: 3px 0\&quot; type=\&quot;text\&quot;&gt;操作按钮&lt;/el-button&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  &lt;/div&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  &lt;div&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;    这里是内容&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;  &lt;/div&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&lt;/el-card&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">]</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;el-divider竖线&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span><span class="string">&quot;el-divider&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;竖线&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;&lt;el-divider direction=\&quot;vertical\&quot; /&gt;&quot;</span></span><br><span class="line">		<span class="punctuation">]</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>脱离脚手架使用vue+elementUI</title>
    <url>/2022/12/17/vue-eleUI/</url>
    <content><![CDATA[<p>替换主题色</p>
<p>使用element官方提供的<a href="%5Belementui.github.io%5D(https://elementui.github.io/theme-chalk-preview)">在线主题生成工具</a>，将下载的压缩包解压缩并在页面中引入index.css</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--将解压缩得到的全部样式放到eleui目录下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/eleui/index.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用表单验证并阻止默认提交"><a href="#使用表单验证并阻止默认提交" class="headerlink" title="使用表单验证并阻止默认提交"></a>使用表单验证并阻止默认提交</h3><p>场景如下：</p>
<p>我想让登录表单的账号和密码进行验证操作，验证通过再进行表单提交。</p>
<p><strong>因为el-form为一个封装好的组件，在el-form中使用@submit只能监听封装好的组件事件，要想在组件中监听表单提交原生事件需要加上.native才行(如：@submit.native)</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>论坛后台-登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost/print01.php&quot;</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">submit.native</span>=<span class="string">&quot;checkForm(&#x27;form&#x27;,$event)&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;账号:&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.account&quot;</span> <span class="attr">name</span>=<span class="string">&quot;account&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;密码:&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;passwd&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.passwd&quot;</span> <span class="attr">name</span>=<span class="string">&quot;passwd&quot;</span> <span class="attr">show-password</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">native-type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>立即登录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">form</span>: &#123;</span><br><span class="line">                    <span class="attr">account</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="attr">passwd</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">rules</span>: &#123;</span><br><span class="line">                    <span class="attr">account</span>: [</span><br><span class="line">                        &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;账号不能为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span><br><span class="line">                        &#123; <span class="attr">min</span>: <span class="number">3</span>, <span class="attr">max</span>: <span class="number">13</span>, <span class="attr">message</span>: <span class="string">&#x27;长度在3到13个字符&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">                    ],</span><br><span class="line">                    <span class="attr">passwd</span>: [</span><br><span class="line">                        &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;密码不能为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">methods</span>: &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="title function_">checkForm</span>(<span class="params">formName, e</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$refs</span>[formName].<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">                        <span class="title function_">alert</span>(<span class="string">&#x27;submit!&#x27;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;prevent submit!!&#x27;</span>);</span><br><span class="line">                        e.<span class="title function_">preventDefault</span>()</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="显示上传的图片-使用base64"><a href="#显示上传的图片-使用base64" class="headerlink" title="显示上传的图片(使用base64)"></a>显示上传的图片(使用base64)</h3><p>场景如下：</p>
<p>在上传图片的时候，可以看到上传的图片。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;file&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;showImg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-image</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px; height: 100px&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;imgUrl&quot;</span> <span class="attr">fit</span>=<span class="string">&quot;fit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;error&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-slot&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-picture-outline&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-image</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">imgUrl</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">showImg</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//这里之所以使用ref去获取图片，是因为我使用event不能获取到files</span></span><br><span class="line">                <span class="keyword">let</span> fileData = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">file</span>.<span class="property">files</span>[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">let</span> type = fileData.<span class="property">type</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">isImg</span>(type))&#123;</span><br><span class="line">                    <span class="keyword">let</span> flag = <span class="variable language_">this</span>.<span class="title function_">calcImgSize</span>(fileData.<span class="property">size</span>);</span><br><span class="line">                    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="title function_">base64</span>(fileData)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="title function_">alert</span>(<span class="string">&#x27;图片大小不能超过2M&#x27;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//判断是否为图片</span></span><br><span class="line">            <span class="title function_">isImg</span>(<span class="params">type</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> pattern = <span class="regexp">/^image/</span>;</span><br><span class="line">                <span class="keyword">if</span>(!pattern.<span class="title function_">test</span>(type))&#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&#x27;图片格式不对&#x27;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//计算图片大小，不能超过2M</span></span><br><span class="line">            <span class="title function_">calcImgSize</span>(<span class="params">size</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> num = size/<span class="number">1024</span>/<span class="number">1024</span>;</span><br><span class="line">                <span class="comment">// console.log(num)</span></span><br><span class="line">                <span class="keyword">if</span>(num&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//将图片转码</span></span><br><span class="line">            <span class="title function_">base64</span>(<span class="params">fileData</span>)&#123;</span><br><span class="line">                <span class="keyword">const</span> that = <span class="variable language_">this</span></span><br><span class="line">                <span class="keyword">let</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">                reader.<span class="title function_">readAsDataURL</span>(fileData);</span><br><span class="line">                reader.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">                <span class="comment">// console.log(e);</span></span><br><span class="line">                <span class="comment">// console.log(this.result);</span></span><br><span class="line">                that.<span class="property">imgUrl</span> = <span class="variable language_">this</span>.<span class="property">result</span></span><br><span class="line">                <span class="comment">// image.setAttribute(&quot;src&quot;,this.result)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义表单验证规则"><a href="#自定义表单验证规则" class="headerlink" title="自定义表单验证规则"></a>自定义表单验证规则</h3><p>场景如下：</p>
<p>在修改密码时，需要输入旧密码，新密码，再次确认新密码，新旧密码不能一样，验证通过才提交</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">status-icon</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">class</span>=<span class="string">&quot;demo-ruleForm&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost/print01.php&quot;</span></span></span><br><span class="line"><span class="tag">                        @<span class="attr">submit.native</span>=<span class="string">&quot;checkForm(&#x27;ruleForm&#x27;,$event)&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;旧密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;oldPass&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.oldPass&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">show-password</span> <span class="attr">name</span>=<span class="string">&quot;oldPass&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;新密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;pass&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.pass&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">show-password</span> <span class="attr">name</span>=<span class="string">&quot;newPass&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;确认新密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;checkPass&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.checkPass&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">name</span>=<span class="string">&quot;checkPass&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                            </span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">native-type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>确认修改<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;resetForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="comment">//自定义校验规则</span></span><br><span class="line">             <span class="keyword">var</span> <span class="title function_">validateOldPass</span> = (<span class="params">rule,value,callback</span>) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(value === <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">                    <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;旧密码不能为空!&#x27;</span>))</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="title function_">callback</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> <span class="title function_">validatePass</span> = (<span class="params">rule, value, callback</span>) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (value === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                    <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请输入新密码&#x27;</span>));</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(value === <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">oldPass</span>)&#123;</span><br><span class="line">                    <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;新旧密码不能一样!&#x27;</span>))</span><br><span class="line">                &#125;</span><br><span class="line">                 <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">checkPass</span> !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">ruleForm</span>.<span class="title function_">validateField</span>(<span class="string">&#x27;checkPass&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="title function_">callback</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">var</span> <span class="title function_">validatePass2</span> = (<span class="params">rule, value, callback</span>) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (value === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                    <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请再次输入新密码&#x27;</span>));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value !== <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">pass</span>) &#123;</span><br><span class="line">                    <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;两次输入密码不一致!&#x27;</span>));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">callback</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">                <span class="keyword">return</span> &#123; </span><br><span class="line">                    <span class="attr">ruleForm</span>: &#123;</span><br><span class="line">                        <span class="attr">oldPass</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                        <span class="attr">pass</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                        <span class="attr">checkPass</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">rules</span>: &#123;</span><br><span class="line">                        <span class="attr">oldPass</span>: [</span><br><span class="line">                            &#123; <span class="attr">validator</span>: validateOldPass, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        <span class="attr">pass</span>: [</span><br><span class="line">                            &#123; <span class="attr">validator</span>: validatePass, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        <span class="attr">checkPass</span>: [</span><br><span class="line">                            &#123; <span class="attr">validator</span>: validatePass2, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">                        ],</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">checkForm</span>(<span class="params">formName,e</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$refs</span>[formName].<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&#x27;submit!&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error submit!!&#x27;</span>);</span><br><span class="line">                    e.<span class="title function_">preventDefault</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">            <span class="title function_">resetForm</span>(<span class="params">formName</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$refs</span>[formName].<span class="title function_">resetFields</span>();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>elementui</tag>
      </tags>
  </entry>
  <entry>
    <title>slot的使用</title>
    <url>/2022/12/04/vue-slot/</url>
    <content><![CDATA[<h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><p>假设子组件<code>&lt;son&gt;</code>组件的模版如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>w尾部<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>利用slot特性，我们可以在一个父组件<code>&lt;father&gt;</code>中向<code>&lt;son&gt;</code>提供内容，如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">son</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">            n内容区</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里也可以省略template和v-slot(vue会默认把h1放到默认插槽里面)--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--只要出现多个插槽，请始终为所有的插槽使用完整的基于 &lt;template&gt; 的语法：--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>假设子组件<code>&lt;son&gt;</code>组件的模版如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在父组件<code>&lt;father&gt;</code>可使用v-slot分别向插槽放置对应的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">son</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><blockquote>
<p>使用作用域插槽可让插槽内容能够访问子组件中才有的数据</p>
<p>能够用于父子通信</p>
</blockquote>
<h5 id="假设我想从父组件-lt-father-gt-访问子组件-lt-son-gt-的username属性，可以这样做"><a href="#假设我想从父组件-lt-father-gt-访问子组件-lt-son-gt-的username属性，可以这样做" class="headerlink" title="假设我想从父组件&lt;father&gt;访问子组件&lt;son&gt;的username属性，可以这样做"></a>假设我想从父组件<code>&lt;father&gt;</code>访问子组件<code>&lt;son&gt;</code>的username属性，可以这样做</h5><p>在子组件<code>&lt;son&gt;</code>内部的slot元素上动态绑定一个username属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">slot</span> <span class="attr">:user</span>=<span class="string">&quot;user&quot;</span>&gt;</span>		<span class="comment">&lt;!-- user为自己在data中定义的数据--&gt;</span></span><br><span class="line">        	&#123;&#123; user.username &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在父组件<code>&lt;father&gt;</code>中，可以通过v-slot来访问user数据：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">    	&#123;&#123; slotProps.user.username &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 按照我的理解，其中的slotProps就相当于是一个包含user对象的参数对象--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这样解构赋值的方式来传入具体的插槽prop，如下: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;&#123; user &#125;&quot;</span>&gt;</span></span><br><span class="line">    	&#123;&#123; user.username &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">son</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="如果插槽传递的数据为引用类型-如：对象-，父组件还可以对它进行修改，父元素也可以往插槽内的元素绑定事件-在父元素中触发-，代码如下："><a href="#如果插槽传递的数据为引用类型-如：对象-，父组件还可以对它进行修改，父元素也可以往插槽内的元素绑定事件-在父元素中触发-，代码如下：" class="headerlink" title="如果插槽传递的数据为引用类型(如：对象)，父组件还可以对它进行修改，父元素也可以往插槽内的元素绑定事件(在父元素中触发)，代码如下："></a>如果插槽传递的数据为引用类型(如：对象)，父组件还可以对它进行修改，父元素也可以往插槽内的元素绑定事件(在父元素中触发)，代码如下：</h5><p>子组件<code>&lt;son&gt;</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">        &lt;slot :user=&quot;userInfo&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            userInfo:&#123;username:&#x27;zhangs&#x27;,userage:18&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>父组件<code>&lt;father&gt;</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;son&gt;</span><br><span class="line">    	&lt;template v-slot:default=&quot;&#123; user &#125;&quot;&gt;</span><br><span class="line">                  </span><br><span class="line">            &lt;button @click=&quot;getDataFromSon(user)&quot;&gt;&lt;/button&gt;</span><br><span class="line">          </span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/son&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        getDataFromSon(obj)&#123;</span><br><span class="line">          //可以修改子组件的引用类型数据，但只限于该子组件，对其他组件没有影响</span><br><span class="line">          this.$set(obj,&#x27;username&#x27;,&#x27;lisi&#x27;)	//使用this.$set修改为响应式</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><p>在vue中，v-slot和v-on、v-bind类似，v-slot也有简写，用#代替v-slot。例如：v-slot:header简写成 # header</p>
<p><strong style="color:orange">值得注意：当你使用template和v-slot声明某个插槽后，就不能再重复声明了，以下情况就会报错</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;date&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;date&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="怎样使用slot"><a href="#怎样使用slot" class="headerlink" title="怎样使用slot"></a>怎样使用slot</h3><p>假设我要制作的一个回复框组件，作者的回复框和其他人的回复框有些内容或功能不一样（如下图：第一个个为作者回复框，第二个为其他人的回复框），像这种情况就可以使用插槽</p>
<p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-46815145-4025-4297-9365-6737b841ffe5/95f83e18-2a57-4b85-a5bb-bebcffffbf93.png" alt="tupian1"></p>
<p>子组件UseSlot代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topic-post&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;avatar-box&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://shadow.elemecdn.com/app/element/hamburger.9cf7b091-55e9-11e9-a976-7f4d0b07eef6.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topic-body&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;userInfo.username&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  </span><br><span class="line">                  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>	<span class="comment">&lt;!-- 默认插槽显示所有人共有的内容或功能 --&gt;</span></span><br><span class="line">                  </span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">p</span>&gt;</span>请教一下大家，有谁知道像vue官方文档，或者elementUI在线文档是怎么做出来的吗<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              </span><br><span class="line">              <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>	<span class="comment">&lt;!-- 具名插槽只显示作者的内容或功能 --&gt;</span></span><br><span class="line">              </span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>父组件App.vue代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 制作回复框组件，作者的回复框和别人的回复框不一样(使用slot) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">UseSlot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;date&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:author</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-menu&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">button</span> &gt;</span>回复<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;actions&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">button</span>&gt;</span>点赞<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">button</span>&gt;</span>分享<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">UseSlot</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">UseSlot</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>⬇<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">UseSlot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>编写vue3插件,实现一个全局满屏loading</title>
    <url>/2023/03/05/vue3%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<blockquote>
<p>插件 (Plugins) 是一种能为 Vue 添加全局功能的工具代码。</p>
</blockquote>
<p>插件没有严格定义的使用范围，app.use(xxx)就是在使用插件了。</p>
<p>官方已经为我们总结出来了，插件发挥作用的常见场景主要包括以下几种：</p>
<ul>
<li>通过<code>app.component()</code>和<code>app.directive()</code>注册一到多个全局组件或自定义指令。</li>
<li>通过<code>app.provide()</code>使一个资源可被注入进整个应用</li>
<li>向<code>app.config.globalProperties</code>中添加一些全局实例属性或方法</li>
</ul>
<p>常见并且为我们熟悉插件的有：<code>app.use(router)</code>，<code>app.use(pinia)</code>。</p>
<p>像element-plus中的<strong>loading</strong>全屏加载和<strong>message</strong>消息提示，都可封装为一个插件来使用。下面我将使用插件的方式，封装一个类似于element-plus中的Loading全屏加载插件。这个插件可以在多处地方使用，像页面加载、数据加载、用户操作等待响应这三种场景，我们都可以使用这个loading插件来提高用户体验。</p>
<h3 id="Loading插件代码实现"><a href="#Loading插件代码实现" class="headerlink" title="Loading插件代码实现"></a>Loading插件代码实现</h3><p>首先在src目录的components下的目录新建Loading.vue和Loaidng.js两个文件。</p>
<p>Loading.vue为一个组件，里面放置loading效果实现，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 遮罩效果 --&gt;</span><br><span class="line">  &lt;div class=&quot;cover&quot; v-if=&quot;showCover&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;loader-3&quot;&gt;Load&amp;nbsp;ng&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, reactive &#125; from &quot;vue&quot;;</span><br><span class="line">//showCover为响应式,可以被组件watch监听</span><br><span class="line">const showCover = ref(false);</span><br><span class="line">//控制显示</span><br><span class="line">const handlerShow = () =&gt; showCover.value = true;</span><br><span class="line">//控制隐藏</span><br><span class="line">const handlerHide = () =&gt; showCover.value = false;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">//将变量或方法抛出，使外界可访问</span><br><span class="line">defineExpose(&#123;</span><br><span class="line">  showCover,</span><br><span class="line">  handlerHide,</span><br><span class="line">  handlerShow,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.cover &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  top: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  background: rgba(0, 0, 0, 0.4);</span><br><span class="line">  z-index: 9;</span><br><span class="line">  display: flex;</span><br><span class="line">  align-items: center;</span><br><span class="line">  justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line">.loader-3 &#123;</span><br><span class="line">  color: #42b983;</span><br><span class="line">  position: relative;</span><br><span class="line">  font-family: Arial, Helvetica, sans-serif;</span><br><span class="line">  font-size: 48px;</span><br><span class="line">  /* letter-spacing: 48px; */</span><br><span class="line">  letter-spacing: 4px;</span><br><span class="line">  top: -50px;</span><br><span class="line">  /* font-weight: bold; */</span><br><span class="line">&#125;</span><br><span class="line">.loader-3::before &#123;</span><br><span class="line">  content: &quot;&quot;;</span><br><span class="line">  position: absolute;</span><br><span class="line">  right: 70px;</span><br><span class="line">  bottom: 10px;</span><br><span class="line">  height: 28px;</span><br><span class="line">  width: 5.15px;</span><br><span class="line">  background: currentColor;</span><br><span class="line">  animation: loaderL 1s linear infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line">.loader-3::after &#123;</span><br><span class="line">  content: &quot;&quot;;</span><br><span class="line">  width: 10px;</span><br><span class="line">  height: 10px;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 125px;</span><br><span class="line">  top: 2px;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  background: #42b983;</span><br><span class="line">  animation: animloader113 1s linear infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes loaderL &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    box-shadow: 0 -6px, -122.9px -8px;</span><br><span class="line">  &#125;</span><br><span class="line">  25%,</span><br><span class="line">  75% &#123;</span><br><span class="line">    box-shadow: 0 0px, -122.9px -8px;</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    box-shadow: 0 0px, -122.9px -16px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes animloader113 &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: translate(0px, 0px) scaleX(1);</span><br><span class="line">  &#125;</span><br><span class="line">  14% &#123;</span><br><span class="line">    transform: translate(-12px, -16px) scaleX(1.05);</span><br><span class="line">  &#125;</span><br><span class="line">  28% &#123;</span><br><span class="line">    transform: translate(-27px, -28px) scaleX(1.07);</span><br><span class="line">  &#125;</span><br><span class="line">  42% &#123;</span><br><span class="line">    transform: translate(-46px, -35px) scaleX(1.1);</span><br><span class="line">  &#125;</span><br><span class="line">  57% &#123;</span><br><span class="line">    transform: translate(-70px, -37px) scaleX(1.1);</span><br><span class="line">  &#125;</span><br><span class="line">  71% &#123;</span><br><span class="line">    transform: translate(-94px, -32px) scaleX(1.07);</span><br><span class="line">  &#125;</span><br><span class="line">  85% &#123;</span><br><span class="line">    transform: translate(-111px, -22px) scaleX(1.05);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: translate(-125px, -9px) scaleX(1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>然后在Loading.js中导入Loading组件，注册组件，代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Loading</span> <span class="keyword">from</span> <span class="string">&#x27;./Loading.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createVNode, render &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导出对象，对象里面必须要有install方法，才能使用app.use()</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">//插件访问</span></span><br><span class="line">    <span class="title function_">install</span>(<span class="params">app</span>) &#123;</span><br><span class="line">        <span class="comment">//创建虚拟dom</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title class_">Vnode</span> = <span class="title function_">createVNode</span>(<span class="title class_">Loading</span>)</span><br><span class="line">        <span class="comment">//将loading挂载在body下，不可将其挂载在vue组件内，因为loading注册时，vue组件还没挂载到dom上</span></span><br><span class="line">        <span class="title function_">render</span>(<span class="title class_">Vnode</span>, <span class="variable language_">document</span>.<span class="property">body</span>)</span><br><span class="line">        <span class="comment">//添加一个可以在任意组件中访问的全局property，$loading可以调用loading暴露出来的方法或变量</span></span><br><span class="line">        app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$loading</span> = &#123;</span><br><span class="line">            <span class="attr">show</span>: <span class="title class_">Vnode</span>.<span class="property">component</span>.<span class="property">exposed</span>.<span class="property">handlerShow</span>,</span><br><span class="line">            <span class="attr">hide</span>: <span class="title class_">Vnode</span>.<span class="property">component</span>.<span class="property">exposed</span>.<span class="property">handlerHide</span>,</span><br><span class="line">            <span class="attr">showCover</span>: <span class="title class_">Vnode</span>.<span class="property">component</span>.<span class="property">exposed</span>.<span class="property">showCover</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//函数访问</span></span><br><span class="line">    <span class="comment">//如果是使用函数访问且需要新建Dom元素进行挂载，</span></span><br><span class="line">    <span class="comment">//必须将loading设置为单例，否则每次触发都会新建Dom元素</span></span><br><span class="line">    <span class="comment">//如果直接挂载到body上，即：render(vm, document.body);无需设置单例</span></span><br><span class="line">    <span class="attr">singleton</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="title function_">service</span>(<span class="params">&#123; isShow = <span class="literal">false</span> &#125;</span>) &#123;</span><br><span class="line">        <span class="comment">//如果该实例存在，就调用对应方法并返回，避免再创建新的div</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">singleton</span>) <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">singleton</span>.<span class="title function_">show</span>() &amp;&amp; <span class="variable language_">this</span>.<span class="property">singleton</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="comment">//创建一个div</span></span><br><span class="line">        <span class="keyword">let</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> vm = <span class="title function_">createVNode</span>(<span class="title class_">Loading</span>)</span><br><span class="line">        <span class="comment">//渲染组件到container上</span></span><br><span class="line">        <span class="title function_">render</span>(vm, container);</span><br><span class="line">        <span class="comment">//添加container到body</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(container);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让singleton访问组件方法或属性</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">singleton</span> = &#123;</span><br><span class="line">            <span class="attr">show</span>: vm.<span class="property">component</span>.<span class="property">exposed</span>.<span class="property">handlerShow</span>,</span><br><span class="line">            <span class="attr">hide</span>: vm.<span class="property">component</span>.<span class="property">exposed</span>.<span class="property">handlerHide</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isShow) <span class="variable language_">this</span>.<span class="property">singleton</span>.<span class="title function_">show</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">singleton</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//组件内访问(插件)</span></span><br><span class="line">    <span class="comment">// ...$loading.show();</span></span><br><span class="line">    <span class="comment">// ...$loading.hide()</span></span><br><span class="line">    <span class="comment">//函数访问，可以在axios拦截器中使用</span></span><br><span class="line">    <span class="comment">/*例：</span></span><br><span class="line"><span class="comment">        import Loading from &#x27;./components/Loading.js&#x27;</span></span><br><span class="line"><span class="comment">        //触发loading加载</span></span><br><span class="line"><span class="comment">          let instance =  Loading.service(&#123;isShow:true&#125;)</span></span><br><span class="line"><span class="comment">          //5秒后关闭loading</span></span><br><span class="line"><span class="comment">          setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">            instance.hide()</span></span><br><span class="line"><span class="comment">          &#125;, 5000);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要想使用这个插件，还需要到main.js中use一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Loading</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Loading.js&#x27;</span></span><br><span class="line">...</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">Loading</span>)</span><br></pre></td></tr></table></figure>

<p>在App.vue中通过点击按钮触发loading效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;handlerShowLoading&quot;&gt;触发loading&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, getCurrentInstance, watch &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">//getCurrentInstance为组件实例，全局属性都会被挂载到实例上，通过proxy可以访问到全局属性</span><br><span class="line">const &#123; proxy &#125; = getCurrentInstance();</span><br><span class="line"></span><br><span class="line">const handlerShowLoading = () =&gt; &#123;</span><br><span class="line">  //触发loading加载</span><br><span class="line">  proxy.$loading.show();</span><br><span class="line">  //5秒后关闭loading</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    proxy.$loading.hide();</span><br><span class="line">  &#125;, 5000);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//使用watch可以监听loading暴露的响应式变量</span><br><span class="line">watch(</span><br><span class="line">  () =&gt; proxy.$loading.showCover.value,</span><br><span class="line">  (newVal, oldVal) =&gt; &#123;</span><br><span class="line">    console.log(newVal);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>最终效果图如下：</p>
<p><img src="/images/loading%E6%BC%94%E7%A4%BA.gif" alt="loading演示"></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>全面解析JavaScript中的this</title>
    <url>/2022/10/29/%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84this/</url>
    <content><![CDATA[<p>在写这篇文章时，我不知道还有多少人还没有理解JavaScript中的this。this究竟指向哪里？这个问题一直困扰着我。</p>
<h3 id="对this的误解"><a href="#对this的误解" class="headerlink" title="对this的误解"></a>对this的误解</h3><p><strong>指向自身</strong>：this并不像我们所想的那样指向函数本身</p>
<p>通过下面代码，我们想要记录一下foo被调用的次数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo: &quot;</span> + num);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录foo被调用的次数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="title function_">foo</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// foo: 6</span></span><br><span class="line"><span class="comment">// foo: 7</span></span><br><span class="line"><span class="comment">// foo: 8</span></span><br><span class="line"><span class="comment">// foo: 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// foo被调用了多少次？</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">count</span>); <span class="comment">// 0 -- 什么？！</span></span><br></pre></td></tr></table></figure>

<p>从上述代码结果中得出：foo(…)确实被调用了4次，但foo.count仍然是0，这又是为什么呢？</p>
<p>在执行<code>foo.count = 0</code>时，的确向函数对象foo添加了一个count属性，但在函数内部代码<code>this.count++</code>中的this并不是指向那个函数对象，在这里我可以明确的告诉你，<code>this.count++</code>这行代码应该这样理解：在无意中创建了一个全局变量count，然后将一个没初始化的count变量进行运算，所以得到的结果就是<code>Nan</code>。如果你想深入探究的话，继续看下去，你自己就能得出答案。</p>
<p><strong>指向函数的作用域</strong>：一般来说，this在任何情况下都不指向函数的词法作用域</p>
<p>通过下面代码，使用this来隐式引用函数的词法作用域</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">bar</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure>

<p>首先，这段代码试图通过<code>this.bar()</code>来引用bar()函数，如果说this指向foo函数的作用域，而在foo函数作用域内并不存在bar函数，那么执行<code>this.bar()</code>就应该报错了，但是没有报错，代码继续往下执行，则证明this不指向foo函数的作用域。</p>
<p>此外，在执行<code>this.bar()</code>时，控制台输出的<code>this.a</code>结果为undefined，更加证明了this并不指向foo函数的作用域，因为this指向的是foo函数的作用域，那么输出的<code>this.a</code>结果应该为2</p>
<h3 id="this到底是什么"><a href="#this到底是什么" class="headerlink" title="this到底是什么"></a>this到底是什么</h3><p>this是在运行时进行绑定的，并不是在编写时绑定，它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。当一个函数被调用时，会创建一个活动记录（有时候也称为执行上下文）。这个记录会包含函数在哪里被调用（调用栈）、函数的调用方式、传入的参数等信息。this就是这个记录的一个属性，会在函数执行的过程中用到。</p>
<blockquote>
<p>学习this的第一步是明白this既不指向函数自身也不指向函数的词法作用域，this实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用、怎么被调用。</p>
</blockquote>
<h3 id="this绑定规则"><a href="#this绑定规则" class="headerlink" title="this绑定规则"></a>this绑定规则</h3><p>要搞清除this是什么，你必须找到函数调用位置，然后判断需要应用下面四条规则中的哪一条。我们首先会分别解释这四条规则，然后解释多条规则都可用时它们的优先级如何排列。</p>
<ol>
<li><p>默认绑定</p>
<p>这最常用的函数调用类型：独立函数调用。可以把这条规则看作是无法应用其他规则时的默认规则。</p>
<p>思考一下下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="title function_">foo</span>();	<span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<p>代码的执行结果是在控制台输出2，也就是说调用foo()时，this.a被解析成了全局变量a。为什么？因为在本例中，函数调用时应用了this的默认绑定，因此this指向全局对象。</p>
<p>那么我们怎么知道这里应用了默认绑定呢？可以通过分析调用位置来看看foo()是如何调用的。在代码中，foo()是直接使用不带任何修饰的函数引用进行调用的，因此只能使用默认绑定，无法应用其他规则。</p>
</li>
<li><p>隐式绑定</p>
<p>这条规则是要考虑调用位置是否有上下文对象，或者说是否被某个对象拥有或者包含。</p>
<p>思考下面代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">foo</span>: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>首先需要注意的是foo()的声明方式，及其之后是如何被当作引用属性添加到obj中的。但是无论是直接在obj中定义还是先定义再添加为引用属性，这个函数严格来说都不属于obj对象。然而，调用位置会使用obj上下文来引用函数，因此你可以说函数被调用时obj对象“拥有”或者“包含”它。无论你如何称呼这个模式，当foo()被调用时，它的前面确实加上了对obj的引用。</p>
<p>当函数引用有上下文对象时，隐式绑定规则会把函数调用中的this绑定到这个上下文对象。因为调用foo()时this被绑定到obj，因此this.a和obj.a是一样的。</p>
<p><strong style="color:orange">值得注意：对象属性引用链中只有上一层或者说最后在调用位置中起作用，举例来说:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">42</span>,</span><br><span class="line">    <span class="attr">foo</span>: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">obj2</span>: obj2</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj1.<span class="property">obj2</span>.<span class="title function_">foo</span>(); <span class="comment">// 42</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>显示绑定</p>
<p>我们可以固定this，使用apply，call方法指定this。这两个方法是如何工作的呢？它们的第一个参数是一个对象，是给this准备的，接着在调用函数时将其绑定到this。因为你可以直接指定this的绑定对象，因此我们称之为显式绑定。</p>
<p>思考下面的代码:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">call</span>(obj); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>通过foo.call(..)，我们可以在调用foo时强制把它的this绑定到obj上。</p>
<p>使用bind方法实现<strong>硬绑定</strong>，它的用法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">something</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>, something);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + something;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = foo.<span class="title function_">bind</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">bar</span>(<span class="number">3</span>); <span class="comment">// 2 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<p>bind(..)会返回一个硬编码的新函数，它会把你指定的参数设置为this的上下文并调用原始函数。</p>
</li>
<li><p>new 绑定</p>
<p>使用new来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。</p>
<ul>
<li>创建一个全新的对象</li>
<li>这个新对象会被执行[[prototype]]连接</li>
<li>这个新对象会绑定到函数调用的this</li>
<li>如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。</li>
</ul>
<p>我们现在关心的是第1步、第3步、第4步，暂时忽略第2步</p>
<p>思考下面代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> <span class="title function_">foo</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="property">a</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>使用new来调用foo(..)时，我们会构造一个新对象并把它绑定到foo(..)调用中的this上。new是最后一种可以影响函数调用时this绑定行为的方法，我们称之为new绑定。</p>
</li>
</ol>
<h3 id="绑定规则的优先级"><a href="#绑定规则的优先级" class="headerlink" title="绑定规则的优先级"></a>绑定规则的优先级</h3><p>现在我们已经了解了函数调用中this绑定的四条规则，你需要做的就是找到函数的调用位置并判断应当应用哪条规则。但是，如果某个调用位置可以应用多条规则该怎么办？为了解决这个问题就必须给这些规则设定优先级，这就是我们接下来要介绍的内容。</p>
<p>毫无疑问，默认绑定的优先级是四条规则中最低的，所以我们可以先不考虑它。</p>
<p>隐式绑定和显式绑定哪个优先级更高？我们来测试一下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">foo</span>: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">foo</span>: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj1.<span class="title function_">foo</span>(); <span class="comment">// 2</span></span><br><span class="line">obj2.<span class="title function_">foo</span>(); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">obj1.<span class="property">foo</span>.<span class="title function_">call</span>(obj2); <span class="comment">// 3</span></span><br><span class="line">obj2.<span class="property">foo</span>.<span class="title function_">call</span>(obj1); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>可以看到，显式绑定优先级更高，也就是说在判断时应当先考虑是否可以存在显式绑定。</p>
<p>现在我们需要搞清楚new绑定和隐式绑定的优先级谁高谁低：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">something</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = something;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">foo</span>: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">obj1.<span class="title function_">foo</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">a</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">obj1.<span class="property">foo</span>.<span class="title function_">call</span>(obj2, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">a</span>); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> obj1.<span class="title function_">foo</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">a</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="property">a</span>); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<p>可以看到new绑定比隐式绑定优先级高。但是new绑定和显式绑定谁的优先级更高呢？</p>
<p>看一下下面代码:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">something</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = something;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = foo.<span class="property">bind</span> (obj1);</span><br><span class="line"><span class="title function_">bar</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">a</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> baz = <span class="keyword">new</span> <span class="title function_">bar</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">a</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(baz.<span class="property">a</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>出乎意料！bar被硬绑定到obj1上，但是new bar(3)并没有像我们预计的那样把obj1.a修改为3。相反，new修改了硬绑定（到obj1的）调用bar(..)中的this。因为使用了new绑定，我们得到了一个名字为baz的新对象，并且baz.a的值是3。</p>
<h3 id="判断this"><a href="#判断this" class="headerlink" title="判断this"></a>判断this</h3><p>现在我们可以根据优先级来判断函数在某个调用位置应用的是哪条规则。可以按照下面的顺序来进行判断：</p>
<ol>
<li>函数是否在new中调用（new绑定）？如果是的话this绑定的是新创建的对象。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> <span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>函数是否通过call、apply（显式绑定）或者硬绑定调用？如果是的话，this绑定的是指定的对象。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = foo.<span class="title function_">call</span>(obj2)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，this绑定的是那个上下文对象。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = obj1.<span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到undefined，否则绑定到全局对象。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure>

<p>就是这样。对于正常的函数调用来说，理解了这些知识你就可以明白this的绑定原理了。不过……凡事总有<strong style="color:red">例外</strong>。</p>
<p>例如：call、apply指定的对象为<code>null</code>，箭头函数。</p>
<p>如果你把null或者undefined作为this的绑定对象传入call、apply或者bind，这些值在调用时会被忽略，实际应用的是默认绑定规则：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="literal">null</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h3 id="箭头函数中的this"><a href="#箭头函数中的this" class="headerlink" title="箭头函数中的this"></a>箭头函数中的this</h3><p>箭头函数并不是使用function关键字定义的。箭头函数不使用this的四种标准规则，而是根据外层（函数或者全局）作用域来决定this。</p>
<p>看看箭头函数绑定的this</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 返回一个箭头函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//this继承自foo()</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = foo.<span class="title function_">call</span>(obj1);</span><br><span class="line">bar.<span class="title function_">call</span>(obj2); <span class="comment">// 2, 不是3！</span></span><br></pre></td></tr></table></figure>

<p>foo()内部创建的箭头函数会捕获调用时foo()的this。由于foo()的this绑定到obj1, bar（引用箭头函数）的this也会绑定到obj1，箭头函数的绑定无法被修改。（new也不行！）</p>
<p>最后，上面代码大多借鉴《你不知道的JavaScript上卷》,里面关于this指向问题说的很清楚，大家可以去看一下。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之单例模式</title>
    <url>/2023/02/21/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>单例模式的定义是：保证一个类仅有一个实例，并提供一个访问它的全局访问点。也可以这样认为，单例只是全局的一个别称。</p>
<h3 id="透明的单例模式"><a href="#透明的单例模式" class="headerlink" title="透明的单例模式"></a>透明的单例模式</h3><p>透明的单例模式：下面，我们将使用CreateDiv单例类，它的作用是负责在页面中创建唯一的div节点</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreateDiv</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="attr">instance</span>:<span class="title class_">CreateDiv</span></span><br><span class="line">    <span class="comment">//设置constructor为private，即保护类外部不能直接new一个实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> html:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="comment">//创建div</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个static方法，static的作用是把这个方法直接挂载到类上，</span></span><br><span class="line">    <span class="comment">//可以直接通过CreateDiv.createDivInstance()来调用，而无需new一个实例对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">createDivInstance</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//在createDivInstance中进行判断，如果this.instance为undefined，就new一个实例，</span></span><br><span class="line">        <span class="comment">//否则直接返回，这就保证这个CreateDiv类只有一个实例</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">instance</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">CreateDiv</span>(<span class="string">&#x27;a div&#x27;</span>)  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">instance</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//内部创建div方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">init</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">        div.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">html</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">CreateDiv</span>.<span class="title function_">createDivInstance</span>()</span><br><span class="line"><span class="keyword">let</span> b = <span class="title class_">CreateDiv</span>.<span class="title function_">createDivInstance</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a===b)	<span class="comment">//控制台输出：true</span></span><br></pre></td></tr></table></figure>

<h3 id="代理单例模式"><a href="#代理单例模式" class="headerlink" title="代理单例模式"></a>代理单例模式</h3><p>在上段代码中，CreateDiv类实际上负责了两件事情。<br>第一：创建对象和初始化init方法；第二：保证只有一个对象<br>这不符合“单一职责原则”的概念，假如我们某天需要利用这个类，在页面中创建千千万万的div，即要让这个类从单例类变成一个普通的可产生多个实例的类，那我们必须得改写CreateDiv构造函数，把控制创建唯一对象的那一段去掉，这种修改会给我们带来不必要的烦恼。<br>现在我们通过引入代理类的方式，来解决上面提到的问题</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreateDiv</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> html: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">        div.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">html</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//引入代理类proxySingletonCreateDiv</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxySingletonCreateDiv</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="attr">instance</span>: <span class="title class_">CreateDiv</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">getInstance</span>(<span class="params">text: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">CreateDiv</span>(text)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">instance</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CreateDiv 就变成了一个普通的类，它跟 proxySingletonCreateDiv 组合起来可以达到单例模式的效果。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="title class_">ProxySingletonCreateDiv</span>.<span class="title function_">getInstance</span>(<span class="string">&#x27;diva&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> b = <span class="title class_">ProxySingletonCreateDiv</span>.<span class="title function_">getInstance</span>(<span class="string">&#x27;divb&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == b) <span class="comment">//控制台输出true</span></span><br></pre></td></tr></table></figure>

<h3 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h3><p>惰性单例：是在需要的时候才创建对象实例。</p>
<p>实际上在文章开头就使用过这种技术，instance实例对象总是在我们调用CreateDiv.createDivInstance时候才被创建，上述都是基于”类“的单例模式，这在javascript中并不适用，我们应该使用函数+闭包的方式实现惰性单例。</p>
<p>下面以网页中的登录弹窗为例：<br>首先在用户进入网页时：如果登录弹窗一开始就被创建好，在用户只浏览不进行登录的情况下，这样会白白浪费一些DOM节点，只有用户点击登录按钮时才开始创建该弹窗；</p>
<p>还有就是该弹窗在页面是唯一的，不可能出现同时存在两个登录窗口的情况。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&lt;button id=&quot;loginBtn&quot;&gt;登录&lt;/button&gt;</span></span><br><span class="line"><span class="keyword">let</span> createLoginLayer = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">div</span>:<span class="title class_">HTMLDivElement</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!div)&#123;</span><br><span class="line">            div=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">            div.<span class="property">innerHTML</span> = <span class="string">&#x27;我是登录弹窗&#x27;</span></span><br><span class="line">            div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> div</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;loginBtn&#x27;</span>)</span><br><span class="line">btn?.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> loginLayer = <span class="title function_">createLoginLayer</span>();</span><br><span class="line">    loginLayer.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之发布订阅模式</title>
    <url>/2023/01/13/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>发布-订阅或观察者模式：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。</p>
<p><strong>介绍</strong>：<strong style="color:orange;">在<a href="https://link.juejin.cn/?target=https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84">软件架构</a>中，发布-订阅模式是一种<a href="https://link.juejin.cn/?target=https://zh.wikipedia.org/wiki/%E6%B6%88%E6%81%AF">消息</a><a href="https://link.juejin.cn/?target=https://zh.wikipedia.org/wiki/%E8%8C%83%E5%BC%8F">范式</a>，消息的发送者（称为发布者）<strong>不会将消息直接发送给特定的接收者</strong>（称为订阅者）。而是将发布的消息分为不同的类别，无需了解哪些订阅者（如果有的话）可能存在。同样的，订阅者可以表达对一个或多个类别的兴趣，只接收感兴趣的消息，无需了解哪些发布者（如果有的话）存在。</strong></p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>假设小明要买房，小明未必要亲自去售楼处了解具体情况，只需要把订阅的请求交给中介公司，而各大房产公司也只需要通过中介公司来发布房子信息，这样小明就可以收到发布者发布的信息。在整个过程中，小明（订阅者）与房产公司（发布者）通信是通过中介公司完成的，不用关心是谁订阅、也不需要知道谁发布。像这种情况就可以使用发布-订阅模式</p>
<p>发布-订阅模式可以用一个全局的Event对象（如：中介公司）来实现，订阅者不需要了解消息来自哪个发布者，发布者也不知道消息会推送给哪些订阅者，Event作为一个类似“中介者”的角色，把订阅者和发布者联系起来</p>
<p>具体代码如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ISubscriber</span>&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">eventName</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">callback</span>:<span class="function">(<span class="params">info:<span class="built_in">string</span></span>)=&gt;</span><span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IPublisher</span>&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">message</span>:<span class="built_in">string</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//订阅者类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subscriber</span> <span class="keyword">implements</span> <span class="title class_">ISubscriber</span>&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;    <span class="comment">//订阅者名称</span></span><br><span class="line">    <span class="attr">eventName</span>:<span class="built_in">string</span>;   <span class="comment">//订阅者事件</span></span><br><span class="line">    <span class="attr">callback</span>:<span class="function">(<span class="params">info?:<span class="built_in">string</span></span>)=&gt;</span><span class="built_in">void</span>; <span class="comment">//发布后的操作</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span>,eventName:<span class="built_in">string</span>,callback:(info?:<span class="built_in">string</span>)=&gt;<span class="built_in">void</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">eventName</span> = eventName;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">callback</span> = callback</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发布者类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Publisher</span> <span class="keyword">implements</span> <span class="title class_">IPublisher</span>&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;    <span class="comment">//发布的事件名</span></span><br><span class="line">    <span class="attr">data</span>:&#123;<span class="attr">message</span>:<span class="built_in">string</span>&#125;;  <span class="comment">//发布的数据</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span>,data:&#123;message:<span class="built_in">string</span>&#125;</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span> = data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//事件总线</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventBus</span>&#123;</span><br><span class="line">    <span class="attr">subscribeList</span>:<span class="built_in">any</span> = &#123;&#125;      <span class="comment">//缓存对象：每个事件都是一个数组，数组里面保存订阅对象信息</span></span><br><span class="line">    <span class="comment">//添加</span></span><br><span class="line">    <span class="title function_">on</span>(<span class="params">subObj:ISubscriber</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`开始订阅<span class="subst">$&#123;subObj.eventName&#125;</span>事件`</span>,subObj.<span class="property">name</span>)</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">subscribeList</span>[subObj.<span class="property">eventName</span>])&#123;     <span class="comment">//如果不存在就新增一个数组进行缓存</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">subscribeList</span>[subObj.<span class="property">eventName</span>] = []</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscribeList</span>[subObj.<span class="property">eventName</span>].<span class="title function_">push</span>(&#123;<span class="attr">name</span>:subObj.<span class="property">name</span>,<span class="attr">callback</span>:subObj.<span class="property">callback</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//触发</span></span><br><span class="line">    <span class="title function_">emit</span>(<span class="params">pubObj:IPublisher</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;正在触发&#x27;</span>,pubObj.<span class="property">name</span>);   <span class="comment">//发布消息后触发对应的订阅者</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscribeList</span>[pubObj.<span class="property">name</span>].<span class="title function_">forEach</span>(<span class="function">(<span class="params">item:<span class="built_in">any</span></span>)=&gt;</span>&#123;</span><br><span class="line">            item.<span class="title function_">callback</span>(pubObj.<span class="property">data</span>.<span class="property">message</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取消</span></span><br><span class="line">    <span class="title function_">off</span>(<span class="params">eventName:<span class="built_in">string</span>,obj:ISubscriber</span>)&#123;       <span class="comment">//取消订阅者订阅</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`*****正在取消<span class="subst">$&#123;eventName&#125;</span>*****`</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscribeList</span>[eventName] = <span class="variable language_">this</span>.<span class="property">subscribeList</span>[eventName].<span class="title function_">filter</span>(<span class="function">(<span class="params">item:<span class="built_in">any</span></span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> item.<span class="property">name</span>!=obj.<span class="property">name</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xiaoming = <span class="keyword">new</span> <span class="title class_">Subscriber</span>(<span class="string">&#x27;xiaoming&#x27;</span>,<span class="string">&#x27;squareMeter100&#x27;</span>,<span class="function">(<span class="params">info</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;xiaoming订阅了squareMeter100事件&#x27;</span>,info!)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> haha = <span class="keyword">new</span> <span class="title class_">Subscriber</span>(<span class="string">&#x27;qingzi&#x27;</span>,<span class="string">&#x27;squareMeter100&#x27;</span>,<span class="function">(<span class="params">info</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;qingzi订阅了squareMeter100事件&#x27;</span>,info)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> xbb = <span class="keyword">new</span> <span class="title class_">Subscriber</span>(<span class="string">&#x27;xbb&#x27;</span>,<span class="string">&#x27;squareMeter300&#x27;</span>,<span class="function">(<span class="params">info</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;xbb订阅了squareMeter300该事件&#x27;</span>,info)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> eventbus = <span class="keyword">new</span> <span class="title class_">EventBus</span>()</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Publisher</span>(<span class="string">&#x27;squareMeter100&#x27;</span>,&#123;<span class="attr">message</span>:<span class="string">&#x27;100平米的房子&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Publisher</span>(<span class="string">&#x27;squareMeter300&#x27;</span>,&#123;<span class="attr">message</span>:<span class="string">&#x27;300平米的大房子&#x27;</span>&#125;)</span><br><span class="line">eventbus.<span class="title function_">on</span>(xiaoming);</span><br><span class="line">eventbus.<span class="title function_">on</span>(haha);</span><br><span class="line">eventbus.<span class="title function_">on</span>(xbb);</span><br><span class="line"><span class="comment">//发布“squareMeter100”相关消息</span></span><br><span class="line">eventbus.<span class="title function_">emit</span>(p1);</span><br><span class="line"><span class="comment">//发布“squareMeter300”相关消息</span></span><br><span class="line">eventbus.<span class="title function_">emit</span>(p2);</span><br><span class="line"><span class="comment">//取消小明订阅的squareMeter100事件</span></span><br><span class="line">eventbus.<span class="title function_">off</span>(<span class="string">&#x27;squareMeter100&#x27;</span>,xiaoming);</span><br></pre></td></tr></table></figure>

<p>上述代码中一个订阅者只能订阅一个消息，修改代码，让一个订阅者可订阅多个消息</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个订阅者可订阅多个消息</span></span><br><span class="line"><span class="keyword">type</span> subEventListT = &#123;<span class="attr">eventName</span>:<span class="built_in">string</span>,<span class="attr">callback</span>:<span class="function">(<span class="params">info:<span class="built_in">string</span></span>)=&gt;</span><span class="built_in">void</span>&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ISubscriber</span>&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">subEventList</span>:subEventListT[]</span><br><span class="line">    <span class="attr">addSubEvent</span>:<span class="function">(<span class="params">eventName:<span class="built_in">string</span>,callback:()=&gt;<span class="built_in">void</span></span>)=&gt;</span><span class="built_in">void</span>;</span><br><span class="line">    <span class="attr">offSubEvent</span>:<span class="function">(<span class="params">eventName:<span class="built_in">string</span></span>)=&gt;</span><span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IPublisher</span>&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">message</span>:<span class="built_in">string</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//订阅者类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subscriber</span> <span class="keyword">implements</span> <span class="title class_">ISubscriber</span>&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;    <span class="comment">//订阅者名称</span></span><br><span class="line">    <span class="attr">subEventList</span>:subEventListT[]</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subEventList</span> = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增加订阅事件,可订阅多个</span></span><br><span class="line">    <span class="title function_">addSubEvent</span>(<span class="params">eventName:<span class="built_in">string</span>,callback:(info:<span class="built_in">string</span>)=&gt;<span class="built_in">void</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subEventList</span>.<span class="title function_">push</span>(&#123;<span class="attr">eventName</span>:eventName,<span class="attr">callback</span>:callback&#125;)</span><br><span class="line">        <span class="comment">// console.log(this.subEventList)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取消订阅事件</span></span><br><span class="line">    <span class="title function_">offSubEvent</span>(<span class="params">eventName:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subEventList</span> = <span class="variable language_">this</span>.<span class="property">subEventList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item:subEventListT</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> item.<span class="property">eventName</span>!=eventName</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`已取消<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>的<span class="subst">$&#123;eventName&#125;</span>事件`</span>,<span class="variable language_">this</span>.<span class="property">subEventList</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发布者类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Publisher</span> <span class="keyword">implements</span> <span class="title class_">IPublisher</span>&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;    <span class="comment">//发布的事件名</span></span><br><span class="line">    <span class="attr">data</span>:&#123;<span class="attr">message</span>:<span class="built_in">string</span>&#125;;  <span class="comment">//发布的数据</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span>,data:&#123;message:<span class="built_in">string</span>&#125;</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span> = data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//事件总线</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventBus</span>&#123;</span><br><span class="line">    <span class="attr">subscribeList</span>:<span class="built_in">any</span> = &#123;&#125;      <span class="comment">//缓存对象：每个事件都是一个数组，数组里面保存订阅对象信息</span></span><br><span class="line">    <span class="comment">//添加</span></span><br><span class="line">    <span class="title function_">on</span>(<span class="params">subObj:ISubscriber</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始订阅&#x27;</span>);</span><br><span class="line">        subObj.<span class="property">subEventList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item:subEventListT</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">subscribeList</span>[item.<span class="property">eventName</span>])&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">subscribeList</span>[item.<span class="property">eventName</span>] = []</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//添加一个对象，增加name标识是谁订阅的</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">subscribeList</span>[item.<span class="property">eventName</span>].<span class="title function_">push</span>(&#123;<span class="attr">name</span>:subObj.<span class="property">name</span>,<span class="attr">callback</span>:item.<span class="property">callback</span>&#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// console.log(this.subscribeList)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//触发</span></span><br><span class="line">    <span class="title function_">emit</span>(<span class="params">pubObj:IPublisher</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;正在触发&#x27;</span>,pubObj.<span class="property">name</span>);   <span class="comment">//发布消息后触发对应的订阅者</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscribeList</span>[pubObj.<span class="property">name</span>].<span class="title function_">forEach</span>(<span class="function">(<span class="params">item:<span class="built_in">any</span></span>)=&gt;</span>&#123;</span><br><span class="line">            item.<span class="title function_">callback</span>(pubObj.<span class="property">data</span>.<span class="property">message</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取消</span></span><br><span class="line">    <span class="title function_">off</span>(<span class="params">eventName:<span class="built_in">string</span>,obj:ISubscriber</span>)&#123;       <span class="comment">//取消订阅者订阅</span></span><br><span class="line">        <span class="comment">//通知订阅者取消某事件的订阅</span></span><br><span class="line">        obj.<span class="title function_">offSubEvent</span>(eventName)</span><br><span class="line">        <span class="comment">//取消缓存数组的订阅者信息</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscribeList</span>[eventName] = <span class="variable language_">this</span>.<span class="property">subscribeList</span>[eventName].<span class="title function_">filter</span>(<span class="function">(<span class="params">item:<span class="built_in">any</span></span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> item.<span class="property">name</span>!=obj.<span class="property">name</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">subscribeList</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xiaoming = <span class="keyword">new</span> <span class="title class_">Subscriber</span>(<span class="string">&#x27;xiaoming&#x27;</span>)</span><br><span class="line">xiaoming.<span class="title function_">addSubEvent</span>(<span class="string">&#x27;squareMeter100&#x27;</span>,<span class="function">(<span class="params">info</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;xiaoming添加了squareMeter100订阅&#x27;</span>,info)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">xiaoming.<span class="title function_">addSubEvent</span>(<span class="string">&#x27;squareMeter200&#x27;</span>,<span class="function">(<span class="params">info</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;xiaoming添加了squareMeter200订阅&#x27;</span>,info)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> hehe = <span class="keyword">new</span> <span class="title class_">Subscriber</span>(<span class="string">&#x27;hehe&#x27;</span>);</span><br><span class="line">hehe.<span class="title function_">addSubEvent</span>(<span class="string">&#x27;squareMeter100&#x27;</span>,<span class="function">(<span class="params">info</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hehe也订阅squareMeter100&#x27;</span>,info)</span><br><span class="line">&#125;)</span><br><span class="line">xiaoming.<span class="title function_">addSubEvent</span>(<span class="string">&#x27;squareMeter300&#x27;</span>,<span class="function">(<span class="params">info</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;xiaoming添加了squareMeter300订阅&#x27;</span>,info)</span><br><span class="line">&#125;)</span><br><span class="line">hehe.<span class="title function_">addSubEvent</span>(<span class="string">&#x27;squareMeter300&#x27;</span>,<span class="function">(<span class="params">info</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hehe也订阅squareMeter300&#x27;</span>,info)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> eventbus = <span class="keyword">new</span> <span class="title class_">EventBus</span>()</span><br><span class="line">eventbus.<span class="title function_">on</span>(xiaoming)</span><br><span class="line">eventbus.<span class="title function_">on</span>(hehe)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Publisher</span>(<span class="string">&#x27;squareMeter100&#x27;</span>,&#123;<span class="attr">message</span>:<span class="string">&#x27;100平米的房子&#x27;</span>&#125;)</span><br><span class="line">eventbus.<span class="title function_">emit</span>(p)</span><br><span class="line"></span><br><span class="line">eventbus.<span class="title function_">off</span>(<span class="string">&#x27;squareMeter100&#x27;</span>,xiaoming)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Publisher</span>(<span class="string">&#x27;squareMeter300&#x27;</span>,&#123;<span class="attr">message</span>:<span class="string">&#x27;300平米的大房子&#x27;</span>&#125;);</span><br><span class="line">eventbus.<span class="title function_">emit</span>(p2)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>对一道循环计数题进行解剖</title>
    <url>/2022/11/25/%E5%AF%B9%E4%B8%80%E9%81%93%E5%BE%AA%E7%8E%AF%E8%AE%A1%E6%95%B0%E9%A2%98%E8%BF%9B%E8%A1%8C%E8%A7%A3%E5%89%96/</url>
    <content><![CDATA[<p>题如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//想要效果：在for循环内，使用setTimeout延迟两秒后，依次打印i的值：0，1，2，3，4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码最终的执行结果：延迟2秒后，在控制台中打印了五个5，这并不是我们预期想要的结果</p>
<h3 id="这是为什么呢？进行分析："><a href="#这是为什么呢？进行分析：" class="headerlink" title="这是为什么呢？进行分析："></a>这是为什么呢？进行分析：</h3><ol>
<li><p>这里的var声明不具备块级作用域，变量i被声明为全局变量</p>
</li>
<li><p>这段代码包含了同步代码和异步代码，为什么会产生异步，异步又如何执行</p>
<p><strong style="color:green">首先JS是在单线程的环境下工作的，为了避免某一段JavaScript代码长时间运行，阻塞后面代码执行，导致其他任务无法执行（例如：浏览器无响应、假死），JavaScript将任务的执行模式分成两种：同步和异步</strong></p>
<ul>
<li><blockquote>
<p>同步模式：在主线程（执行栈）排队等待的任务，只能等待前一个完成才会执行完毕后才会执行下一个任务</p>
</blockquote>
</li>
<li><blockquote>
<p>异步模式：不进入主线程而进入”消息队列“的任务（异步任务），会在”消息队列”中排队等待，当主线程中的任务运行完了，才会从”消息队列“取出异步任务放到主线程执行，执行完主线程，又再从”消息队列“取出任务执行，如此反复（这就是常说的eventloop）</p>
</blockquote>
</li>
</ul>
<h5 id="那又怎样才算异步任务，如何区分呢？"><a href="#那又怎样才算异步任务，如何区分呢？" class="headerlink" title="那又怎样才算异步任务，如何区分呢？"></a>那又怎样才算异步任务，如何区分呢？</h5></li>
</ol>
<p>常见的异步任务有：Ajax请求、setTimeout、Promise.then等 （异步任务又细分为宏任务和微任务，这里就不细说了）</p>
<h3 id="那题中的代码执行顺序就可以这样解释："><a href="#那题中的代码执行顺序就可以这样解释：" class="headerlink" title="那题中的代码执行顺序就可以这样解释："></a>那题中的代码执行顺序就可以这样解释：</h3><p>开始进入for循环</p>
<p>在执行for内部时，setTimeout会被认为是异步任务，不会立即执行，而是推到消息队列排队等待，等待主线程的代码（同步代码）执行完后，再从消息队列出列，放到主线程去执行</p>
<p>主线程的代码：执行for循环这一块，当变量i不满足条件跳出循环时，也就是同步代码执行完毕的时候，此时的变量i的值为5</p>
<p>主线程代码执行完后开始执行异步的代码：setTimeout内的箭头函数</p>
<p>在执行箭头函数时，由于它内部并没有声明i变量，就会沿作用域链找，最终在全局作用域下，找到了变量i（i的值已经变为5了），每一次打印变量i时，都是在打印全局作用域下的i，也就是说它们共享同一个i，所以就打印了五个5</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h5 id="一：使用闭包"><a href="#一：使用闭包" class="headerlink" title="一：使用闭包"></a>一：使用闭包</h5><blockquote>
<p>闭包：由函数及声明该函数的词法环境组成，该环境包含了闭包函数创建时作用域内所有的局部变量，闭包维持了对它的词法环境的引用，简而言之，闭包能让我们从内部函数访问到外部函数的作用域</p>
</blockquote>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeFunc</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;zhangs&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">displayName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> displayName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myFunc = <span class="title function_">makeFunc</span>()</span><br><span class="line"><span class="title function_">myFunc</span>()</span><br><span class="line"><span class="comment">//执行结果：控制台打印了“zhangs”</span></span><br></pre></td></tr></table></figure>

<p>makeFunc函数内有一个局部变量name和声明了一个displayName函数，并且makeFunc函数执行时，会返回displayName函数</p>
<p>myFunc就是在makeFunc执行后，接收了它的返回值，一个对displayName函数实例的引用</p>
<p>myFunc方法执行就是在执行displayName方法，那为什么console.log(name)，会输出zhangs呢？</p>
<p>进行分析：<br>按道理来说，makeFunc函数执行完后，它的局部变量name会被销毁才对，然而代码却按照预期执行。<br>原因就在于JavaScript中的函数会形成闭包，displayName就是一个闭包函数，displayName维持了对它的词法环境（变量name就存在其中）的引用，就算makeFunc执行完毕，它的局部变量name也不会被销毁，因为name被displayName引用了。</p>
<p>回到开头的循环计数题，我们就可以用闭包实现我们想要的效果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    </span><br><span class="line">    (<span class="keyword">function</span>(<span class="params">j</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(j)</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">    &#125;)(i)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="二：利用块级作用域（let）"><a href="#二：利用块级作用域（let）" class="headerlink" title="二：利用块级作用域（let）"></a>二：利用块级作用域（let）</h5><p>ES6新增的let具有块级作用域，也可以用它进行循环计数</p>
<blockquote>
<p>值得注意的是：const也具有块级作用域，但它不能用来计数（原因：const i &#x3D; 0，i的值不允许再改变，i相当于常量）</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;	<span class="comment">//此时用let声明的i不会成为全局变量，在外部无法访问到i</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="总结：一道循环计算题涉及了以下知识："><a href="#总结：一道循环计算题涉及了以下知识：" class="headerlink" title="总结：一道循环计算题涉及了以下知识："></a>总结：一道循环计算题涉及了以下知识：</h3><ol>
<li>var、let和const的区别</li>
<li>同步模式、异步模式及异步代码如何执行</li>
<li>闭包</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>对象关联和行为委托</title>
    <url>/2022/10/29/%E5%AF%B9%E8%B1%A1%E5%85%B3%E8%81%94%E5%92%8C%E8%A1%8C%E4%B8%BA%E5%A7%94%E6%89%98/</url>
    <content><![CDATA[<h1 id="对象关联和行为委托"><a href="#对象关联和行为委托" class="headerlink" title="对象关联和行为委托"></a>对象关联和行为委托</h1><h4 id="创建关联"><a href="#创建关联" class="headerlink" title="创建关联"></a>创建关联</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123;</span><br><span class="line">    <span class="attr">something</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Tell me something good...&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="title class_">Object</span>.<span class="title function_">create</span>(foo);	<span class="comment">//Object.create(..)会创建一个新对象（bar）并把它关联到我们指定的对象（foo）</span></span><br><span class="line">bar.<span class="title function_">something</span>()		<span class="comment">//当something不存在bar，会把ta委托给foo</span></span><br></pre></td></tr></table></figure>

<h4 id="利用prototype进行委托"><a href="#利用prototype进行委托" class="headerlink" title="利用prototype进行委托"></a>利用prototype进行委托</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用[[Prototype]]把b1委托给Bar并把Bar委托给Foo，实现了三个对象之间的关联。</span></span><br><span class="line"><span class="title class_">Foo</span> = &#123;</span><br><span class="line">            <span class="attr">init</span>:<span class="keyword">function</span>(<span class="params">who</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">me</span> = who;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">identify</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;I am &quot;</span> + <span class="variable language_">this</span>.<span class="property">me</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Bar</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Foo</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Bar</span>.<span class="property">speak</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;Hello,&quot;</span>+ <span class="variable language_">this</span>.<span class="title function_">identify</span>()+<span class="string">&quot;.&quot;</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> b1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Bar</span>);</span><br><span class="line">        b1.<span class="title function_">init</span>(<span class="string">&quot;b1&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> b2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Bar</span>);</span><br><span class="line">        b2.<span class="title function_">init</span>(<span class="string">&quot;b2&quot;</span>)</span><br><span class="line"></span><br><span class="line">        b1.<span class="title function_">speak</span>();</span><br><span class="line">        b2.<span class="title function_">speak</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>仿ElMessage，自行封装一个全局message消息提醒</title>
    <url>/2023/03/06/%E5%B0%81%E8%A3%85%E5%85%A8%E5%B1%80message%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BA/</url>
    <content><![CDATA[<p>仿照element-plus的message消息提醒，自行封装一个简化版的全局message消息提醒</p>
<p>实现功能：</p>
<ul>
<li>可以选择类型，如success、warning、error</li>
<li>通过vue插件或函数使用</li>
</ul>
<p>但多次触发消息提示，只有一个消息提示框，目前还没实现多次触发弹出多个提示框</p>
<p>实现代码如下:</p>
<p>src&#x2F;components&#x2F;Message&#x2F;index.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- message消息提示 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-if</span>=<span class="string">&quot;showMessage&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">&quot;[</span></span></span><br><span class="line"><span class="string"><span class="tag">      &#x27;message-box&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">      activeClass,</span></span></span><br><span class="line"><span class="string"><span class="tag">      showMessage ? &#x27;message-box-active&#x27; : &#x27;&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">    ]&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;message-body&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span>&gt;</span>&#123;&#123; icon &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>&#123;&#123; messageText &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> showMessage = <span class="title function_">ref</span>(<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> activeClass = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> time = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> messageText = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> icon = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> iconType = &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">success</span>: <span class="string">&quot;√&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">warning</span>: <span class="string">&quot;!&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">error</span>: <span class="string">&quot;×&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">handlerShow</span> = (<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">  type = <span class="string">&quot;success&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">  duration = <span class="number">3000</span>,</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">  text = <span class="string">&quot;消息提示&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">&#125;</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//展示提示框</span></span></span><br><span class="line"><span class="language-javascript">  showMessage.<span class="property">value</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//什么类型的提示框</span></span></span><br><span class="line"><span class="language-javascript">  activeClass.<span class="property">value</span> = type;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//根据类型展示icon</span></span></span><br><span class="line"><span class="language-javascript">    icon.<span class="property">value</span> = iconType[type]</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//提示内容</span></span></span><br><span class="line"><span class="language-javascript">  messageText.<span class="property">value</span> = text;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//持续时间</span></span></span><br><span class="line"><span class="language-javascript">  time.<span class="property">value</span> = duration;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//定时器关闭</span></span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    showMessage.<span class="property">value</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;, time.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//将handlerShow暴露出去</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineExpose</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  handlerShow,</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.message-box</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">z-index</span>: <span class="number">9</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">min-width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ebeef5</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">15px</span> <span class="number">15px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>: opacity <span class="number">0.3s</span>, transform <span class="number">0.4s</span>, top <span class="number">0.4s</span>;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.message-body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.text</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.icon</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    //   <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.message-box-active</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">top</span>: <span class="number">10vh</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.success</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#f0f9eb</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-color</span>: <span class="number">#e1f3d8</span>;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.text</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#52ac25</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.icon</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="number">#52ac25</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.warning</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#fdf6ec</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-color</span>: <span class="number">#faecd8</span>;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.text</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#e6a23c</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.icon</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="number">#e6a23c</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.error</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#fef0f0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-color</span>: <span class="number">#fde2e2</span>;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.text</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#f56c6c</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.icon</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="number">#f56c6c</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>src&#x2F;components&#x2F;Message&#x2F;index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;./index.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createVNode, render &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导出对象，对象里面必须要有install方法，才能使用app.use()</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">//插件访问</span></span><br><span class="line">    <span class="title function_">install</span>(<span class="params">app</span>) &#123;</span><br><span class="line">        <span class="comment">//创建虚拟dom</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title class_">Vnode</span> = <span class="title function_">createVNode</span>(<span class="title class_">Message</span>);</span><br><span class="line">        <span class="comment">//将Message挂载在body下</span></span><br><span class="line">        <span class="title function_">render</span>(<span class="title class_">Vnode</span>, <span class="variable language_">document</span>.<span class="property">body</span>);</span><br><span class="line">        <span class="comment">//添加全局property，供全局访问</span></span><br><span class="line">        app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$message</span> = <span class="title class_">Vnode</span>.<span class="property">component</span>.<span class="property">exposed</span>.<span class="property">handlerShow</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//函数访问</span></span><br><span class="line">    <span class="title function_">service</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">        type = <span class="string">&quot;success&quot;</span>,</span></span><br><span class="line"><span class="params">        duration = <span class="number">3000</span>,</span></span><br><span class="line"><span class="params">        text = <span class="string">&quot;消息提示&quot;</span>,</span></span><br><span class="line"><span class="params">    &#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> vm = <span class="title function_">createVNode</span>(<span class="title class_">Message</span>);</span><br><span class="line">        <span class="comment">//将vm挂载在body下</span></span><br><span class="line">        <span class="title function_">render</span>(vm, <span class="variable language_">document</span>.<span class="property">body</span>);</span><br><span class="line">        <span class="comment">//调用组件</span></span><br><span class="line">        vm.<span class="property">component</span>.<span class="property">exposed</span>.<span class="title function_">handlerShow</span>(&#123;type,duration,text&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在组件中使用(插件)</span></span><br><span class="line">        <span class="comment">// ...$message(&#123;</span></span><br><span class="line">        <span class="comment">//     type:&#x27;success&#x27;,</span></span><br><span class="line">        <span class="comment">//     text:&#x27;成功了&#x27;,</span></span><br><span class="line">        <span class="comment">//     duration:3000</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="comment">//函数使用</span></span><br><span class="line">    <span class="comment">// import Message from &quot;./components/Message&quot;</span></span><br><span class="line">    <span class="comment">// Message.service(&#123;</span></span><br><span class="line">    <span class="comment">//     type:&#x27;success&#x27;,</span></span><br><span class="line">    <span class="comment">//     text:&quot;成功&quot;,</span></span><br><span class="line">    <span class="comment">//     duration:2000</span></span><br><span class="line">    <span class="comment">//   &#125;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>src&#x2F;main.js(如果当作<strong>插件</strong>来使用就需要app.use(…))</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Message&#x27;</span></span><br><span class="line">...</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">Message</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>层叠上下文、层叠水平、层叠顺序与z-index</title>
    <url>/2023/02/10/%E5%B1%82%E5%8F%A0%E4%B8%8Ez-index/</url>
    <content><![CDATA[<p>实现按钮效果：在鼠标移入按钮时，按钮的原背景颜色被左侧移入的新背景颜色覆盖，并且不影响按钮中的文字显示。</p>
<p>如图：</p>
<p><img src="/images/stacking01.png" alt="图1"></p>
<p>在这里我很自然就想到了伪元素before和过渡transition，但在设置z-index又出现了问题，要么移入的新背景没有覆盖原背景，要么按钮的文字被新背景覆盖。我就疑惑，z-index的值不是可以设置层叠关系，大的显示在最前面，小的显示在后面吗？</p>
<p>通过查看别人的博客和《CSS世界》，发现我对层叠关系的理解过于片面，要想正确设置层叠，就必须要理解四点：层叠上下文、层叠水平、层叠顺序与z-index</p>
<h3 id="层叠上下文"><a href="#层叠上下文" class="headerlink" title="层叠上下文"></a>层叠上下文</h3><p>层叠上下文，是HTML中的一个三维的概念。如果一个元素含有层叠上下文，我们可以理解为这个元素在z轴上就“高人一等”。按照我的理解，z轴就是我们正对着屏幕或网页时，穿透所有元素的一条垂直线，众HTML元素按照一定的优先级在z轴上排列。</p>
<p><strong>层叠上下文有如下特性</strong>：</p>
<ul>
<li><p>层叠上下文的层叠水平要比普通元素高。</p>
</li>
<li><p>层叠上下文可以阻断元素的混合模式。</p>
</li>
<li><p>层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的“层叠上下文”。</p>
</li>
<li><p>每个层叠上下文和兄弟元素独立，也就是说，当进行层叠变化或渲染的时候，只需要考虑后代元素。</p>
</li>
<li><p>每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。</p>
</li>
</ul>
<p><strong>层叠上下文的创建</strong>：</p>
<ul>
<li>文档根元素（<code>&lt;html&gt;</code>）；</li>
<li>position值为 <code>absolute</code>（绝对定位）或 <code>relative</code>（相对定位）且z-index值不为 <code>auto</code> 的元素；</li>
<li>position值为 <code>fixed</code>（固定定位）或 <code>sticky</code>（粘滞定位）的元素（沾滞定位适配所有移动设备上的浏览器，但老的桌面浏览器不支持）；</li>
<li>flex容器的子元素，且 z-index 值不为 <code>auto</code>；</li>
<li>grid容器的子元素，且 z-index 值不为 <code>auto</code>；</li>
<li>opacity属性值小于 <code>1</code> 的元素；</li>
<li>更多请查看 [<code>MDN文档</code>](<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context">层叠上下文 - CSS：层叠样式表 | MDN (mozilla.org)</a>)</li>
</ul>
<p><strong>层叠准则</strong>：</p>
<p>（1）谁大谁上：当具有明显的层叠水平标识的时候，如生效的 z-index 属性值，在同一</p>
<p>个层叠上下文领域，层叠水平值大的那一个覆盖小的那一个。</p>
<p>（2）后来居上：当元素的层叠水平一致、层叠顺序相同的时候，在 DOM 流中处于后面的</p>
<p>元素会覆盖前面的元素。</p>
<h3 id="层叠水平"><a href="#层叠水平" class="headerlink" title="层叠水平"></a>层叠水平</h3><p>层叠水平决定了同一个层叠上下文中元素在 <em>z</em> 轴上的显示顺序。所有的元素都有层叠水平，包括层叠上下文元素，也包括普通元素。然而，对普通元素的层叠水平探讨只局限在当前层叠上下文元素中.</p>
<h3 id="层叠顺序"><a href="#层叠顺序" class="headerlink" title="层叠顺序"></a>层叠顺序</h3><p>层叠顺序，表示元素发生层叠时有着特定的垂直显示顺序。</p>
<p>层叠顺序图：</p>
<p><img src="/images/stacking03.png" alt="图3"></p>
<p>一旦普通元素具有层叠上下文，其层叠顺序就会变高。那它的层叠顺序究竟在哪个位置、哪个级别呢？</p>
<p>这里需要分两种情况讨论：</p>
<p>（1）如果层叠上下文元素不依赖 z-index 数值，则其层叠顺序是 z-index:auto，可看成 z:index:0 级别；</p>
<p>（2）如果层叠上下文元素依赖 z-index 数值，则其层叠顺序由 z-index 值决定。</p>
<p>我们都知道定位元素会层叠在普通元素上面，其背后原因就是：元素一旦成为定位元素，其 z-index 就会自动生效，此时其 z-index 就是默认的 auto，也就是0级别，根据上面的层叠顺序表，就会覆盖inline或block或float元素。</p>
<h3 id="例子1：定位元素与层叠上下文"><a href="#例子1：定位元素与层叠上下文" class="headerlink" title="例子1：定位元素与层叠上下文"></a>例子1：定位元素与层叠上下文</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">      <span class="comment">&lt;!--图1--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position:relative; z-index:auto;&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 美女 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;na.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position:absolute; z-index: 2;&quot;</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position:relative; z-index:auto;&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 风景 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img1.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position:relative; z-index: 1;&quot;</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--图2--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position:relative; z-index:0;&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 美女 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;na.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position:absolute; z-index:2;&quot;</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position:relative; z-index:0;&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 风景 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img1.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position:relative; z-index:1;&quot;</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果如下图所示：</p>
<p><img src="/images/stacking02.png" alt="图2"></p>
<p>为什么图1的风景图会被美女图覆盖？为什么图2却是美女图被风景图覆盖？</p>
<p>先对图1进行分析：包含图片的两个兄弟<code>div</code>(z-index：auto)是一个普通的定位元素，于是，里面的两个<code>img</code>元素的层叠比较就不受父级的影响，并且两个<code>img</code>元素有着明显不一的z-index，因此遵循“谁大谁上”的准则，所以，z-index为2的哪个“美女”就显示在z-index为1的“风景”上面。</p>
<p>在图2中，z-index的值变成数值，哪怕是0，都会创建一个层叠上下文。此时，层叠规则就发生了变化。两个<code>img</code>元素的层叠顺序比较变成了优先比较其父层叠上下文元素的层叠顺序。这里，由于外面的两个<code>div</code>都是z-index：0，两者层叠顺序一样大，此时遵顼“后来居上”准则，所以，位于后面的“风景”就自然而然显示在“美女”上面，而<code>img</code>元素上的z-index不起作用。</p>
<h3 id="例子2：z-index负值的使用"><a href="#例子2：z-index负值的使用" class="headerlink" title="例子2：z-index负值的使用"></a>例子2：z-index负值的使用</h3><p>模拟纸张效果，该效果的亮点是纸张的边角有卷起来的效果</p>
<p><img src="/images/stacking04.png" alt="图4"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">            <span class="attribute">display</span>: flex;</span><br><span class="line">            <span class="attribute">justify-content</span>: center;</span><br><span class="line">            <span class="attribute">align-items</span>: center;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#666</span>;</span><br><span class="line">            <span class="comment">/*创建层叠上下文*/</span></span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">            <span class="attribute">z-index</span>: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.page</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#f5da41</span>;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.page</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">20%</span>;</span><br><span class="line">            <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="comment">/*层叠上下文(灰色背景之上)，定位元素(黄色纸张)之下*/</span></span><br><span class="line">            <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>.container 灰色背景通过 position:relative;z-index:0 创建了层叠上下文，.page仅有 position:relative 而没有设置 z-index 值，因此只能算 z-index:auto 程度的定位元素，于是，z-index:-1 边角阴影就完美地藏在了层叠上下文（灰色背景）之上、普通定位元素（黄色纸张）之下。在清楚z-index负值和层叠关系后，文章开头那个按钮效果也可通过z-index负值实现的。</p>
]]></content>
      <categories>
        <category>css案例</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>JS+CSS手风琴动画效果</title>
    <url>/2023/01/26/%E6%89%8B%E9%A3%8E%E7%90%B4%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p>手风琴动画效果：当点击某个选项卡时，该选项卡展示内容，其他选项卡的内容收起，无论展示还是收起都带有过渡效果</p>
<p>效果图如下：</p>
<p><img src="/images/accordion.png" alt="手风琴效果图"></p>
<p>思路：为每个选项卡设置点击事件，修改dom元素样式</p>
<p>难点：过渡动画的实现。刚开始我使用<code>display:block</code>或<code>display:none</code>控制内容的显示与隐藏，但是发现display并没有动画效果，后来想使用<code>height</code>，但元素高度不固定（高度由内容撑开），也没法实现动画效果。</p>
<p>最后百度找到一个解决方法：使用maxHeight作为过渡效果的CSS属性，使用css设置内容元素的maxHeight为0，并且使用overflow:hidden隐藏溢出内容。当点击选项卡时，使用JS获取内容元素的真实高度(dom.scrollHeight)，再把真实高度赋值给内容元素的maxHeight即可。</p>
<p>代码实现：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>手风琴动画<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;accordion&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Overview<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Microservices<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Overview<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;accordion&quot;</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Quickstart<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;accordion&quot;</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Events<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Team<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#191e1e</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.accordion</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#191e1e</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.4s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.accordion</span><span class="selector-class">.active</span>,</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.accordion</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">110</span>, <span class="number">109</span>, <span class="number">109</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.panel</span> &#123;</span><br><span class="line">    <span class="comment">/*过渡效果主要代码*/</span></span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">transition</span>: max-height <span class="number">0.2s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.panel</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#191e1e</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#98afae</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> acc = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.accordion&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> panelList = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.panel&#x27;</span>)</span><br><span class="line"><span class="comment">//为每个选项卡绑定点击事件</span></span><br><span class="line">acc.<span class="title function_">forEach</span>(<span class="function">(<span class="params">ele,index</span>)=&gt;</span>&#123;</span><br><span class="line">    ele.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> panel = panelList[index];</span><br><span class="line">        <span class="keyword">if</span>(panel.<span class="property">style</span>.<span class="property">maxHeight</span>)&#123;  <span class="comment">//如果元素maxHeight存在，表示内容正在展开，需要隐藏</span></span><br><span class="line">            panel.<span class="property">style</span>.<span class="property">maxHeight</span> = <span class="literal">null</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//获取元素的真实高度</span></span><br><span class="line">            panel.<span class="property">style</span>.<span class="property">maxHeight</span> = panel.<span class="property">scrollHeight</span>+<span class="string">&quot;px&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//排他：将非选中的选项卡内容隐藏</span></span><br><span class="line">        acc.<span class="title function_">forEach</span>(<span class="function">(<span class="params">e,i</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(index!=i)&#123;</span><br><span class="line">                ele.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">                panelList[i].<span class="property">style</span>.<span class="property">maxHeight</span> = <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>css案例</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>用ts实现一个时间转换器</title>
    <url>/2023/03/18/%E6%97%B6%E9%97%B4%E8%BD%AC%E6%8D%A2%E5%99%A8/</url>
    <content><![CDATA[<p>封装一个时间转换器，可以将传入的时间(类似：2023-3-17)转成小时、周、月、年(和当前时间比较)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义时间策略对象</span></span><br><span class="line"><span class="keyword">const</span> timeStrategies = &#123;</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;今天&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>: <span class="function">(<span class="params">day:<span class="built_in">number</span>|<span class="literal">null</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> day + <span class="string">&#x27;天前&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: <span class="function">(<span class="params">week:<span class="built_in">number</span>|<span class="literal">null</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> week + <span class="string">&#x27;周前&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;半个月前&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;E&#x27;</span>: <span class="function">(<span class="params">month:<span class="built_in">number</span>|<span class="literal">null</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> month + <span class="string">&quot;月前&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;F&#x27;</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;半年前&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;G&#x27;</span>: <span class="function">(<span class="params">year:<span class="built_in">number</span>|<span class="literal">null</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> year + <span class="string">&quot;年前&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//时间转换器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DateTransfer</span> &#123;</span><br><span class="line">    <span class="attr">nowTimeStamp</span>:<span class="built_in">number</span></span><br><span class="line">    <span class="attr">hours</span>:<span class="built_in">number</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">nowTimeStamp</span> = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hours</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将类似2023-01-15格式转化为时间戳</span></span><br><span class="line">    <span class="title function_">transferToTimeStamp</span>(<span class="params">userTime:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (userTime) &#123;</span><br><span class="line">            <span class="keyword">let</span> userTimeStamp = <span class="keyword">new</span> <span class="title class_">Date</span>(userTime).<span class="title function_">getTime</span>()</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getTimeDiff</span>(userTimeStamp)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取时间差</span></span><br><span class="line">    <span class="title function_">getTimeDiff</span>(<span class="attr">userTimeStamp</span>:<span class="built_in">number</span>):<span class="built_in">number</span>|<span class="literal">undefined</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (userTimeStamp &amp;&amp; userTimeStamp &lt; <span class="variable language_">this</span>.<span class="property">nowTimeStamp</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="variable language_">this</span>.<span class="property">nowTimeStamp</span> - userTimeStamp) / <span class="number">1000</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将用户传入的时间转为小时</span></span><br><span class="line">    <span class="title function_">toHours</span>(<span class="attr">userTime</span>:<span class="built_in">string</span>):<span class="built_in">number</span>|<span class="literal">undefined</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (userTime) &#123;</span><br><span class="line">            <span class="keyword">let</span> timeDiff = <span class="variable language_">this</span>.<span class="title function_">transferToTimeStamp</span>(userTime);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">hours</span> = <span class="title class_">Math</span>.<span class="title function_">trunc</span>(timeDiff <span class="keyword">as</span> <span class="built_in">number</span> / <span class="number">3600</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">hours</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//转为天数</span></span><br><span class="line">    <span class="title function_">toDays</span>(<span class="params">userTime:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (userTime) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">hours</span> = <span class="variable language_">this</span>.<span class="title function_">toHours</span>(userTime) <span class="keyword">as</span> <span class="built_in">number</span></span><br><span class="line">            <span class="keyword">let</span> days = <span class="variable language_">this</span>.<span class="property">hours</span> / <span class="number">24</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">trunc</span>(days)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//转为周数</span></span><br><span class="line">    <span class="title function_">toWeeks</span>(<span class="params">userTime:<span class="built_in">string</span>|<span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="comment">//如果是字符，就是用户传入的时间</span></span><br><span class="line">        <span class="comment">//如果是数字，那么就是天数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> userTime === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//先将小时数转为天数再计算</span></span><br><span class="line">            <span class="keyword">let</span> days = <span class="variable language_">this</span>.<span class="title function_">toDays</span>(userTime) <span class="keyword">as</span> <span class="built_in">number</span></span><br><span class="line">            <span class="keyword">let</span> weeks = days / <span class="number">7</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">trunc</span>(weeks)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> weeks = userTime / <span class="number">7</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">trunc</span>(weeks)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//转为月数</span></span><br><span class="line">    <span class="title function_">toMonths</span>(<span class="params">userTime:<span class="built_in">string</span>|<span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="comment">//假设一个月30天</span></span><br><span class="line">        <span class="comment">//先将小时数转为天数再计算</span></span><br><span class="line">        <span class="comment">//如果是字符，就是用户传入的时间</span></span><br><span class="line">        <span class="comment">//如果是数字，那么就是天数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> userTime == <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> days = <span class="variable language_">this</span>.<span class="title function_">toDays</span>(userTime) <span class="keyword">as</span> <span class="built_in">number</span></span><br><span class="line">            <span class="keyword">let</span> months = days / <span class="number">30</span></span><br><span class="line">            <span class="comment">//截取小数后两位返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getNum</span>(months, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> months = userTime / <span class="number">30</span></span><br><span class="line">        <span class="comment">//截取小数后两位返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getNum</span>(months, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//转为年数</span></span><br><span class="line">    <span class="title function_">toYears</span>(<span class="params">userTime:<span class="built_in">string</span>|<span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="comment">//假设一年365天</span></span><br><span class="line">        <span class="comment">//先将小时数转为天数再计算</span></span><br><span class="line">        <span class="comment">//如果是字符，就是用户传入的时间</span></span><br><span class="line">        <span class="comment">//如果是数字，那么就是天数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> userTime == <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> days = <span class="variable language_">this</span>.<span class="title function_">toDays</span>(userTime) <span class="keyword">as</span> <span class="built_in">number</span></span><br><span class="line">            <span class="keyword">let</span> years = days / <span class="number">365</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getNum</span>(years, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> years = userTime/<span class="number">365</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getNum</span>(years, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//截取小数后两位</span></span><br><span class="line">    <span class="title function_">getNum</span>(<span class="params">num:<span class="built_in">number</span>, cut = <span class="number">3</span></span>) &#123;</span><br><span class="line">        <span class="comment">//将数字转为string</span></span><br><span class="line">        <span class="keyword">let</span> numStr = num.<span class="title function_">toString</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> indexEnd = numStr.<span class="title function_">indexOf</span>(<span class="string">&quot;.&quot;</span>) + cut</span><br><span class="line">        <span class="keyword">let</span> result = numStr</span><br><span class="line">        <span class="keyword">if</span> (indexEnd != -<span class="number">1</span>) &#123;</span><br><span class="line">            result = numStr.<span class="title function_">slice</span>(<span class="number">0</span>, indexEnd)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//slice方法会改变原数组</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将string转为数字返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Number</span>(result)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自动换算时间单位(最小单位为天)</span></span><br><span class="line">    <span class="comment">//计算：如time=1.2就为1天前</span></span><br><span class="line">    <span class="comment">//time&lt;=1为今天，time&lt;7为x天前</span></span><br><span class="line">    <span class="comment">//7&lt;=time&lt;15为x周前，15&lt;=time&lt;30为半个月前</span></span><br><span class="line">    <span class="comment">//30&lt;=time&lt;180为x月前,180&lt;=time&lt;365为半年前</span></span><br><span class="line">    <span class="comment">//365&lt;=time为x年前</span></span><br><span class="line">    <span class="title function_">autoTransfer</span>(<span class="params">userTime:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (userTime) &#123;</span><br><span class="line">            <span class="comment">//获取天数</span></span><br><span class="line">            <span class="keyword">let</span> days = <span class="variable language_">this</span>.<span class="title function_">toDays</span>(userTime) <span class="keyword">as</span> <span class="built_in">number</span>;</span><br><span class="line">            <span class="comment">// console.log(days)</span></span><br><span class="line">            <span class="keyword">let</span> index = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            <span class="keyword">let</span> value = <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//判断时间</span></span><br><span class="line">            <span class="keyword">if</span> (days &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//当天</span></span><br><span class="line">                index = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (days &gt; <span class="number">1</span> &amp;&amp; days &lt; <span class="number">7</span>) &#123;</span><br><span class="line">                <span class="comment">//x天前</span></span><br><span class="line">                <span class="comment">// debugger</span></span><br><span class="line">                <span class="comment">// console.log(days)</span></span><br><span class="line">                index = <span class="string">&#x27;B&#x27;</span></span><br><span class="line">                value = days</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (days &gt;= <span class="number">7</span> &amp;&amp; days &lt; <span class="number">15</span>) &#123;</span><br><span class="line">                <span class="comment">//x周前</span></span><br><span class="line">                index = <span class="string">&#x27;C&#x27;</span></span><br><span class="line">                value = <span class="variable language_">this</span>.<span class="title function_">toWeeks</span>(days)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (days &gt;= <span class="number">15</span> &amp;&amp; days &lt; <span class="number">30</span>) &#123;</span><br><span class="line">                <span class="comment">//半个月前</span></span><br><span class="line">                index = <span class="string">&#x27;D&#x27;</span></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (days &gt;= <span class="number">30</span> &amp;&amp; days &lt; <span class="number">180</span>) &#123;</span><br><span class="line">                <span class="comment">//x月前</span></span><br><span class="line">                index = <span class="string">&#x27;E&#x27;</span></span><br><span class="line">                value = <span class="variable language_">this</span>.<span class="title function_">toMonths</span>(days)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (days &gt;= <span class="number">180</span> &amp;&amp; days &lt; <span class="number">365</span>) &#123;</span><br><span class="line">                <span class="comment">//半年前</span></span><br><span class="line">                index = <span class="string">&#x27;F&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (days &gt;= <span class="number">365</span>) &#123;</span><br><span class="line">                <span class="comment">//x年前</span></span><br><span class="line">                index = <span class="string">&#x27;G&#x27;</span></span><br><span class="line">                value = <span class="variable language_">this</span>.<span class="title function_">toYears</span>(days)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> timeStrategies[index <span class="keyword">as</span> keyof <span class="keyword">typeof</span> timeStrategies](value)</span><br><span class="line">            <span class="comment">//如果只是timeSet[index](value),编译器会报错</span></span><br><span class="line">            <span class="comment">//因为传入index字段，在编译器看来是一个字符串,</span></span><br><span class="line">            <span class="comment">//而不是A、B、C这几个值的一种,因此类型是不一致的</span></span><br><span class="line">            <span class="comment">//想要正确使用，就需要显示声明传入的值与这些键一致</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化一个转换器</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">DateTransfer</span>()</span><br><span class="line"><span class="comment">//自动转换时间</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">autoTransfer</span>(<span class="string">&#x27;2023-01-17&#x27;</span>))</span><br><span class="line"><span class="comment">//控制台输出：2月前</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之模板方法模式</title>
    <url>/2023/01/13/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>模板方法模式：由两部分结构组成，第一部分是抽象父类，第二部分是具体实现的子类。在抽象父类中封装了子类的算法框架，子类通过继承这个抽象类，也继承了整个算法结构，并且可以选择重写父类方法。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>假如我们有一些平行的子类，各个子类之间有一些相同的行为，也有一些不同的行为，像这种情况就可以使用模板方法模式。在模板方法模式中，子类实现中的相同部分被上移到父类中，而将不同的部分留给子类自己实现</p>
<p><strong>例子-咖啡与茶</strong></p>
<p>泡咖啡的步骤通常如下：</p>
<ol>
<li>把水煮沸</li>
<li>用沸水冲泡咖啡</li>
<li>把咖啡倒进杯子</li>
<li>加糖和牛奶</li>
</ol>
<p>泡茶的步骤如下：</p>
<ol>
<li>把水煮沸</li>
<li>用沸水浸泡茶叶</li>
<li>把茶叶倒进杯子</li>
<li>加柠檬</li>
</ol>
<p>其实泡茶的步骤跟泡咖啡的步骤相差并不大，冲泡过程是大同小异的，找出两者的不同点，并将不同点转化为相同点：</p>
<ul>
<li><p>咖啡、茶相当于冲泡的原料不同，但我们可以把它们抽象为”饮料“</p>
</li>
<li><p>冲泡、浸泡这是不同的动作，但我们可以把它们抽象为”泡“</p>
</li>
</ul>
<ul>
<li>糖和牛奶、柠檬相当于加入的调料不同，但我们可以把它们都抽象为”调料“</li>
</ul>
<p>经过抽象之后，不管是泡咖啡还是泡茶，我们都能整理为以下四步:</p>
<ol>
<li>把水煮沸</li>
<li>用沸水冲泡饮料</li>
<li>把饮料倒进杯子</li>
<li>加调料</li>
</ol>
<p>具体代码实现：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象父类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Beverage</span>&#123;</span><br><span class="line">    <span class="title function_">boilWater</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;把水煮沸&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">brew</span>():<span class="built_in">void</span>	<span class="comment">//空方法，由子类重写</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">pourInCup</span>():<span class="built_in">void</span>	<span class="comment">//空方法，由子类重写</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">addCondiments</span>():<span class="built_in">void</span>	<span class="comment">//空方法，由子类重写</span></span><br><span class="line">    <span class="title function_">init</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">boilWater</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">brew</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">pourInCup</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">addCondiments</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建咖啡类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Coffee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Beverage</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">brew</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用沸水冲泡咖啡&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">pourInCup</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;把咖啡倒进杯子&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">addCondiments</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;加糖和牛奶&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建茶类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tea</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Beverage</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">brew</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用水冲泡茶叶&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">pourInCup</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;把茶倒进杯子&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">addCondiments</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;加柠檬&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> coffee = <span class="keyword">new</span> <span class="title class_">Coffee</span>();</span><br><span class="line">coffee.<span class="title function_">init</span>()</span><br><span class="line"><span class="keyword">const</span> tea = <span class="keyword">new</span> <span class="title class_">Tea</span>()</span><br><span class="line">tea.<span class="title function_">init</span>()</span><br></pre></td></tr></table></figure>

<h3 id="钩子方法"><a href="#钩子方法" class="headerlink" title="钩子方法"></a>钩子方法</h3><p>在上述步骤中，我们规定了咖啡的制作为4个步骤。但有些客人喝咖啡是不加调料（糖和牛奶）的，这种情况又该怎么办？</p>
<p>钩子方法可以用来解决这个问题，放置钩子是隔离变化的一种常见手段。我们在父类中容易变化的地方放置钩子，钩子可以有一个默认的实现，究竟要不要”挂钩“，这由子类自行决定。钩子方法的返回结果决定了模板方法后面部分的执行步骤，也就是程序接下来的走向，这样一来，程序就拥有了变化的可能</p>
<p><strong>加不加调料由客人决定</strong></p>
<p>具体代码实现：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//挂钩</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Beverage</span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">brew</span>():<span class="built_in">void</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">pourInCup</span>():<span class="built_in">void</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">addCondiments</span>():<span class="built_in">void</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">boilWater</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;把水煮沸&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">customerWantCondiments</span>(<span class="params"></span>)&#123;	<span class="comment">//默认需要调料，由子类自行决定</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">init</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">boilWater</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">brew</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">pourInCup</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">customerWantCondiments</span>())&#123;	<span class="comment">//如果需要调料，就加调料</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">addCondiments</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建咖啡类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Coffee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Beverage</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">brew</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用沸水冲泡咖啡&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">pourInCup</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;把咖啡倒进杯子&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">addCondiments</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;加糖和牛奶&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">customerWantCondiments</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;请问需要调料吗？&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> coffee = <span class="keyword">new</span> <span class="title class_">Coffee</span>();</span><br><span class="line">coffee.<span class="title function_">init</span>()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之状态模式</title>
    <url>/2023/04/02/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>状态模式：对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为</p>
<p>状态模式用于解决系统中复杂对象的状态转换以及不同状态下行为的封装问题。当系统中某个对象存在多个状态，这些状态之间可以进行转换，而且对象在不同状态下行为不相同时可以使用状态模式。</p>
<h2 id="状态模式结构："><a href="#状态模式结构：" class="headerlink" title="状态模式结构："></a>状态模式结构：</h2><ul>
<li>环境（Context）：称为上下文类或环境类，它是拥有多种状态的对象。由于环境类的状态存在多样性且在不同状态下对象的行为有所不同，因此将状态独立出去形成单独的状态类。在环境类中维护一个抽象状态类State的实例，这个实例定义当前状态，在具体实现时，它是一个State子类的对象。</li>
<li>抽象状态（State）：它用于定义一个接口以封装与环境类的一个特定状态相关的行为，在抽象状态类中声明了各种不同状态对应的方法，而在其子类中实现类这些方法，由于不同状态下对象的行为可能不同，因此在不同子类中方法的实现可能存在不同，相同的方法可以写在抽象状态类中。</li>
<li>具体状态（Concrete State）：它是抽象状态类的子类，每一个子类实现一个与环境类的一个状态相关的行为，每一个具体状态类对应环境的一个具体状态，不同的具体状态类其行为有所不同。</li>
</ul>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>我们来想象这样一个场景：有一个电灯，电灯上面只有一个开关。当电灯开着的时候，此时<br>按下开关，电灯会切换到关闭状态；再按一次开关，电灯又将被打开。同一个开关按钮，在不同<br>的状态下，表现出来的行为是不一样的。</p>
<p>现在用代码（不使用状态模式）来描述这个场景：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">ILight</span>&#123;</span><br><span class="line">    <span class="attr">state</span>:string,</span><br><span class="line">    <span class="title function_">setState</span>():<span class="keyword">void</span>,</span><br><span class="line">    <span class="title function_">buttonWasPressed</span>():<span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Light</span> implements <span class="title class_">ILight</span>&#123;</span><br><span class="line">    <span class="comment">//开关按钮</span></span><br><span class="line">    <span class="attr">button</span>:<span class="title class_">HTMLElement</span>|<span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line">    state=<span class="string">&quot;off&quot;</span>;</span><br><span class="line">    <span class="title function_">setState</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;off&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;on&#x27;</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开灯&#x27;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">state</span>===<span class="string">&#x27;on&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;off&#x27;</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;关灯&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">buttonWasPressed</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">init</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> button = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">        button.<span class="property">innerHTML</span> = <span class="string">&quot;开关&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">button</span> = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(button);</span><br><span class="line">        <span class="comment">//点击关闭或打开</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">button</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">buttonWasPressed</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lightContext = <span class="keyword">new</span> <span class="title class_">Light</span>()</span><br><span class="line">lightContext.<span class="title function_">init</span>()</span><br></pre></td></tr></table></figure>

<p>这只是普通的电灯开关，要么关要么开。许多酒店里有另外一种电灯，这种电灯也只有一个开关，但它的表现是：第一次按下打开弱光，第二次按下打开强光，第三次才是关闭电灯。现在必须改造上面的代码来完成这种新型电灯的制造：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setState</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;off&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;weakLight&#x27;</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;弱光&#x27;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">state</span>===<span class="string">&#x27;weakLight&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;strongLight&#x27;</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;强光&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>((<span class="variable language_">this</span>.<span class="property">state</span>===<span class="string">&#x27;strongLight&#x27;</span>)&#123;</span><br><span class="line">                 <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;off&#x27;</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;关灯&quot;</span>)</span><br><span class="line">                 &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>现在这个反例先告一段落，我们来考虑一下上述程序的缺点。</p>
<ol>
<li>所有跟状态有关的行为，都被封装在 setState方法里，如果以后这个电灯又增加了强强光、超强光和终极强光，那我们将无法预计这个方法将膨胀到什么地步。</li>
<li>状态之间的切换关系，不过是往 setState方法里堆砌 if、else 语句，增加或者修改一个状态可能需要改变若干个操作，这使 buttonWasPressed 更加难以阅读和维护。</li>
</ol>
<p><strong>状态模式改进电灯程序</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象状态类</span></span><br><span class="line">abstract <span class="keyword">class</span> <span class="title class_">LightState</span>&#123;</span><br><span class="line">    <span class="comment">//定义一个环境角色，也就是封装状态的变化引起功能的变化</span></span><br><span class="line">    protected <span class="attr">context</span>:<span class="title class_">Context</span>|<span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    public <span class="title function_">setContext</span>(<span class="params">context:Context</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">context</span> = context</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击按钮切换状态,由子类实现</span></span><br><span class="line">    public abstract <span class="title function_">buttonWasPressed</span>():<span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弱光状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OffLightState</span> <span class="keyword">extends</span> <span class="title class_ inherited__">LightState</span>&#123;</span><br><span class="line">    public <span class="title function_">buttonWasPressed</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;弱光&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">context</span>?.<span class="title function_">setLightState</span>(<span class="title class_">Context</span>.<span class="property">weakLightState</span>)</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//强光状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeakLightState</span> <span class="keyword">extends</span> <span class="title class_ inherited__">LightState</span>&#123;</span><br><span class="line">    public <span class="title function_">buttonWasPressed</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;强光&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">context</span>?.<span class="title function_">setLightState</span>(<span class="title class_">Context</span>.<span class="property">strongLightState</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关灯状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StrongLightState</span> <span class="keyword">extends</span> <span class="title class_ inherited__">LightState</span>&#123;</span><br><span class="line">    public <span class="title function_">buttonWasPressed</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;关灯&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">context</span>?.<span class="title function_">setLightState</span>(<span class="title class_">Context</span>.<span class="property">offLightState</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//上下文</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span>&#123;</span><br><span class="line">    <span class="comment">//定义出灯的所有状态</span></span><br><span class="line">    <span class="keyword">static</span> readonly offLightState = <span class="keyword">new</span> <span class="title class_">OffLightState</span>();</span><br><span class="line">    <span class="keyword">static</span> readonly weakLightState = <span class="keyword">new</span> <span class="title class_">WeakLightState</span>();</span><br><span class="line">    <span class="keyword">static</span> readonly strongLightState = <span class="keyword">new</span> <span class="title class_">StrongLightState</span>();</span><br><span class="line"></span><br><span class="line">     <span class="comment">//定义开关</span></span><br><span class="line">     <span class="attr">button</span>:<span class="title class_">HTMLElement</span>|<span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个电灯当前所处的状态</span></span><br><span class="line">    <span class="attr">currLightState</span>:<span class="title class_">LightState</span>|<span class="literal">null</span>=<span class="literal">null</span></span><br><span class="line">    <span class="comment">//切换电灯状态</span></span><br><span class="line">    <span class="title function_">setLightState</span>(<span class="params"> lightState:LightState</span>)&#123;</span><br><span class="line">        <span class="comment">//设置电灯当前状态</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currLightState</span> = lightState;    </span><br><span class="line">        <span class="comment">//把当前上下文环境通知到各个实现类中    </span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currLightState</span>.<span class="title function_">setContext</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">init</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> button = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">        button.<span class="property">innerHTML</span> = <span class="string">&quot;开关&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">button</span> = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(button);</span><br><span class="line">        <span class="comment">//为电灯设置一个初始状态</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setLightState</span>(<span class="keyword">new</span> <span class="title class_">OffLightState</span>())</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">button</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">currLightState</span>?.<span class="title function_">buttonWasPressed</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lightContext = <span class="keyword">new</span> <span class="title class_">Context</span>()</span><br><span class="line">lightContext.<span class="title function_">init</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弱光</span></span><br><span class="line"><span class="comment">// 强光</span></span><br><span class="line"><span class="comment">// 关灯</span></span><br></pre></td></tr></table></figure>

<p>是使用状态模式的好处很明显，它可以使每一种状态和它对应的行为之间的关系局部化，这些行为被分散和封装在各自对应的状态类之中，便于阅读和管理代码。</p>
<p>另外，状态之间的切换都被分布在状态类内部，这使得我们无需编写过多的 if、else 条件分支语言来控制状态之间的转换。</p>
<p>当我们需要为 light 对象增加一种新的状态时，只需要增加一个新的状态类，再稍稍改变一些现有的代码即可。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>生成器generator</title>
    <url>/2022/10/29/%E7%94%9F%E6%88%90%E5%99%A8generator/</url>
    <content><![CDATA[<h3 id="生成器执行例子"><a href="#生成器执行例子" class="headerlink" title="生成器执行例子"></a>生成器执行例子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造生成器函数</span></span><br><span class="line">		<span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> ＊<span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">            a++;</span><br><span class="line">            <span class="keyword">yield</span>;</span><br><span class="line">            b = b ＊ a;</span><br><span class="line">            a = (<span class="keyword">yield</span> b) + <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> ＊<span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">            b--;</span><br><span class="line">            <span class="keyword">yield</span>;</span><br><span class="line">            a = (<span class="keyword">yield</span> <span class="number">8</span>) + b;</span><br><span class="line">            b = a ＊ (<span class="keyword">yield</span> <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构建辅助函数，用于控制迭代器</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">step</span>(<span class="params">gen</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> it = <span class="title function_">gen</span>();		<span class="comment">//相当于初始化，函数还没有执行</span></span><br><span class="line">            <span class="keyword">var</span> last;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">              <span class="comment">// 不管yield出来的是什么，下一次都把它原样传回去！</span></span><br><span class="line">              last = it.<span class="title function_">next</span>( last ).<span class="property">value</span>;	<span class="comment">//启动函数</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//交替执行</span></span><br><span class="line">        <span class="keyword">var</span> s1 = <span class="title function_">step</span>( foo );</span><br><span class="line">        <span class="keyword">var</span> s2 = <span class="title function_">step</span>( bar );</span><br><span class="line"></span><br><span class="line">        <span class="title function_">s2</span>();       <span class="comment">// b--;</span></span><br><span class="line">        <span class="title function_">s2</span>();       <span class="comment">// yield 8</span></span><br><span class="line">        <span class="title function_">s1</span>();       <span class="comment">// a++;</span></span><br><span class="line">        <span class="title function_">s2</span>();       <span class="comment">// a = 8 + b;</span></span><br><span class="line">                  <span class="comment">// yield 2</span></span><br><span class="line">        <span class="title function_">s1</span>();       <span class="comment">// b = b ＊ a;</span></span><br><span class="line">                  <span class="comment">// yield b</span></span><br><span class="line">        <span class="title function_">s1</span>();       <span class="comment">// a = b + 3;</span></span><br><span class="line">        <span class="title function_">s2</span>();       <span class="comment">// b = a ＊ 2;</span></span><br></pre></td></tr></table></figure>

<p>以上代码执行推导</p>
<p>**var s1 &#x3D; step( foo )**：s1为一个函数，it为生成器函数foo()</p>
<p>**var s2 &#x3D; step( bar )**：s2为一个函数，it为生成器函数bar()</p>
<p>第一次**s2()**：bar函数启动，执行b–，b的值为1后停止执行，此时的yield返回undefined，last为undefined</p>
<p>第二次**s2()**：bar函数继续往下执行，遇到yield 8 停止 ，yield返回8 ，last为8</p>
<p>第一次**s1()**：foo函数启动，a的值为2后停止执行，此时的yield返回undefined，last为undefined</p>
<p>第三次执行**s2()**：(yield 8)被传进来last替代，a为9，b &#x3D; 9 * （yield 2）后停止执行，此时yield返回2，last为2</p>
<p>第二次**s1()**：b &#x3D; 9，a&#x3D;(yield b)后停止执行，此时yield将b返回，所以last为9</p>
<p>第三次**s1()**：(yield b)被传进来的last替代，所以a &#x3D; 12</p>
<p>第四次**s2()*<em>：(yield 2)被传进来的last替代，所以b&#x3D;9</em>2，b&#x3D;18</p>
<h3 id="迭代器接口"><a href="#迭代器接口" class="headerlink" title="迭代器接口"></a>迭代器接口</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> something = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> nextVal;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">//for...of循环需要</span></span><br><span class="line">        [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> <span class="variable language_">this</span>&#125;,</span><br><span class="line">        <span class="comment">//标准迭代器接口方法</span></span><br><span class="line">        <span class="attr">next</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nextVal===<span class="literal">undefined</span>)&#123;</span><br><span class="line">                nextVal=<span class="number">1</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                nextVal = (<span class="number">3</span> * nextVal)+<span class="number">6</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">false</span>,<span class="attr">value</span>:nextVal&#125;	<span class="comment">//done表示迭代状态，value为迭代值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行迭代</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> v <span class="keyword">of</span> something) &#123;	<span class="comment">//for..of循环期望something是iterable，于是它寻找并调用它的									  //Symbol.iterator函数。</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>( v );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不要死循环！</span></span><br><span class="line">            <span class="keyword">if</span> (v &gt; <span class="number">500</span>) &#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1 9 33105 321969</span></span><br></pre></td></tr></table></figure>

<h3 id="通过生成器实现上面的例子"><a href="#通过生成器实现上面的例子" class="headerlink" title="通过生成器实现上面的例子"></a>通过生成器实现上面的例子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">        <span class="keyword">function</span> ＊<span class="title function_">something</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> nextVal;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (nextVal === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                  nextVal = <span class="number">1</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span> &#123;</span><br><span class="line">                  nextVal = (<span class="number">3</span> ＊ nextVal) + <span class="number">6</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">yield</span> nextVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for...of循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> v <span class="keyword">of</span> <span class="title function_">something</span>()) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>( v );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不要死循环！</span></span><br><span class="line">            <span class="keyword">if</span> (v &gt; <span class="number">500</span>) &#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>问题：在实现迭代器接口时，for…of是这样使用：<strong>for (var v of something)<strong>，用生成器实现时却是这样：</strong>for (var v of something())</strong></p>
<h3 id="生成器实现数组遍历"><a href="#生成器实现数组遍历" class="headerlink" title="生成器实现数组遍历"></a>生成器实现数组遍历</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">10</span>,<span class="number">99</span>,<span class="number">50</span>,-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> *<span class="title function_">arrGen</span>(<span class="params">array</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> arr = array;</span><br><span class="line">            <span class="keyword">var</span> nextVal;</span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;arr.<span class="property">length</span>)&#123;</span><br><span class="line">                    nextVal = arr[i]</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;end&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">                i++</span><br><span class="line">                <span class="keyword">yield</span> nextVal;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">arrGen</span>(array))&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="生成器实现对象遍历"><a href="#生成器实现对象遍历" class="headerlink" title="生成器实现对象遍历"></a>生成器实现对象遍历</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象遍历</span></span><br><span class="line">        <span class="keyword">var</span> person = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;zhangs&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span>* <span class="title function_">objGen</span>(<span class="params">person</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> obj = person;</span><br><span class="line">            <span class="keyword">var</span> nextVal;</span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">var</span> propertyList = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; propertyList.<span class="property">length</span>) &#123;</span><br><span class="line">                    <span class="comment">//每对键值都是一个对象</span></span><br><span class="line">                    nextVal = &#123;&#125;</span><br><span class="line">                    <span class="keyword">var</span> proName = propertyList[i]</span><br><span class="line">                    nextVal[proName] = obj[propertyList[i]]</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;end&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">yield</span> nextVal</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">objGen</span>(person))&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>生成器和异步</title>
    <url>/2022/10/29/%E7%94%9F%E6%88%90%E5%99%A8%E5%92%8C%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<p>将异步代码变成同步（阻塞），例：你想向后台发送请求，只有当数据返回时才打印</p>
<ol>
<li>发送ajax请求的方法</li>
<li>需要一个方法，发送请求后判断数据是否成功返回，继续往下执行</li>
<li>需要一个方法，等待数据返回，执行打印操作</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="string">&#x27;https://sunweipeng123.github.io/posts.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ajax方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myAjax</span>(<span class="params">url, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>))</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">callback</span>(<span class="string">&#x27;请求失败&#x27;</span>, <span class="literal">null</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="title function_">myAjax</span>(url, <span class="keyword">function</span> (<span class="params">err, text</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            it.<span class="keyword">throw</span>(err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            it.<span class="title function_">next</span>(text)	<span class="comment">//成功拿到数据后，启动生成器继续往下执行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> *<span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> text = <span class="keyword">yield</span> <span class="title function_">foo</span>(path)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(text)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> it = <span class="title function_">main</span>();</span><br><span class="line">it.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure>

<h3 id="生成器-promise"><a href="#生成器-promise" class="headerlink" title="生成器+promise"></a>生成器+promise</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="string">&#x27;https://sunweipeng123.github.io/posts.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ajax方法</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">myAjax</span>(<span class="params">url, callback</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                        <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>))</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">callback</span>(<span class="string">&#x27;请求失败&#x27;</span>, <span class="literal">null</span>)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">            xhr.<span class="title function_">send</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">url</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">                <span class="title function_">myAjax</span>(url, <span class="keyword">function</span> (<span class="params">err, text</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(err)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(text)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span>* <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> text = <span class="keyword">yield</span> <span class="title function_">foo</span>(path)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(text)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">warn</span>(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> it = <span class="title function_">main</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//等待promise决议</span></span><br><span class="line">        <span class="keyword">let</span> p = it.<span class="title function_">next</span>().<span class="property">value</span></span><br><span class="line">        p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">text</span>)&#123;</span><br><span class="line">            it.<span class="title function_">next</span>(text)</span><br><span class="line">        &#125;,<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">            it.<span class="keyword">throw</span>(err)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之策略模式</title>
    <url>/2023/02/23/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>策略模式的定义是：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。</p>
<p>策略模式主要用来解决当有多种相似算法的时，使用if…else产生的难以维护的问题。它主要由三部分组成：strategy接口、具体的strategy类以及用来改变和执行策略的context类。其中，Context接受客户的请求，随后<br>把请求委托给某一个策略类。</p>
<h3 id="使用策略模式计算奖金"><a href="#使用策略模式计算奖金" class="headerlink" title="使用策略模式计算奖金"></a>使用策略模式计算奖金</h3><p>很多公司的年终奖是根据员工的工资基数和年底绩效情况来发放的。例如，绩效为 S 的人年<br>终奖有 4 倍工资，绩效为 A 的人年终奖有 3 倍工资，而绩效为 B 的人年终奖是 2 倍工资。假设财<br>务部要求我们提供一段代码，来方便他们计算员工的年终奖。</p>
<p><strong>不使用策略模式</strong>实现年终奖计算:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> calculateBonus = <span class="keyword">function</span>(<span class="params"> performanceLevel, salary </span>)&#123; </span><br><span class="line"> <span class="keyword">if</span> ( performanceLevel === <span class="string">&#x27;S&#x27;</span> )&#123; </span><br><span class="line"> 	<span class="keyword">return</span> salary * <span class="number">4</span>; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">if</span> ( performanceLevel === <span class="string">&#x27;A&#x27;</span> )&#123; </span><br><span class="line"> 	<span class="keyword">return</span> salary * <span class="number">3</span>; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">if</span> ( performanceLevel === <span class="string">&#x27;B&#x27;</span> )&#123; </span><br><span class="line"> 	<span class="keyword">return</span> salary * <span class="number">2</span>; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;; </span><br><span class="line"><span class="title function_">calculateBonus</span>( <span class="string">&#x27;B&#x27;</span>, <span class="number">20000</span> ); <span class="comment">// 输出：40000 </span></span><br><span class="line"><span class="title function_">calculateBonus</span>( <span class="string">&#x27;S&#x27;</span>, <span class="number">6000</span> ); <span class="comment">// 输出：24000</span></span><br></pre></td></tr></table></figure>

<p>这段代码十分简单，但存在着显而易见的缺点。if-else分支太多，calculateBonus 函数缺乏弹性，如果增加了一种新的绩效等级 C，又要重写一个判断，代码冗余。</p>
<p><strong>使用策略模式</strong>重构代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IStrategy</span>&#123;</span><br><span class="line">    <span class="title function_">calculate</span>(<span class="attr">salary</span>:<span class="built_in">number</span>):<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每种绩效和对应的策略类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PerformanceS</span> <span class="keyword">implements</span> <span class="title class_">IStrategy</span> &#123;</span><br><span class="line">    calculate (<span class="attr">salary</span>:<span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PerformanceA</span> <span class="keyword">implements</span> <span class="title class_">IStrategy</span> &#123;</span><br><span class="line">    calculate (<span class="attr">salary</span>:<span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PerformanceB</span> <span class="keyword">implements</span> <span class="title class_">IStrategy</span> &#123;</span><br><span class="line">    calculate (<span class="attr">salary</span>:<span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//奖金类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bonus</span> &#123;</span><br><span class="line">    <span class="attr">salary</span>:<span class="built_in">number</span>=<span class="number">0</span>     <span class="comment">//原始工资</span></span><br><span class="line">    <span class="attr">strategy</span>:<span class="built_in">any</span> = <span class="literal">null</span> <span class="comment">//绩效等级对应的策略对象</span></span><br><span class="line"></span><br><span class="line">    setSalary (<span class="attr">salary</span>:<span class="built_in">number</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">salary</span> = salary    <span class="comment">//设置员工的原始工资</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setStrategy (<span class="attr">strategy</span>:strategyType)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">strategy</span> = strategy    <span class="comment">//设置员工绩效等级对应的策略对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getBonus</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//计算取得奖金数额,把计算奖金的操作委托给对应的策略对象</span></span><br><span class="line">        <span class="comment">//类型断言，将any类型转为strategy类型</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="variable language_">this</span>.<span class="property">strategy</span> <span class="keyword">as</span> strategyType).<span class="title function_">calculate</span>(<span class="variable language_">this</span>.<span class="property">salary</span>)   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bonus = <span class="keyword">new</span> <span class="title class_">Bonus</span>()</span><br><span class="line">bonus.<span class="title function_">setSalary</span>(<span class="number">10000</span>);</span><br><span class="line">bonus.<span class="title function_">setStrategy</span>(<span class="keyword">new</span> <span class="title class_">PerformanceS</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bonus.<span class="title function_">getBonus</span>())</span><br><span class="line"></span><br><span class="line">bonus.<span class="title function_">setStrategy</span>(<span class="keyword">new</span> <span class="title class_">PerformanceA</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bonus.<span class="title function_">getBonus</span>())</span><br></pre></td></tr></table></figure>

<p>可以看到通过策略模式重构之后，代码变得更加清晰，各个类的职责更加鲜明。</p>
<h3 id="使用策略模式实现超市选择优惠活动"><a href="#使用策略模式实现超市选择优惠活动" class="headerlink" title="使用策略模式实现超市选择优惠活动"></a>使用策略模式实现超市选择优惠活动</h3><p>在超市里购物时，通常存在两种优惠，一是满减优惠，二是某某商品打折扣。</p>
<p>使用策略模式实现通过其中一种优惠计算最终需要支付的金额</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//strategy接口</span></span><br><span class="line"><span class="keyword">interface</span> strategy &#123;</span><br><span class="line">    <span class="title function_">discount</span>(<span class="attr">money</span>: <span class="built_in">number</span>): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//满减优惠策略</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FullandReduceStrategy</span> <span class="keyword">implements</span> strategy &#123;</span><br><span class="line">    <span class="comment">//满足条件的金额</span></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">conditionMoney</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="comment">//减少的金额</span></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">reduceMoney</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">money:<span class="built_in">number</span>, returnMoney:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">conditionMoney</span> = money;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reduceMoney</span> = returnMoney</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">discount</span>(<span class="attr">money</span>: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">result</span>: <span class="built_in">number</span> = money;</span><br><span class="line">        <span class="keyword">if</span>(money &gt;= <span class="variable language_">this</span>.<span class="property">conditionMoney</span>)&#123;</span><br><span class="line">            result = money - <span class="title class_">Math</span>.<span class="title function_">floor</span>(money / <span class="variable language_">this</span>.<span class="property">conditionMoney</span>) * <span class="variable language_">this</span>.<span class="property">reduceMoney</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//现金折扣策略</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CashRebateStrategy</span> <span class="keyword">implements</span> strategy&#123;</span><br><span class="line">    <span class="comment">//折扣值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">moneyRebate</span>:<span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">moneyrabate:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">moneyRebate</span> = moneyrabate</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">discount</span>(<span class="attr">money</span>: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> money * <span class="variable language_">this</span>.<span class="property">moneyRebate</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">strategy</span>:<span class="built_in">any</span> = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">money</span>:<span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">money:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">money</span> = money</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置优惠策略</span></span><br><span class="line">    <span class="title function_">setStrategy</span>(<span class="params">strategy:strategy</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">strategy</span> = strategy</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行策略</span></span><br><span class="line">    <span class="title function_">execute</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="variable language_">this</span>.<span class="property">strategy</span> <span class="keyword">as</span> strategy).<span class="title function_">discount</span>(<span class="variable language_">this</span>.<span class="property">money</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现满减优惠</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">context</span>:<span class="title class_">Context</span> = <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="number">50</span>)</span><br><span class="line">context.<span class="title function_">setStrategy</span>(<span class="keyword">new</span> <span class="title class_">FullandReduceStrategy</span>(<span class="number">50</span>,<span class="number">2</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="title function_">execute</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现折扣优惠</span></span><br><span class="line">context.<span class="title function_">setStrategy</span>(<span class="keyword">new</span> <span class="title class_">CashRebateStrategy</span>(<span class="number">0.5</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="title function_">execute</span>())</span><br></pre></td></tr></table></figure>

<p>通过使用策略模式，我们消除了原程序中大片的条件分支语句。所有跟计算有关的逻辑不再放在 Context 中，而是分布在各个策略对象中。Context 并没有计算的能力，而是把这个职责委托给了某个策略对象。每个策略对象负责的算法已被各自封装在对象内部。当我们对这些策略对象发出“计算”的请求时，它们会返回各自不同的计算结果，这也是对象多态性的体现。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之组合模式</title>
    <url>/2023/04/02/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>组合模式：组合多个对象形成树形结构以表示具有“整体-部分”关系的层次结构。组合模式对单个对象（即叶子对象）和组合对象（即容器对象）的使用具有一致性，它是一种对象结构模式。</p>
<p>组合模式通过一种巧妙的设计方案，可以一致性地处理整个树形结构或树形结构的一部分，也可以一致性地处理树形结构中的叶子节点（不包含子节点的节点）和容器节点（包含子节点的节点），其实就是利用对象的多态性来实现的。</p>
<h2 id="组合模式结构"><a href="#组合模式结构" class="headerlink" title="组合模式结构"></a>组合模式结构</h2><ul>
<li><strong>Component（</strong>抽象构件）：它可以是接口或抽象类，为叶子构建和容器构建对象声明接口，在该角色中可以包含所有子类共有行为的声明和实现。</li>
<li><strong>Leaf</strong>（叶子构件）：它在组合结构中表示叶子节点对象，叶子节点没有子节点，它实现了在抽象构件中定义的行为。对于那些访问及管理子构件的方法，可以通过异常等方式进行处理。</li>
<li><strong>Composite</strong>（容器构件）：它在组合结构中表示容器节点对象，容器节点包含子节点，其子节点可以是叶子节点，也可以是容器节点，它提供一个集合用于存储子节点，实现在抽象构件中定义的行为，包括那些访问及管理子构建的方法，在其业务方法中可以递归调用其子节点的业务方法。</li>
</ul>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>文件夹和文件之间的关系，非常适合用组合模式来描述。文件夹既可以包含文件，又可以包含其他文件夹，最终可能组合成一棵树。</p>
<p>当我用杀毒软件扫描该文件夹时，往往不会关心里面有多少文件和子文件夹，组合模式使得我们只需要操作最外层的文件夹进行扫描。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//扫描文件夹下的所有文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//文件和文件夹的父类</span></span><br><span class="line">abstract <span class="keyword">class</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">     <span class="attr">name</span>:<span class="title class_">String</span>;</span><br><span class="line">     <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">String</span></span>)&#123;</span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//add往文件夹中加入文件夹或文件，由子类实现</span></span><br><span class="line">     public <span class="title function_">add</span>(<span class="attr">f</span>:<span class="title class_">Component</span>):<span class="keyword">void</span>&#123;&#125;</span><br><span class="line">     <span class="comment">//scan扫描文件，由子类实现</span></span><br><span class="line">     public <span class="title function_">scan</span>():<span class="keyword">void</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件类-叶子构件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileLeaf</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    public <span class="title function_">add</span>(<span class="attr">f</span>: <span class="title class_">Component</span>): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;不可往文件中添加文件&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="title function_">scan</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;--正在被扫描&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件夹类-容器构件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FolderComposite</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    <span class="comment">//files为存储子节点集合</span></span><br><span class="line">    <span class="attr">files</span>:<span class="title class_">Component</span>[]=[];</span><br><span class="line">    <span class="comment">//往里面添加文件夹或文件</span></span><br><span class="line">    public <span class="title function_">add</span>(<span class="attr">f</span>: <span class="title class_">Component</span>): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">files</span>.<span class="title function_">push</span>(f)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//扫描子文件夹及文件</span></span><br><span class="line">    public <span class="title function_">scan</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;-文件夹正在被扫描&quot;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">files</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">f</span> =&gt;</span> &#123;</span><br><span class="line">            f.<span class="title function_">scan</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一些文件夹和文件对象，并且让它们组合成一棵树</span></span><br><span class="line"><span class="keyword">let</span> folder = <span class="keyword">new</span> <span class="title class_">FolderComposite</span>(<span class="string">&quot;父文件夹一&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> folder1 = <span class="keyword">new</span> <span class="title class_">FolderComposite</span>(<span class="string">&quot;子文件夹1&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> folder2 = <span class="keyword">new</span> <span class="title class_">FolderComposite</span>(<span class="string">&quot;子文件夹2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f1 = <span class="keyword">new</span> <span class="title class_">FileLeaf</span>(<span class="string">&quot;vue的设计与实现.pdf&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> f2 = <span class="keyword">new</span> <span class="title class_">FileLeaf</span>(<span class="string">&quot;avatar.png&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> f3 = <span class="keyword">new</span> <span class="title class_">FileLeaf</span>(<span class="string">&quot;总结报告.word&quot;</span>)</span><br><span class="line"></span><br><span class="line">folder1.<span class="title function_">add</span>(f1);</span><br><span class="line">folder2.<span class="title function_">add</span>(f2);</span><br><span class="line">folder.<span class="title function_">add</span>(f3);</span><br><span class="line">folder.<span class="title function_">add</span>(folder1);</span><br><span class="line">folder.<span class="title function_">add</span>(folder2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始扫描folder</span></span><br><span class="line">folder.<span class="title function_">scan</span>();</span><br><span class="line"><span class="comment">// 父文件夹一-文件夹正在被扫描</span></span><br><span class="line"><span class="comment">// index.ts:19 总结报告.word--正在被扫描</span></span><br><span class="line"><span class="comment">// index.ts:34 子文件夹1-文件夹正在被扫描</span></span><br><span class="line"><span class="comment">// index.ts:19 vue的设计与实现.pdf--正在被扫描</span></span><br><span class="line"><span class="comment">// index.ts:34 子文件夹2-文件夹正在被扫描</span></span><br><span class="line"><span class="comment">// index.ts:19 avatar.png--正在被扫描</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>我对虚拟DOM的一些思考</title>
    <url>/2023/03/18/%E8%99%9A%E6%8B%9Fdom/</url>
    <content><![CDATA[<p>最近编写vue插件时我遇到了一个问题：通过引入函数调用，创建虚拟DOM，并且把它转成真实DOM且挂载到body容器中，但当我需要再次把某个组件通过同样的方式挂载到body容器中，(这里暂把第一次创建的虚拟DOM称作旧VNode，第二次创建的称作新VNode)。</p>
<p>原本我是想两个VNode都存在body中，且新VNode排在旧VNode的后面，但在执行新VNode的挂载时却发现body容器中只剩下新VNode，旧VNode不在body中了。这又是什么情况？？？</p>
<p>下面我来写一个小案例，复现当时的情况吧！</p>
<p>在本案例中，页面有两个按钮，点击按钮1会调用函数，该函数会创建VNode1，点击按钮2会创建VNode2</p>
<p>App.vue下的代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>点我创建VNode1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>点我创建VNode2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">VNodeOne</span> <span class="keyword">from</span> <span class="string">&quot;./components/VNodeOne&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">VNodeTwo</span> <span class="keyword">from</span> <span class="string">&quot;./components/VNodeTwo&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//点击创建VNode1按钮函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">btn1</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">VNodeOne</span>.<span class="title function_">service</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//点击创建VNode1按钮函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">btn2</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">VNodeOne</span>.<span class="title function_">service</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>VNodeOne下的index.vue代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这是VNode1 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> &gt;</span>我是VNode1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>VNodeOne下的index.js代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VNodeOne</span> <span class="keyword">from</span> <span class="string">&quot;./index.vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createVNode, render &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">service</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//为组件创建虚拟DOM</span></span><br><span class="line">        <span class="keyword">const</span> vm = <span class="title function_">createVNode</span>(<span class="title class_">VNodeOne</span>);</span><br><span class="line">        <span class="comment">//把虚拟DOM渲染成真实DOM，并挂载到body容器中</span></span><br><span class="line">        <span class="title function_">render</span>(vm,<span class="variable language_">document</span>.<span class="property">body</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>VNodeTwo下的index.vue代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这是VNode2 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是VNode2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>VNodeTwo下的index.js代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VNodeTwo</span> <span class="keyword">from</span> <span class="string">&quot;./index.vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createVNode, render &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">service</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//为组件创建虚拟DOM</span></span><br><span class="line">        <span class="keyword">const</span> vm = <span class="title function_">createVNode</span>(<span class="title class_">VNodeTwo</span>);</span><br><span class="line">        <span class="comment">//把虚拟DOM渲染成真实DOM，并挂载到body容器中</span></span><br><span class="line">        <span class="title function_">render</span>(vm,<span class="variable language_">document</span>.<span class="property">body</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面我点击按钮1，body下的结构是这样的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">data-v-app</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我创建VNode1<span class="tag">&lt;/<span class="name">button</span>&gt;</span>			</span><br><span class="line">        	<span class="tag">&lt;<span class="name">button</span>&gt;</span>点我创建VNode2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/src/main.js?t=1679131845507&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">	<span class="comment">&lt;!-- 这是VNode1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是VNode1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>事情按照我计划那样，VNdoe1被渲染到body容器中，那现在点击按钮2，看看会发生什么?</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">data-v-app</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我创建VNode1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我创建VNode2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/src/main.js?t=1679132407262&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">	<span class="comment">&lt;!-- 这是VNode2 --&gt;</span>xian</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是VNode2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>新生成的DOM结构中，我们可以看到body结构中的VNode1不存在了，只剩下VNode2，也可以这样说，在body容器中，新的VNode取代了旧VNode。但是这不符合预期，我们想要的是把VNode2加在VNode1后面，这又该怎么办？</p>
<p>办法总比困难多，只需将VNodeTwo.js代码修改一下即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VNodeTwo</span> <span class="keyword">from</span> <span class="string">&quot;./index.vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createVNode, render &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">service</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//先创建一个div，真实DOM</span></span><br><span class="line">        <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> vm = <span class="title function_">createVNode</span>(<span class="title class_">VNodeTwo</span>);</span><br><span class="line">        <span class="comment">//将虚拟DOM渲染并挂载到这个div中，然后再把它挂载到body下</span></span><br><span class="line">        <span class="title function_">render</span>(vm,container);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(container)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在我们依次点击btn1，btn2，再看看body结构：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">data-v-app</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我创建VNode1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我创建VNode2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/src/main.js?t=1679133237946&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 这是btn1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是VNode1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这是btn222 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是VNode2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这时VNode2就排在VNode1后面了(虽然多了一层div包裹)，总算把这个问题解决了。</p>
<p><strong>重点来了</strong></p>
<p>那为什么VNode直接渲染到body中，再次触发时新的VNode会替代旧的VNode，</p>
<p>而把VNode渲染到div(已存在)中，再把div挂载到body时， 再次触发时旧的VNode没被新的div替换，而是新div加在旧的VNode后面呢？</p>
<p>这个问题，怎么回答？</p>
<p>按照我的理解，我是这么认为的：</p>
<p>​	点击btn1时，即第一次触发<code>render(vm,document.body)</code>，将VNode渲染并挂载到body容器中，再次触发的时候，如果该VNode是同一个VNode且内容不变的情况下，vue不执行任何操作，也就是说DOM结构不变，如果是执行<code>render(newVm,document.body)</code>，那么newVm会替代旧vm渲染到body中，这样当我们点击btn2时，发生VNode2取代VNode1就可以解释为：VNode1为旧VNode，VNode2为新VNode，它们两个内容不一样，所以发生取代现象(<strong>这种说法不严谨，仅用于本文理解</strong>)。</p>
<p>​	在把VNodeTwo.js代码修改后，把VNode2渲染到新创建的div(已存在)中，再把div挂载到body时，  再次触发时旧的VNode1没被新的div替换，而是新div加在旧的VNode后面，是因为vue会对这些由虚拟dom转成真实dom的数据进行管理,同一个容器下的虚拟dom发生变化时，会将新的虚拟dom替换旧的（当然这里还涉及了<strong>diff算法</strong>对比） 而在body下添加真实的dom(div)，它就不受vue的管理，但vue可以管理这个容器下的虚拟dom。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器实现array和对象遍历</title>
    <url>/2022/10/29/%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h3 id="迭代数组"><a href="#迭代数组" class="headerlink" title="迭代数组"></a>迭代数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代数组</span></span><br><span class="line">        <span class="keyword">var</span> something = (<span class="keyword">function</span>(<span class="params">array</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> arr = array		<span class="comment">//数组</span></span><br><span class="line">            <span class="keyword">var</span> nextVal;	<span class="comment">//遍历的下个值</span></span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;		<span class="comment">//用作数组索引</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">                <span class="attr">next</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> done = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">if</span>(i &lt; arr.<span class="property">length</span>)&#123;</span><br><span class="line">                        nextVal = array[i];</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        done = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                        </span><br><span class="line">                    </span><br><span class="line">                    i++</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>:done, <span class="attr">value</span>:nextVal&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)([<span class="number">10</span>,<span class="number">50</span>,<span class="number">99</span>,-<span class="number">1</span>])	<span class="comment">//传入数组</span></span><br><span class="line">		<span class="comment">//进行迭代</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">of</span> something)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(j)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="迭代对象"><a href="#迭代对象" class="headerlink" title="迭代对象"></a>迭代对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代对象</span></span><br><span class="line">        <span class="keyword">var</span> person = &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;zhangs&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">            <span class="attr">sex</span>:<span class="string">&#x27;male&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> another = (<span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> obj = obj;	<span class="comment">//对象</span></span><br><span class="line">            <span class="keyword">var</span> nextVal;	<span class="comment">//遍历的下一个值</span></span><br><span class="line">            <span class="keyword">var</span> propertyList = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);	<span class="comment">//获取所有键，并以数组形式返回</span></span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;	<span class="comment">//数组见的索引</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> <span class="variable language_">this</span>&#125;,</span><br><span class="line">                <span class="attr">next</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> done = <span class="literal">false</span></span><br><span class="line">                    <span class="keyword">if</span>(i &lt; propertyList.<span class="property">length</span>)&#123;</span><br><span class="line">                        <span class="comment">//每对键值都是一个对象</span></span><br><span class="line">                        nextVal = &#123;&#125;</span><br><span class="line">                        <span class="keyword">var</span> proName = propertyList[i]</span><br><span class="line">                        nextVal[proName] = obj[propertyList[i]]</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        done = <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    i++</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>:done,<span class="attr">value</span>:nextVal&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)(person)	<span class="comment">//传入对象</span></span><br><span class="line">   		<span class="comment">//进行迭代</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">of</span> another)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(j)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">of</span> another)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(j)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之适配器模式</title>
    <url>/2023/01/13/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>适配器模式的作用是解决两个软件实体间的接口不兼容的问题。使用适配器模式之后，原本由于接口不兼容而不能工作的两个软件实体可以一起工作。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>港式插头转换器，港式的电器插头比大陆的电器插头体积要大一些。如果从香港买一个Mac book，我们会发现充电器无法插在家里的插座上，为此而改造家里的插座显然不方便，所以我们需要一个转换插头</p>
<p>具体代码实现：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//港式大插头-&gt;大陆小插头</span></span><br><span class="line"><span class="comment">//源adaptee</span></span><br><span class="line"><span class="comment">//目标target</span></span><br><span class="line"><span class="comment">//适配器adapter</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adaptee</span>&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="built_in">string</span>=<span class="string">&#x27;bigType&#x27;</span>;</span><br><span class="line">    <span class="title function_">request</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是大插头类型&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Target</span>&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="built_in">string</span>=<span class="string">&quot;smallType&quot;</span>;</span><br><span class="line">    <span class="title function_">request</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是小插头类型&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adapter</span>&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="built_in">string</span> = <span class="string">&quot;Adapter&quot;</span>;</span><br><span class="line">    <span class="title function_">change</span>(<span class="params">adaptee:Adaptee</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(adaptee.<span class="property">type</span>!=<span class="string">&#x27;bigType&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Type error!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> target = <span class="keyword">new</span> <span class="title class_">Target</span>()</span><br><span class="line">        target.<span class="title function_">request</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> adaptee = <span class="keyword">new</span> <span class="title class_">Adaptee</span>();</span><br><span class="line"><span class="comment">//未适配，输出：这是大插头类型</span></span><br><span class="line">adaptee.<span class="title function_">request</span>();</span><br><span class="line"><span class="comment">//适配器</span></span><br><span class="line"><span class="keyword">const</span> adapter = <span class="keyword">new</span> <span class="title class_">Adapter</span>();</span><br><span class="line"><span class="comment">//适配后，输出：这是小插头类型</span></span><br><span class="line">adapter.<span class="title function_">change</span>(adaptee);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
</search>
