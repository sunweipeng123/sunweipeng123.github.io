<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/07/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo发文</title>
    <url>/2022/08/29/hexo%E5%8F%91%E6%96%87/</url>
    <content><![CDATA[<p>1、 新建一篇文章</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在hexo博客目录下，进入Git Bash命令窗口中，输入以下命令：</span><br><span class="line">hexo new &quot;在这里&quot;</span><br><span class="line">在博客目录下的/source/_posts/ 文件夹下，可以看到已经生成了标题为(在这里.md)的博客文件</span><br></pre></td></tr></table></figure>
<p>2、给文章添加分类和标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在（在这里.md）文件中设置tags和categories属性:</span><br><span class="line">title: 在这里</span><br><span class="line">date: 2018-08-02 11:41:10</span><br><span class="line">tags:</span><br><span class="line">- 博客           //多个标签可以这样添加</span><br><span class="line">- hexo</span><br><span class="line">categories: web前端</span><br></pre></td></tr></table></figure>
<p>3、发布到Github上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<h3 id="上传时报错"><a href="#上传时报错" class="headerlink" title="上传时报错"></a>上传时报错</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (C:\blog\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:315:20)</span><br><span class="line">      at ChildProcess.cp.emit (C:\blog\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解决：在命令行输入以下内容后，重新上传</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo发表文章</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs开启服务器</title>
    <url>/2022/08/29/nodejs%E5%BC%80%E5%90%AF%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h3 id="1-新建文件夹demo"><a href="#1-新建文件夹demo" class="headerlink" title="1.新建文件夹demo"></a>1.新建文件夹demo</h3><p>在该目录下执行以下命令:<br>npm init<br>npm i express<br>创建server.js（服务器主文件）</p>
<h3 id="2-向sever-js文件写入内容"><a href="#2-向sever-js文件写入内容" class="headerlink" title="2.向sever.js文件写入内容"></a>2.向sever.js文件写入内容</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/person&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">5005</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在demo目录下执行：node server</span></span><br><span class="line"><span class="comment">//在浏览器访问即可</span></span><br></pre></td></tr></table></figure>
<h3 id="3-作为vue项目的后台"><a href="#3-作为vue项目的后台" class="headerlink" title="3.作为vue项目的后台"></a>3.作为vue项目的后台</h3><p>在demo文件夹下创建static文件夹<br>把打包好的vue项目（css、js、index.html等）放到static文件夹下<br>向sever.js文件写入内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="property">static__dirname</span>+<span class="string">&#x27;/static&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.get(&#x27;/person&#x27;,(req,res)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     res.send(&#123;</span></span><br><span class="line"><span class="comment">//         name:&#x27;tom&#x27;,</span></span><br><span class="line"><span class="comment">//         age:18</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">5005</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在demo目录下执行：node server</span></span><br><span class="line"><span class="comment">//在浏览器访问即可:localhost/index</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nodejs服务器</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>pinia</title>
    <url>/2022/10/08/pinia/</url>
    <content><![CDATA[<h1 id="在vue3-ts的环境下使用pinia"><a href="#在vue3-ts的环境下使用pinia" class="headerlink" title="在vue3+ts的环境下使用pinia"></a>在vue3+ts的环境下使用pinia</h1><ol>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save pinia</span><br></pre></td></tr></table></figure>
</li>
<li><p>在mian.ts中</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createPinia&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在src下创建index.ts 和 types.ts(<strong style="color:orange">types.ts是我们用来约束对应模块的状态</strong>)</p>
</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; indexType &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span><br><span class="line"><span class="comment">//main是storeId,保证唯一</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useIndexStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;index&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">state</span>:():<span class="function"><span class="params">indexType</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">count</span>:<span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="title function_">doubleCount</span>():<span class="built_in">number</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span>*<span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">updateCount</span>(<span class="params">val:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">count</span> = val</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//types.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> indexType = &#123;</span><br><span class="line">    <span class="attr">count</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>组件内调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Count组件&lt;/h2&gt;</span><br><span class="line">        &lt;h4&gt;count:&#123;&#123;count&#125;&#125;&lt;/h4&gt;</span><br><span class="line">        &lt;h4&gt;doubleCount:&#123;&#123;doubleCount&#125;&#125;&lt;/h4&gt;</span><br><span class="line">        &lt;button @click=&quot;countChange&quot;&gt;更新pinia-&gt;count&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineComponent,computed &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123;useIndexStore&#125; from &#x27;../stores&#x27;</span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">    name:&#x27;Count&#x27;,</span><br><span class="line">    setup () &#123;</span><br><span class="line">        const indexStore = useIndexStore()</span><br><span class="line">        let doubleCount = computed(()=&gt;indexStore.doubleCount)</span><br><span class="line"></span><br><span class="line">        let count = computed(&#123;</span><br><span class="line">            get():number&#123;</span><br><span class="line">                return  indexStore.count</span><br><span class="line">            &#125;,</span><br><span class="line">            set(val:number):void&#123;</span><br><span class="line">                indexStore.updateCount(val)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        const countChange = ():void=&gt;&#123;</span><br><span class="line">            console.log(Math.random())</span><br><span class="line">            count.value = Math.floor(Math.random()*10)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return &#123;</span><br><span class="line">            count,</span><br><span class="line">            doubleCount,</span><br><span class="line">            countChange</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将store的数据变成响应式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入响应式</span></span><br><span class="line"><span class="keyword">import</span> &#123;storeToRefs&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">const</span> indexStore = <span class="title function_">useIndexStore</span>()</span><br><span class="line"><span class="keyword">const</span> &#123;count&#125; = <span class="title function_">storeToRefs</span>(indexStore)</span><br></pre></td></tr></table></figure>
</li>
<li><p>将数据重置为store最初的状态</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">indexStore.$reset()</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改多个数据</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">indexStore.$pacth()</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="详细的pinia教程"><a href="#详细的pinia教程" class="headerlink" title="详细的pinia教程"></a>详细的pinia教程</h3><p><a href="https://zhuanlan.zhihu.com/p/533233367">https://zhuanlan.zhihu.com/p/533233367</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>你所不知道的this</title>
    <url>/2022/10/29/%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84this/</url>
    <content><![CDATA[<h1 id="你所不知道的this"><a href="#你所不知道的this" class="headerlink" title="你所不知道的this"></a>你所不知道的this</h1><p>this指向从以下四种情况分析</p>
<ol>
<li><p>默认绑定：this指向window，是基础绑定</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局作用域下</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>()<span class="comment">//此时的this指向window</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(test,<span class="number">1000</span>)</span><br><span class="line"><span class="comment">//伪代码如下</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setTimeout</span>(<span class="params">fn,<span class="number">1000</span></span>)&#123;</span><br><span class="line">    <span class="title function_">fn</span>()	<span class="comment">//此时的fn就是test，this指向也为this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>引用绑定：当函数被对象的某个属性引用时，this指向该对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局作用域下</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">walk</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhangs&#x27;</span>,</span><br><span class="line">    <span class="attr">move</span>:walk</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">move</span>()	<span class="comment">//this指向person</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>显式绑定：当函数后面有call，apply，bind时，this指向他们所指定的上下文对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局作用域下</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">walk</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhangs&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">walk.<span class="title function_">call</span>(person)	<span class="comment">//this指向person</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//bind为硬绑定,支持参数柯里化（例：test函数预设了两个参数a、b,可以在bind绑定时，传一个值进去，该值就是a的值）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">walk</span>(<span class="params">name,job</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> str = name+<span class="string">&#x27; is working on &#x27;</span>+job+<span class="string">&#x27; and salary is &#x27;</span>+<span class="variable language_">this</span>.<span class="property">salary</span>+<span class="string">&#x27; monthly!&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str)    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhangs&#x27;</span>,</span><br><span class="line">    <span class="attr">job</span>:<span class="string">&#x27;front end&#x27;</span>,</span><br><span class="line">    <span class="attr">salary</span>:<span class="string">&#x27;30k&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newWalk = walk.<span class="title function_">bind</span>(p,p.<span class="property">name</span>)</span><br><span class="line"><span class="title function_">newWalk</span>(p.<span class="property">job</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>new绑定</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> bak = <span class="keyword">new</span> <span class="title function_">foo</span>(<span class="number">2</span>);	<span class="comment">//使用new来调用foo()时，会构造一个新对象并把它绑定到foo()调用中的this上</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bak.<span class="property">a</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>对象关联和行为委托</title>
    <url>/2022/10/29/%E5%AF%B9%E8%B1%A1%E5%85%B3%E8%81%94%E5%92%8C%E8%A1%8C%E4%B8%BA%E5%A7%94%E6%89%98/</url>
    <content><![CDATA[<h1 id="对象关联和行为委托"><a href="#对象关联和行为委托" class="headerlink" title="对象关联和行为委托"></a>对象关联和行为委托</h1><h4 id="创建关联"><a href="#创建关联" class="headerlink" title="创建关联"></a>创建关联</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123;</span><br><span class="line">    <span class="attr">something</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Tell me something good...&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="title class_">Object</span>.<span class="title function_">create</span>(foo);	<span class="comment">//Object.create(..)会创建一个新对象（bar）并把它关联到我们指定的对象（foo）</span></span><br><span class="line">bar.<span class="title function_">something</span>()		<span class="comment">//当something不存在bar，会把ta委托给foo</span></span><br></pre></td></tr></table></figure>

<h4 id="利用prototype进行委托"><a href="#利用prototype进行委托" class="headerlink" title="利用prototype进行委托"></a>利用prototype进行委托</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用[[Prototype]]把b1委托给Bar并把Bar委托给Foo，实现了三个对象之间的关联。</span></span><br><span class="line"><span class="title class_">Foo</span> = &#123;</span><br><span class="line">            <span class="attr">init</span>:<span class="keyword">function</span>(<span class="params">who</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">me</span> = who;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">identify</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;I am &quot;</span> + <span class="variable language_">this</span>.<span class="property">me</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Bar</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Foo</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Bar</span>.<span class="property">speak</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;Hello,&quot;</span>+ <span class="variable language_">this</span>.<span class="title function_">identify</span>()+<span class="string">&quot;.&quot;</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> b1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Bar</span>);</span><br><span class="line">        b1.<span class="title function_">init</span>(<span class="string">&quot;b1&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> b2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Bar</span>);</span><br><span class="line">        b2.<span class="title function_">init</span>(<span class="string">&quot;b2&quot;</span>)</span><br><span class="line"></span><br><span class="line">        b1.<span class="title function_">speak</span>();</span><br><span class="line">        b2.<span class="title function_">speak</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>生成器generator</title>
    <url>/2022/10/29/%E7%94%9F%E6%88%90%E5%99%A8generator/</url>
    <content><![CDATA[<h3 id="生成器执行例子"><a href="#生成器执行例子" class="headerlink" title="生成器执行例子"></a>生成器执行例子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造生成器函数</span></span><br><span class="line">		<span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> ＊<span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">            a++;</span><br><span class="line">            <span class="keyword">yield</span>;</span><br><span class="line">            b = b ＊ a;</span><br><span class="line">            a = (<span class="keyword">yield</span> b) + <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> ＊<span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">            b--;</span><br><span class="line">            <span class="keyword">yield</span>;</span><br><span class="line">            a = (<span class="keyword">yield</span> <span class="number">8</span>) + b;</span><br><span class="line">            b = a ＊ (<span class="keyword">yield</span> <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构建辅助函数，用于控制迭代器</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">step</span>(<span class="params">gen</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> it = <span class="title function_">gen</span>();		<span class="comment">//相当于初始化，函数还没有执行</span></span><br><span class="line">            <span class="keyword">var</span> last;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">              <span class="comment">// 不管yield出来的是什么，下一次都把它原样传回去！</span></span><br><span class="line">              last = it.<span class="title function_">next</span>( last ).<span class="property">value</span>;	<span class="comment">//启动函数</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//交替执行</span></span><br><span class="line">        <span class="keyword">var</span> s1 = <span class="title function_">step</span>( foo );</span><br><span class="line">        <span class="keyword">var</span> s2 = <span class="title function_">step</span>( bar );</span><br><span class="line"></span><br><span class="line">        <span class="title function_">s2</span>();       <span class="comment">// b--;</span></span><br><span class="line">        <span class="title function_">s2</span>();       <span class="comment">// yield 8</span></span><br><span class="line">        <span class="title function_">s1</span>();       <span class="comment">// a++;</span></span><br><span class="line">        <span class="title function_">s2</span>();       <span class="comment">// a = 8 + b;</span></span><br><span class="line">                  <span class="comment">// yield 2</span></span><br><span class="line">        <span class="title function_">s1</span>();       <span class="comment">// b = b ＊ a;</span></span><br><span class="line">                  <span class="comment">// yield b</span></span><br><span class="line">        <span class="title function_">s1</span>();       <span class="comment">// a = b + 3;</span></span><br><span class="line">        <span class="title function_">s2</span>();       <span class="comment">// b = a ＊ 2;</span></span><br></pre></td></tr></table></figure>

<p>以上代码执行推导</p>
<p>**var s1 &#x3D; step( foo )**：s1为一个函数，it为生成器函数foo()</p>
<p>**var s2 &#x3D; step( bar )**：s2为一个函数，it为生成器函数bar()</p>
<p>第一次**s2()**：bar函数启动，执行b–，b的值为1后停止执行，此时的yield返回undefined，last为undefined</p>
<p>第二次**s2()**：bar函数继续往下执行，遇到yield 8 停止 ，yield返回8 ，last为8</p>
<p>第一次**s1()**：foo函数启动，a的值为2后停止执行，此时的yield返回undefined，last为undefined</p>
<p>第三次执行**s2()**：(yield 8)被传进来last替代，a为9，b &#x3D; 9 * （yield 2）后停止执行，此时yield返回2，last为2</p>
<p>第二次**s1()**：b &#x3D; 9，a&#x3D;(yield b)后停止执行，此时yield将b返回，所以last为9</p>
<p>第三次**s1()**：(yield b)被传进来的last替代，所以a &#x3D; 12</p>
<p>第四次**s2()*<em>：(yield 2)被传进来的last替代，所以b&#x3D;9</em>2，b&#x3D;18</p>
<h3 id="迭代器接口"><a href="#迭代器接口" class="headerlink" title="迭代器接口"></a>迭代器接口</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> something = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> nextVal;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">//for...of循环需要</span></span><br><span class="line">        [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> <span class="variable language_">this</span>&#125;,</span><br><span class="line">        <span class="comment">//标准迭代器接口方法</span></span><br><span class="line">        <span class="attr">next</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nextVal===<span class="literal">undefined</span>)&#123;</span><br><span class="line">                nextVal=<span class="number">1</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                nextVal = (<span class="number">3</span> * nextVal)+<span class="number">6</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">false</span>,<span class="attr">value</span>:nextVal&#125;	<span class="comment">//done表示迭代状态，value为迭代值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行迭代</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> v <span class="keyword">of</span> something) &#123;	<span class="comment">//for..of循环期望something是iterable，于是它寻找并调用它的									  //Symbol.iterator函数。</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>( v );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不要死循环！</span></span><br><span class="line">            <span class="keyword">if</span> (v &gt; <span class="number">500</span>) &#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1 9 33105 321969</span></span><br></pre></td></tr></table></figure>

<h3 id="通过生成器实现上面的例子"><a href="#通过生成器实现上面的例子" class="headerlink" title="通过生成器实现上面的例子"></a>通过生成器实现上面的例子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">        <span class="keyword">function</span> ＊<span class="title function_">something</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> nextVal;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (nextVal === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                  nextVal = <span class="number">1</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span> &#123;</span><br><span class="line">                  nextVal = (<span class="number">3</span> ＊ nextVal) + <span class="number">6</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">yield</span> nextVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for...of循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> v <span class="keyword">of</span> <span class="title function_">something</span>()) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>( v );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不要死循环！</span></span><br><span class="line">            <span class="keyword">if</span> (v &gt; <span class="number">500</span>) &#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>问题：在实现迭代器接口时，for…of是这样使用：<strong>for (var v of something)<strong>，用生成器实现时却是这样：</strong>for (var v of something())</strong></p>
<h3 id="生成器实现数组遍历"><a href="#生成器实现数组遍历" class="headerlink" title="生成器实现数组遍历"></a>生成器实现数组遍历</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">10</span>,<span class="number">99</span>,<span class="number">50</span>,-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> *<span class="title function_">arrGen</span>(<span class="params">array</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> arr = array;</span><br><span class="line">            <span class="keyword">var</span> nextVal;</span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;arr.<span class="property">length</span>)&#123;</span><br><span class="line">                    nextVal = arr[i]</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;end&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">                i++</span><br><span class="line">                <span class="keyword">yield</span> nextVal;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">arrGen</span>(array))&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="生成器实现对象遍历"><a href="#生成器实现对象遍历" class="headerlink" title="生成器实现对象遍历"></a>生成器实现对象遍历</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象遍历</span></span><br><span class="line">        <span class="keyword">var</span> person = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;zhangs&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span>* <span class="title function_">objGen</span>(<span class="params">person</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> obj = person;</span><br><span class="line">            <span class="keyword">var</span> nextVal;</span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">var</span> propertyList = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; propertyList.<span class="property">length</span>) &#123;</span><br><span class="line">                    <span class="comment">//每对键值都是一个对象</span></span><br><span class="line">                    nextVal = &#123;&#125;</span><br><span class="line">                    <span class="keyword">var</span> proName = propertyList[i]</span><br><span class="line">                    nextVal[proName] = obj[propertyList[i]]</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;end&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">yield</span> nextVal</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">objGen</span>(person))&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>生成器和异步</title>
    <url>/2022/10/29/%E7%94%9F%E6%88%90%E5%99%A8%E5%92%8C%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<p>将异步代码变成同步（阻塞），例：你想向后台发送请求，只有当数据返回时才打印</p>
<ol>
<li>发送ajax请求的方法</li>
<li>需要一个方法，发送请求后判断数据是否成功返回，继续往下执行</li>
<li>需要一个方法，等待数据返回，执行打印操作</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="string">&#x27;https://sunweipeng123.github.io/posts.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ajax方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myAjax</span>(<span class="params">url, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>))</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">callback</span>(<span class="string">&#x27;请求失败&#x27;</span>, <span class="literal">null</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="title function_">myAjax</span>(url, <span class="keyword">function</span> (<span class="params">err, text</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            it.<span class="keyword">throw</span>(err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            it.<span class="title function_">next</span>(text)	<span class="comment">//成功拿到数据后，启动生成器继续往下执行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> *<span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> text = <span class="keyword">yield</span> <span class="title function_">foo</span>(path)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(text)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> it = <span class="title function_">main</span>();</span><br><span class="line">it.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure>

<h3 id="生成器-promise"><a href="#生成器-promise" class="headerlink" title="生成器+promise"></a>生成器+promise</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="string">&#x27;https://sunweipeng123.github.io/posts.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ajax方法</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">myAjax</span>(<span class="params">url, callback</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                        <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>))</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">callback</span>(<span class="string">&#x27;请求失败&#x27;</span>, <span class="literal">null</span>)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">            xhr.<span class="title function_">send</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">url</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">                <span class="title function_">myAjax</span>(url, <span class="keyword">function</span> (<span class="params">err, text</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(err)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(text)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span>* <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> text = <span class="keyword">yield</span> <span class="title function_">foo</span>(path)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(text)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">warn</span>(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> it = <span class="title function_">main</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//等待promise决议</span></span><br><span class="line">        <span class="keyword">let</span> p = it.<span class="title function_">next</span>().<span class="property">value</span></span><br><span class="line">        p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">text</span>)&#123;</span><br><span class="line">            it.<span class="title function_">next</span>(text)</span><br><span class="line">        &#125;,<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">            it.<span class="keyword">throw</span>(err)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器实现array和对象遍历</title>
    <url>/2022/10/29/%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h3 id="迭代数组"><a href="#迭代数组" class="headerlink" title="迭代数组"></a>迭代数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代数组</span></span><br><span class="line">        <span class="keyword">var</span> something = (<span class="keyword">function</span>(<span class="params">array</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> arr = array		<span class="comment">//数组</span></span><br><span class="line">            <span class="keyword">var</span> nextVal;	<span class="comment">//遍历的下个值</span></span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;		<span class="comment">//用作数组索引</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">                <span class="attr">next</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> done = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">if</span>(i &lt; arr.<span class="property">length</span>)&#123;</span><br><span class="line">                        nextVal = array[i];</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        done = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                        </span><br><span class="line">                    </span><br><span class="line">                    i++</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>:done, <span class="attr">value</span>:nextVal&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)([<span class="number">10</span>,<span class="number">50</span>,<span class="number">99</span>,-<span class="number">1</span>])	<span class="comment">//传入数组</span></span><br><span class="line">		<span class="comment">//进行迭代</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">of</span> something)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(j)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="迭代对象"><a href="#迭代对象" class="headerlink" title="迭代对象"></a>迭代对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代对象</span></span><br><span class="line">        <span class="keyword">var</span> person = &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;zhangs&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">            <span class="attr">sex</span>:<span class="string">&#x27;male&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> another = (<span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> obj = obj;	<span class="comment">//对象</span></span><br><span class="line">            <span class="keyword">var</span> nextVal;	<span class="comment">//遍历的下一个值</span></span><br><span class="line">            <span class="keyword">var</span> propertyList = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);	<span class="comment">//获取所有键，并以数组形式返回</span></span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;	<span class="comment">//数组见的索引</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> <span class="variable language_">this</span>&#125;,</span><br><span class="line">                <span class="attr">next</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> done = <span class="literal">false</span></span><br><span class="line">                    <span class="keyword">if</span>(i &lt; propertyList.<span class="property">length</span>)&#123;</span><br><span class="line">                        <span class="comment">//每对键值都是一个对象</span></span><br><span class="line">                        nextVal = &#123;&#125;</span><br><span class="line">                        <span class="keyword">var</span> proName = propertyList[i]</span><br><span class="line">                        nextVal[proName] = obj[propertyList[i]]</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        done = <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    i++</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>:done,<span class="attr">value</span>:nextVal&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)(person)	<span class="comment">//传入对象</span></span><br><span class="line">   		<span class="comment">//进行迭代</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">of</span> another)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(j)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">of</span> another)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(j)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
</search>
